
light.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005464  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08005570  08005570  00015570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005620  08005620  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08005620  08005620  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005620  08005620  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005620  08005620  00015620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005624  08005624  00015624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005628  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f8  20000078  080056a0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000470  080056a0  00020470  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d13f  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002020  00000000  00000000  0002d1e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000de0  00000000  00000000  0002f200  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cd8  00000000  00000000  0002ffe0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015441  00000000  00000000  00030cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a0b0  00000000  00000000  000460f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00077e2f  00000000  00000000  000501a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c7fd8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ccc  00000000  00000000  000c8054  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08005558 	.word	0x08005558

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08005558 	.word	0x08005558

0800014c <setLevLED>:
	TIM3->CCR3 = floor(g*nmbda_h*nmbda_g);
	TIM3->CCR4 = floor(b*nmbda_h*nmbda_b);
}

// 按照预定状态控制LED
void setLevLED(uint8_t lev){
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	uint8_t r=0,g=0,b=0;
 8000156:	2300      	movs	r3, #0
 8000158:	73fb      	strb	r3, [r7, #15]
 800015a:	2300      	movs	r3, #0
 800015c:	73bb      	strb	r3, [r7, #14]
 800015e:	2300      	movs	r3, #0
 8000160:	737b      	strb	r3, [r7, #13]
	switch(lev){
 8000162:	79fb      	ldrb	r3, [r7, #7]
 8000164:	2b01      	cmp	r3, #1
 8000166:	d00a      	beq.n	800017e <setLevLED+0x32>
 8000168:	2b02      	cmp	r3, #2
 800016a:	d00f      	beq.n	800018c <setLevLED+0x40>
 800016c:	2b00      	cmp	r3, #0
 800016e:	d114      	bne.n	800019a <setLevLED+0x4e>
		case 0: r=55, g=10, b=10;break;
 8000170:	2337      	movs	r3, #55	; 0x37
 8000172:	73fb      	strb	r3, [r7, #15]
 8000174:	230a      	movs	r3, #10
 8000176:	73bb      	strb	r3, [r7, #14]
 8000178:	230a      	movs	r3, #10
 800017a:	737b      	strb	r3, [r7, #13]
 800017c:	e013      	b.n	80001a6 <setLevLED+0x5a>
		case 1: r=10, g=50, b=10;break;
 800017e:	230a      	movs	r3, #10
 8000180:	73fb      	strb	r3, [r7, #15]
 8000182:	2332      	movs	r3, #50	; 0x32
 8000184:	73bb      	strb	r3, [r7, #14]
 8000186:	230a      	movs	r3, #10
 8000188:	737b      	strb	r3, [r7, #13]
 800018a:	e00c      	b.n	80001a6 <setLevLED+0x5a>
		case 2: r=10, g=10, b=60;break;
 800018c:	230a      	movs	r3, #10
 800018e:	73fb      	strb	r3, [r7, #15]
 8000190:	230a      	movs	r3, #10
 8000192:	73bb      	strb	r3, [r7, #14]
 8000194:	233c      	movs	r3, #60	; 0x3c
 8000196:	737b      	strb	r3, [r7, #13]
 8000198:	e005      	b.n	80001a6 <setLevLED+0x5a>
		default: r=55, g=10, b=10;
 800019a:	2337      	movs	r3, #55	; 0x37
 800019c:	73fb      	strb	r3, [r7, #15]
 800019e:	230a      	movs	r3, #10
 80001a0:	73bb      	strb	r3, [r7, #14]
 80001a2:	230a      	movs	r3, #10
 80001a4:	737b      	strb	r3, [r7, #13]
	}
	TIM3->CCR2 = r;
 80001a6:	4a07      	ldr	r2, [pc, #28]	; (80001c4 <setLevLED+0x78>)
 80001a8:	7bfb      	ldrb	r3, [r7, #15]
 80001aa:	6393      	str	r3, [r2, #56]	; 0x38
	TIM3->CCR3 = g;
 80001ac:	4a05      	ldr	r2, [pc, #20]	; (80001c4 <setLevLED+0x78>)
 80001ae:	7bbb      	ldrb	r3, [r7, #14]
 80001b0:	63d3      	str	r3, [r2, #60]	; 0x3c
	TIM3->CCR4 = b;
 80001b2:	4a04      	ldr	r2, [pc, #16]	; (80001c4 <setLevLED+0x78>)
 80001b4:	7b7b      	ldrb	r3, [r7, #13]
 80001b6:	6413      	str	r3, [r2, #64]	; 0x40
}
 80001b8:	bf00      	nop
 80001ba:	3714      	adds	r7, #20
 80001bc:	46bd      	mov	sp, r7
 80001be:	bc80      	pop	{r7}
 80001c0:	4770      	bx	lr
 80001c2:	bf00      	nop
 80001c4:	40000400 	.word	0x40000400

080001c8 <copyMat>:

// 复制数组
void copyMat(uint8_t *a, uint8_t *b, uint8_t len){
 80001c8:	b480      	push	{r7}
 80001ca:	b087      	sub	sp, #28
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	60f8      	str	r0, [r7, #12]
 80001d0:	60b9      	str	r1, [r7, #8]
 80001d2:	4613      	mov	r3, r2
 80001d4:	71fb      	strb	r3, [r7, #7]
	for(int i = 0; i< len; i++){
 80001d6:	2300      	movs	r3, #0
 80001d8:	617b      	str	r3, [r7, #20]
 80001da:	e00a      	b.n	80001f2 <copyMat+0x2a>
		b[i] = a[i];
 80001dc:	697b      	ldr	r3, [r7, #20]
 80001de:	68fa      	ldr	r2, [r7, #12]
 80001e0:	441a      	add	r2, r3
 80001e2:	697b      	ldr	r3, [r7, #20]
 80001e4:	68b9      	ldr	r1, [r7, #8]
 80001e6:	440b      	add	r3, r1
 80001e8:	7812      	ldrb	r2, [r2, #0]
 80001ea:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i< len; i++){
 80001ec:	697b      	ldr	r3, [r7, #20]
 80001ee:	3301      	adds	r3, #1
 80001f0:	617b      	str	r3, [r7, #20]
 80001f2:	79fb      	ldrb	r3, [r7, #7]
 80001f4:	697a      	ldr	r2, [r7, #20]
 80001f6:	429a      	cmp	r2, r3
 80001f8:	dbf0      	blt.n	80001dc <copyMat+0x14>
	}
}
 80001fa:	bf00      	nop
 80001fc:	371c      	adds	r7, #28
 80001fe:	46bd      	mov	sp, r7
 8000200:	bc80      	pop	{r7}
 8000202:	4770      	bx	lr

08000204 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000204:	b5b0      	push	{r4, r5, r7, lr}
 8000206:	b086      	sub	sp, #24
 8000208:	af04      	add	r7, sp, #16
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800020a:	f001 f8fb 	bl	8001404 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800020e:	f000 f9e9 	bl	80005e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000212:	f000 fbaf 	bl	8000974 <MX_GPIO_Init>
  MX_DMA_Init();
 8000216:	f000 fb6f 	bl	80008f8 <MX_DMA_Init>
  MX_ADC1_Init();
 800021a:	f000 fa3f 	bl	800069c <MX_ADC1_Init>
  MX_TIM3_Init();
 800021e:	f000 fa8b 	bl	8000738 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000222:	f000 fb15 	bl	8000850 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000226:	f000 fb3d 	bl	80008a4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  sendToLogByDMA("device init success!\n");
 800022a:	4aaa      	ldr	r2, [pc, #680]	; (80004d4 <main+0x2d0>)
 800022c:	4baa      	ldr	r3, [pc, #680]	; (80004d8 <main+0x2d4>)
 800022e:	4615      	mov	r5, r2
 8000230:	461c      	mov	r4, r3
 8000232:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000234:	6028      	str	r0, [r5, #0]
 8000236:	6069      	str	r1, [r5, #4]
 8000238:	60aa      	str	r2, [r5, #8]
 800023a:	60eb      	str	r3, [r5, #12]
 800023c:	6820      	ldr	r0, [r4, #0]
 800023e:	6128      	str	r0, [r5, #16]
 8000240:	88a3      	ldrh	r3, [r4, #4]
 8000242:	82ab      	strh	r3, [r5, #20]
 8000244:	2315      	movs	r3, #21
 8000246:	b29b      	uxth	r3, r3
 8000248:	461a      	mov	r2, r3
 800024a:	49a2      	ldr	r1, [pc, #648]	; (80004d4 <main+0x2d0>)
 800024c:	48a3      	ldr	r0, [pc, #652]	; (80004dc <main+0x2d8>)
 800024e:	f004 f861 	bl	8004314 <HAL_UART_Transmit_DMA>
  HAL_Delay(20);
 8000252:	2014      	movs	r0, #20
 8000254:	f001 f938 	bl	80014c8 <HAL_Delay>
  // 开启时钟
  if(HAL_OK != HAL_TIM_Base_Start_IT(&htim3))
 8000258:	48a1      	ldr	r0, [pc, #644]	; (80004e0 <main+0x2dc>)
 800025a:	f003 f9e0 	bl	800361e <HAL_TIM_Base_Start_IT>
 800025e:	4603      	mov	r3, r0
 8000260:	2b00      	cmp	r3, #0
 8000262:	d001      	beq.n	8000268 <main+0x64>
	  Error_Handler();
 8000264:	f000 fd60 	bl	8000d28 <Error_Handler>

  // 开启全彩LED的PWM引脚
  TIM3->CCR2 = 60;
 8000268:	4b9e      	ldr	r3, [pc, #632]	; (80004e4 <main+0x2e0>)
 800026a:	223c      	movs	r2, #60	; 0x3c
 800026c:	639a      	str	r2, [r3, #56]	; 0x38
  TIM3->CCR3 = 40;
 800026e:	4b9d      	ldr	r3, [pc, #628]	; (80004e4 <main+0x2e0>)
 8000270:	2228      	movs	r2, #40	; 0x28
 8000272:	63da      	str	r2, [r3, #60]	; 0x3c
  TIM3->CCR4 = 30;
 8000274:	4b9b      	ldr	r3, [pc, #620]	; (80004e4 <main+0x2e0>)
 8000276:	221e      	movs	r2, #30
 8000278:	641a      	str	r2, [r3, #64]	; 0x40
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800027a:	2104      	movs	r1, #4
 800027c:	4898      	ldr	r0, [pc, #608]	; (80004e0 <main+0x2dc>)
 800027e:	f003 fa25 	bl	80036cc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000282:	2108      	movs	r1, #8
 8000284:	4896      	ldr	r0, [pc, #600]	; (80004e0 <main+0x2dc>)
 8000286:	f003 fa21 	bl	80036cc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800028a:	210c      	movs	r1, #12
 800028c:	4894      	ldr	r0, [pc, #592]	; (80004e0 <main+0x2dc>)
 800028e:	f003 fa1d 	bl	80036cc <HAL_TIM_PWM_Start>
  HAL_Delay(2000);
 8000292:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000296:	f001 f917 	bl	80014c8 <HAL_Delay>
  TIM3->CCR2 = 30;
 800029a:	4b92      	ldr	r3, [pc, #584]	; (80004e4 <main+0x2e0>)
 800029c:	221e      	movs	r2, #30
 800029e:	639a      	str	r2, [r3, #56]	; 0x38
  TIM3->CCR3 = 40;
 80002a0:	4b90      	ldr	r3, [pc, #576]	; (80004e4 <main+0x2e0>)
 80002a2:	2228      	movs	r2, #40	; 0x28
 80002a4:	63da      	str	r2, [r3, #60]	; 0x3c
  TIM3->CCR4 = 50;
 80002a6:	4b8f      	ldr	r3, [pc, #572]	; (80004e4 <main+0x2e0>)
 80002a8:	2232      	movs	r2, #50	; 0x32
 80002aa:	641a      	str	r2, [r3, #64]	; 0x40
  // 串口1使用DMA方式循环接收数据
  HAL_UART_Receive_DMA(&huart1,\
 80002ac:	2205      	movs	r2, #5
 80002ae:	498e      	ldr	r1, [pc, #568]	; (80004e8 <main+0x2e4>)
 80002b0:	488e      	ldr	r0, [pc, #568]	; (80004ec <main+0x2e8>)
 80002b2:	f004 f89b 	bl	80043ec <HAL_UART_Receive_DMA>
 
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t zb_cache[ZB_RECEIVE_DATA_LEN] = {0};
 80002b6:	463b      	mov	r3, r7
 80002b8:	2200      	movs	r2, #0
 80002ba:	601a      	str	r2, [r3, #0]
 80002bc:	711a      	strb	r2, [r3, #4]
  while (1)
  {
	  // ZigBee接收到指令
	  if(is_ZB_rec == 1){
 80002be:	4b8c      	ldr	r3, [pc, #560]	; (80004f0 <main+0x2ec>)
 80002c0:	781b      	ldrb	r3, [r3, #0]
 80002c2:	2b01      	cmp	r3, #1
 80002c4:	d1fb      	bne.n	80002be <main+0xba>
		  // 将指令复制到cache
		  copyMat(ZB_rec_buf, zb_cache, ZB_RECEIVE_DATA_LEN);
 80002c6:	463b      	mov	r3, r7
 80002c8:	2205      	movs	r2, #5
 80002ca:	4619      	mov	r1, r3
 80002cc:	4886      	ldr	r0, [pc, #536]	; (80004e8 <main+0x2e4>)
 80002ce:	f7ff ff7b 	bl	80001c8 <copyMat>
		  is_ZB_rec = 0;
 80002d2:	4b87      	ldr	r3, [pc, #540]	; (80004f0 <main+0x2ec>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	701a      	strb	r2, [r3, #0]
		  // 若已近处理则抛弃
		  if(zb_cache[1] == cmd_idx){
 80002d8:	787a      	ldrb	r2, [r7, #1]
 80002da:	4b86      	ldr	r3, [pc, #536]	; (80004f4 <main+0x2f0>)
 80002dc:	781b      	ldrb	r3, [r3, #0]
 80002de:	429a      	cmp	r2, r3
 80002e0:	f000 816b 	beq.w	80005ba <main+0x3b6>
			  continue;
		  }else{
			  cmd_idx = zb_cache[1];
 80002e4:	787a      	ldrb	r2, [r7, #1]
 80002e6:	4b83      	ldr	r3, [pc, #524]	; (80004f4 <main+0x2f0>)
 80002e8:	701a      	strb	r2, [r3, #0]
			  // 处理指令，配对
			  if(zb_cache[2] == 'a'){
 80002ea:	78bb      	ldrb	r3, [r7, #2]
 80002ec:	2b61      	cmp	r3, #97	; 0x61
 80002ee:	d124      	bne.n	800033a <main+0x136>
				  if((DEVICE_PAIR == zb_cache[3]) && (DEVICE_TYPE == zb_cache[4])){
 80002f0:	78fb      	ldrb	r3, [r7, #3]
 80002f2:	226e      	movs	r2, #110	; 0x6e
 80002f4:	4293      	cmp	r3, r2
 80002f6:	d107      	bne.n	8000308 <main+0x104>
 80002f8:	793b      	ldrb	r3, [r7, #4]
 80002fa:	2262      	movs	r2, #98	; 0x62
 80002fc:	4293      	cmp	r3, r2
 80002fe:	d103      	bne.n	8000308 <main+0x104>
					  zb_send[2] = 'T';
 8000300:	4b7d      	ldr	r3, [pc, #500]	; (80004f8 <main+0x2f4>)
 8000302:	2254      	movs	r2, #84	; 0x54
 8000304:	709a      	strb	r2, [r3, #2]
 8000306:	e002      	b.n	800030e <main+0x10a>
				  }else{
					  zb_send[2] = 'F';
 8000308:	4b7b      	ldr	r3, [pc, #492]	; (80004f8 <main+0x2f4>)
 800030a:	2246      	movs	r2, #70	; 0x46
 800030c:	709a      	strb	r2, [r3, #2]
				  }
				  zb_send[0] = DEVICE_ADDRESS;
 800030e:	2262      	movs	r2, #98	; 0x62
 8000310:	4b79      	ldr	r3, [pc, #484]	; (80004f8 <main+0x2f4>)
 8000312:	701a      	strb	r2, [r3, #0]
				  zb_send[1] = cmd_idx;
 8000314:	4b77      	ldr	r3, [pc, #476]	; (80004f4 <main+0x2f0>)
 8000316:	781a      	ldrb	r2, [r3, #0]
 8000318:	4b77      	ldr	r3, [pc, #476]	; (80004f8 <main+0x2f4>)
 800031a:	705a      	strb	r2, [r3, #1]
				  zb_send[3] = '|';
 800031c:	4b76      	ldr	r3, [pc, #472]	; (80004f8 <main+0x2f4>)
 800031e:	227c      	movs	r2, #124	; 0x7c
 8000320:	70da      	strb	r2, [r3, #3]
				  sendToZBByDMA(zb_send);
 8000322:	4975      	ldr	r1, [pc, #468]	; (80004f8 <main+0x2f4>)
 8000324:	4875      	ldr	r0, [pc, #468]	; (80004fc <main+0x2f8>)
 8000326:	f004 fd05 	bl	8004d34 <siprintf>
 800032a:	4603      	mov	r3, r0
 800032c:	b29b      	uxth	r3, r3
 800032e:	461a      	mov	r2, r3
 8000330:	4972      	ldr	r1, [pc, #456]	; (80004fc <main+0x2f8>)
 8000332:	486e      	ldr	r0, [pc, #440]	; (80004ec <main+0x2e8>)
 8000334:	f003 ffee 	bl	8004314 <HAL_UART_Transmit_DMA>
 8000338:	e120      	b.n	800057c <main+0x378>
			  // 处理指令，控制灯的状态
			  }else if(zb_cache[2] == 'b'){
 800033a:	78bb      	ldrb	r3, [r7, #2]
 800033c:	2b62      	cmp	r3, #98	; 0x62
 800033e:	d12b      	bne.n	8000398 <main+0x194>
				  if(zb_cache[3] == 'a'){
 8000340:	78fb      	ldrb	r3, [r7, #3]
 8000342:	2b61      	cmp	r3, #97	; 0x61
 8000344:	d109      	bne.n	800035a <main+0x156>
					  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8000346:	2201      	movs	r2, #1
 8000348:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800034c:	486c      	ldr	r0, [pc, #432]	; (8000500 <main+0x2fc>)
 800034e:	f002 fb64 	bl	8002a1a <HAL_GPIO_WritePin>
					  zb_send[2] = 'T';
 8000352:	4b69      	ldr	r3, [pc, #420]	; (80004f8 <main+0x2f4>)
 8000354:	2254      	movs	r2, #84	; 0x54
 8000356:	709a      	strb	r2, [r3, #2]
 8000358:	e008      	b.n	800036c <main+0x168>
				  }else{
					  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 800035a:	2200      	movs	r2, #0
 800035c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000360:	4867      	ldr	r0, [pc, #412]	; (8000500 <main+0x2fc>)
 8000362:	f002 fb5a 	bl	8002a1a <HAL_GPIO_WritePin>
					  zb_send[2] = 'T';
 8000366:	4b64      	ldr	r3, [pc, #400]	; (80004f8 <main+0x2f4>)
 8000368:	2254      	movs	r2, #84	; 0x54
 800036a:	709a      	strb	r2, [r3, #2]
				  }
				  zb_send[0] = DEVICE_ADDRESS;
 800036c:	2262      	movs	r2, #98	; 0x62
 800036e:	4b62      	ldr	r3, [pc, #392]	; (80004f8 <main+0x2f4>)
 8000370:	701a      	strb	r2, [r3, #0]
				  zb_send[1] = cmd_idx;
 8000372:	4b60      	ldr	r3, [pc, #384]	; (80004f4 <main+0x2f0>)
 8000374:	781a      	ldrb	r2, [r3, #0]
 8000376:	4b60      	ldr	r3, [pc, #384]	; (80004f8 <main+0x2f4>)
 8000378:	705a      	strb	r2, [r3, #1]
				  zb_send[3] = '|';
 800037a:	4b5f      	ldr	r3, [pc, #380]	; (80004f8 <main+0x2f4>)
 800037c:	227c      	movs	r2, #124	; 0x7c
 800037e:	70da      	strb	r2, [r3, #3]
				  sendToZBByDMA(zb_send);
 8000380:	495d      	ldr	r1, [pc, #372]	; (80004f8 <main+0x2f4>)
 8000382:	485e      	ldr	r0, [pc, #376]	; (80004fc <main+0x2f8>)
 8000384:	f004 fcd6 	bl	8004d34 <siprintf>
 8000388:	4603      	mov	r3, r0
 800038a:	b29b      	uxth	r3, r3
 800038c:	461a      	mov	r2, r3
 800038e:	495b      	ldr	r1, [pc, #364]	; (80004fc <main+0x2f8>)
 8000390:	4856      	ldr	r0, [pc, #344]	; (80004ec <main+0x2e8>)
 8000392:	f003 ffbf 	bl	8004314 <HAL_UART_Transmit_DMA>
 8000396:	e0f1      	b.n	800057c <main+0x378>
			  // 处理指令，获取灯的状态
			  }else if(zb_cache[2] == 'c'){
 8000398:	78bb      	ldrb	r3, [r7, #2]
 800039a:	2b63      	cmp	r3, #99	; 0x63
 800039c:	d126      	bne.n	80003ec <main+0x1e8>
				  GPIO_PinState lightState = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 800039e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003a2:	4857      	ldr	r0, [pc, #348]	; (8000500 <main+0x2fc>)
 80003a4:	f002 fb22 	bl	80029ec <HAL_GPIO_ReadPin>
 80003a8:	4603      	mov	r3, r0
 80003aa:	71fb      	strb	r3, [r7, #7]
				  if(lightState == GPIO_PIN_SET){
 80003ac:	79fb      	ldrb	r3, [r7, #7]
 80003ae:	2b01      	cmp	r3, #1
 80003b0:	d103      	bne.n	80003ba <main+0x1b6>
					  zb_send[2] = 'a';
 80003b2:	4b51      	ldr	r3, [pc, #324]	; (80004f8 <main+0x2f4>)
 80003b4:	2261      	movs	r2, #97	; 0x61
 80003b6:	709a      	strb	r2, [r3, #2]
 80003b8:	e002      	b.n	80003c0 <main+0x1bc>
				  }else{
					  zb_send[2] = 'b';
 80003ba:	4b4f      	ldr	r3, [pc, #316]	; (80004f8 <main+0x2f4>)
 80003bc:	2262      	movs	r2, #98	; 0x62
 80003be:	709a      	strb	r2, [r3, #2]
				  }
				  zb_send[0] = DEVICE_ADDRESS;
 80003c0:	2262      	movs	r2, #98	; 0x62
 80003c2:	4b4d      	ldr	r3, [pc, #308]	; (80004f8 <main+0x2f4>)
 80003c4:	701a      	strb	r2, [r3, #0]
				  zb_send[1] = cmd_idx;
 80003c6:	4b4b      	ldr	r3, [pc, #300]	; (80004f4 <main+0x2f0>)
 80003c8:	781a      	ldrb	r2, [r3, #0]
 80003ca:	4b4b      	ldr	r3, [pc, #300]	; (80004f8 <main+0x2f4>)
 80003cc:	705a      	strb	r2, [r3, #1]
				  zb_send[3] = '|';
 80003ce:	4b4a      	ldr	r3, [pc, #296]	; (80004f8 <main+0x2f4>)
 80003d0:	227c      	movs	r2, #124	; 0x7c
 80003d2:	70da      	strb	r2, [r3, #3]
				  sendToZBByDMA(zb_send);
 80003d4:	4948      	ldr	r1, [pc, #288]	; (80004f8 <main+0x2f4>)
 80003d6:	4849      	ldr	r0, [pc, #292]	; (80004fc <main+0x2f8>)
 80003d8:	f004 fcac 	bl	8004d34 <siprintf>
 80003dc:	4603      	mov	r3, r0
 80003de:	b29b      	uxth	r3, r3
 80003e0:	461a      	mov	r2, r3
 80003e2:	4946      	ldr	r1, [pc, #280]	; (80004fc <main+0x2f8>)
 80003e4:	4841      	ldr	r0, [pc, #260]	; (80004ec <main+0x2e8>)
 80003e6:	f003 ff95 	bl	8004314 <HAL_UART_Transmit_DMA>
 80003ea:	e0c7      	b.n	800057c <main+0x378>
			  // 处理指令，调整指示灯状态
			  }else if(zb_cache[2] == 'd'){
 80003ec:	78bb      	ldrb	r3, [r7, #2]
 80003ee:	2b64      	cmp	r3, #100	; 0x64
 80003f0:	d130      	bne.n	8000454 <main+0x250>
				  if(zb_cache[3] == 'a'){
 80003f2:	78fb      	ldrb	r3, [r7, #3]
 80003f4:	2b61      	cmp	r3, #97	; 0x61
 80003f6:	d103      	bne.n	8000400 <main+0x1fc>
					  setLevLED(0);
 80003f8:	2000      	movs	r0, #0
 80003fa:	f7ff fea7 	bl	800014c <setLevLED>
 80003fe:	e010      	b.n	8000422 <main+0x21e>
				  }else if(zb_cache[3] == 'b'){
 8000400:	78fb      	ldrb	r3, [r7, #3]
 8000402:	2b62      	cmp	r3, #98	; 0x62
 8000404:	d103      	bne.n	800040e <main+0x20a>
					  setLevLED(1);
 8000406:	2001      	movs	r0, #1
 8000408:	f7ff fea0 	bl	800014c <setLevLED>
 800040c:	e009      	b.n	8000422 <main+0x21e>
				  }else if(zb_cache[3] == 'c'){
 800040e:	78fb      	ldrb	r3, [r7, #3]
 8000410:	2b63      	cmp	r3, #99	; 0x63
 8000412:	d103      	bne.n	800041c <main+0x218>
					  setLevLED(2);
 8000414:	2002      	movs	r0, #2
 8000416:	f7ff fe99 	bl	800014c <setLevLED>
 800041a:	e002      	b.n	8000422 <main+0x21e>
				  }else{
					  setLevLED(0);
 800041c:	2000      	movs	r0, #0
 800041e:	f7ff fe95 	bl	800014c <setLevLED>
				  }
				  zb_send[0] = DEVICE_ADDRESS;
 8000422:	2262      	movs	r2, #98	; 0x62
 8000424:	4b34      	ldr	r3, [pc, #208]	; (80004f8 <main+0x2f4>)
 8000426:	701a      	strb	r2, [r3, #0]
				  zb_send[1] = cmd_idx;
 8000428:	4b32      	ldr	r3, [pc, #200]	; (80004f4 <main+0x2f0>)
 800042a:	781a      	ldrb	r2, [r3, #0]
 800042c:	4b32      	ldr	r3, [pc, #200]	; (80004f8 <main+0x2f4>)
 800042e:	705a      	strb	r2, [r3, #1]
				  zb_send[2] = 'T';
 8000430:	4b31      	ldr	r3, [pc, #196]	; (80004f8 <main+0x2f4>)
 8000432:	2254      	movs	r2, #84	; 0x54
 8000434:	709a      	strb	r2, [r3, #2]
				  zb_send[3] = '|';
 8000436:	4b30      	ldr	r3, [pc, #192]	; (80004f8 <main+0x2f4>)
 8000438:	227c      	movs	r2, #124	; 0x7c
 800043a:	70da      	strb	r2, [r3, #3]
				  sendToZBByDMA(zb_send);
 800043c:	492e      	ldr	r1, [pc, #184]	; (80004f8 <main+0x2f4>)
 800043e:	482f      	ldr	r0, [pc, #188]	; (80004fc <main+0x2f8>)
 8000440:	f004 fc78 	bl	8004d34 <siprintf>
 8000444:	4603      	mov	r3, r0
 8000446:	b29b      	uxth	r3, r3
 8000448:	461a      	mov	r2, r3
 800044a:	492c      	ldr	r1, [pc, #176]	; (80004fc <main+0x2f8>)
 800044c:	4827      	ldr	r0, [pc, #156]	; (80004ec <main+0x2e8>)
 800044e:	f003 ff61 	bl	8004314 <HAL_UART_Transmit_DMA>
 8000452:	e093      	b.n	800057c <main+0x378>
			  // 处理指令，调整应用场景
			  }else if(zb_cache[2] == 'e'){
 8000454:	78bb      	ldrb	r3, [r7, #2]
 8000456:	2b65      	cmp	r3, #101	; 0x65
 8000458:	f040 8090 	bne.w	800057c <main+0x378>
				  if((zb_cache[4] == 'c') && (zb_cache[3] == 'z')){
 800045c:	793b      	ldrb	r3, [r7, #4]
 800045e:	2b63      	cmp	r3, #99	; 0x63
 8000460:	d130      	bne.n	80004c4 <main+0x2c0>
 8000462:	78fb      	ldrb	r3, [r7, #3]
 8000464:	2b7a      	cmp	r3, #122	; 0x7a
 8000466:	d12d      	bne.n	80004c4 <main+0x2c0>
					  zb_send[0] = DEVICE_ADDRESS;
 8000468:	2262      	movs	r2, #98	; 0x62
 800046a:	4b23      	ldr	r3, [pc, #140]	; (80004f8 <main+0x2f4>)
 800046c:	701a      	strb	r2, [r3, #0]
					  zb_send[1] = cmd_idx;
 800046e:	4b21      	ldr	r3, [pc, #132]	; (80004f4 <main+0x2f0>)
 8000470:	781a      	ldrb	r2, [r3, #0]
 8000472:	4b21      	ldr	r3, [pc, #132]	; (80004f8 <main+0x2f4>)
 8000474:	705a      	strb	r2, [r3, #1]
					  zb_send[2] = state[0];
 8000476:	4b23      	ldr	r3, [pc, #140]	; (8000504 <main+0x300>)
 8000478:	781a      	ldrb	r2, [r3, #0]
 800047a:	4b1f      	ldr	r3, [pc, #124]	; (80004f8 <main+0x2f4>)
 800047c:	709a      	strb	r2, [r3, #2]
					  zb_send[3] = state[1];
 800047e:	4b21      	ldr	r3, [pc, #132]	; (8000504 <main+0x300>)
 8000480:	785a      	ldrb	r2, [r3, #1]
 8000482:	4b1d      	ldr	r3, [pc, #116]	; (80004f8 <main+0x2f4>)
 8000484:	70da      	strb	r2, [r3, #3]
					  zb_send[4] = state[2];
 8000486:	4b1f      	ldr	r3, [pc, #124]	; (8000504 <main+0x300>)
 8000488:	789a      	ldrb	r2, [r3, #2]
 800048a:	4b1b      	ldr	r3, [pc, #108]	; (80004f8 <main+0x2f4>)
 800048c:	711a      	strb	r2, [r3, #4]
					  zb_send[5] = state[3];
 800048e:	4b1d      	ldr	r3, [pc, #116]	; (8000504 <main+0x300>)
 8000490:	78da      	ldrb	r2, [r3, #3]
 8000492:	4b19      	ldr	r3, [pc, #100]	; (80004f8 <main+0x2f4>)
 8000494:	715a      	strb	r2, [r3, #5]
					  zb_send[6] = state[4];
 8000496:	4b1b      	ldr	r3, [pc, #108]	; (8000504 <main+0x300>)
 8000498:	791a      	ldrb	r2, [r3, #4]
 800049a:	4b17      	ldr	r3, [pc, #92]	; (80004f8 <main+0x2f4>)
 800049c:	719a      	strb	r2, [r3, #6]
					  zb_send[7] = state[5];
 800049e:	4b19      	ldr	r3, [pc, #100]	; (8000504 <main+0x300>)
 80004a0:	795a      	ldrb	r2, [r3, #5]
 80004a2:	4b15      	ldr	r3, [pc, #84]	; (80004f8 <main+0x2f4>)
 80004a4:	71da      	strb	r2, [r3, #7]
					  zb_send[8] = '|';
 80004a6:	4b14      	ldr	r3, [pc, #80]	; (80004f8 <main+0x2f4>)
 80004a8:	227c      	movs	r2, #124	; 0x7c
 80004aa:	721a      	strb	r2, [r3, #8]
					  sendToZBByDMA(zb_send);
 80004ac:	4912      	ldr	r1, [pc, #72]	; (80004f8 <main+0x2f4>)
 80004ae:	4813      	ldr	r0, [pc, #76]	; (80004fc <main+0x2f8>)
 80004b0:	f004 fc40 	bl	8004d34 <siprintf>
 80004b4:	4603      	mov	r3, r0
 80004b6:	b29b      	uxth	r3, r3
 80004b8:	461a      	mov	r2, r3
 80004ba:	4910      	ldr	r1, [pc, #64]	; (80004fc <main+0x2f8>)
 80004bc:	480b      	ldr	r0, [pc, #44]	; (80004ec <main+0x2e8>)
 80004be:	f003 ff29 	bl	8004314 <HAL_UART_Transmit_DMA>
 80004c2:	e05b      	b.n	800057c <main+0x378>
				  }else{
					  if(zb_cache[3] == 'a'){
 80004c4:	78fb      	ldrb	r3, [r7, #3]
 80004c6:	2b61      	cmp	r3, #97	; 0x61
 80004c8:	d11e      	bne.n	8000508 <main+0x304>
						  state[0] = zb_cache[4];
 80004ca:	793a      	ldrb	r2, [r7, #4]
 80004cc:	4b0d      	ldr	r3, [pc, #52]	; (8000504 <main+0x300>)
 80004ce:	701a      	strb	r2, [r3, #0]
 80004d0:	e03c      	b.n	800054c <main+0x348>
 80004d2:	bf00      	nop
 80004d4:	200003d4 	.word	0x200003d4
 80004d8:	08005570 	.word	0x08005570
 80004dc:	200001c0 	.word	0x200001c0
 80004e0:	20000244 	.word	0x20000244
 80004e4:	40000400 	.word	0x40000400
 80004e8:	20000454 	.word	0x20000454
 80004ec:	2000033c 	.word	0x2000033c
 80004f0:	20000099 	.word	0x20000099
 80004f4:	20000094 	.word	0x20000094
 80004f8:	200003c0 	.word	0x200003c0
 80004fc:	2000045c 	.word	0x2000045c
 8000500:	40010c00 	.word	0x40010c00
 8000504:	20000000 	.word	0x20000000
					  }else if(zb_cache[3] == 'b'){
 8000508:	78fb      	ldrb	r3, [r7, #3]
 800050a:	2b62      	cmp	r3, #98	; 0x62
 800050c:	d103      	bne.n	8000516 <main+0x312>
						  state[1] = zb_cache[4];
 800050e:	793a      	ldrb	r2, [r7, #4]
 8000510:	4b2b      	ldr	r3, [pc, #172]	; (80005c0 <main+0x3bc>)
 8000512:	705a      	strb	r2, [r3, #1]
 8000514:	e01a      	b.n	800054c <main+0x348>
					  }else if(zb_cache[3] == 'c'){
 8000516:	78fb      	ldrb	r3, [r7, #3]
 8000518:	2b63      	cmp	r3, #99	; 0x63
 800051a:	d103      	bne.n	8000524 <main+0x320>
						  state[2] = zb_cache[4];
 800051c:	793a      	ldrb	r2, [r7, #4]
 800051e:	4b28      	ldr	r3, [pc, #160]	; (80005c0 <main+0x3bc>)
 8000520:	709a      	strb	r2, [r3, #2]
 8000522:	e013      	b.n	800054c <main+0x348>
					  }else if(zb_cache[3] == 'd'){
 8000524:	78fb      	ldrb	r3, [r7, #3]
 8000526:	2b64      	cmp	r3, #100	; 0x64
 8000528:	d103      	bne.n	8000532 <main+0x32e>
						  state[3] = zb_cache[4];
 800052a:	793a      	ldrb	r2, [r7, #4]
 800052c:	4b24      	ldr	r3, [pc, #144]	; (80005c0 <main+0x3bc>)
 800052e:	70da      	strb	r2, [r3, #3]
 8000530:	e00c      	b.n	800054c <main+0x348>
					  }else if(zb_cache[3] == 'e'){
 8000532:	78fb      	ldrb	r3, [r7, #3]
 8000534:	2b65      	cmp	r3, #101	; 0x65
 8000536:	d103      	bne.n	8000540 <main+0x33c>
						  state[4] = zb_cache[4];
 8000538:	793a      	ldrb	r2, [r7, #4]
 800053a:	4b21      	ldr	r3, [pc, #132]	; (80005c0 <main+0x3bc>)
 800053c:	711a      	strb	r2, [r3, #4]
 800053e:	e005      	b.n	800054c <main+0x348>
					  }else if(zb_cache[3] == 'f'){
 8000540:	78fb      	ldrb	r3, [r7, #3]
 8000542:	2b66      	cmp	r3, #102	; 0x66
 8000544:	d102      	bne.n	800054c <main+0x348>
						  state[5] = zb_cache[4];
 8000546:	793a      	ldrb	r2, [r7, #4]
 8000548:	4b1d      	ldr	r3, [pc, #116]	; (80005c0 <main+0x3bc>)
 800054a:	715a      	strb	r2, [r3, #5]
					  }
					  zb_send[0] = DEVICE_ADDRESS;
 800054c:	2262      	movs	r2, #98	; 0x62
 800054e:	4b1d      	ldr	r3, [pc, #116]	; (80005c4 <main+0x3c0>)
 8000550:	701a      	strb	r2, [r3, #0]
					  zb_send[1] = cmd_idx;
 8000552:	4b1d      	ldr	r3, [pc, #116]	; (80005c8 <main+0x3c4>)
 8000554:	781a      	ldrb	r2, [r3, #0]
 8000556:	4b1b      	ldr	r3, [pc, #108]	; (80005c4 <main+0x3c0>)
 8000558:	705a      	strb	r2, [r3, #1]
					  zb_send[2] = 'T';
 800055a:	4b1a      	ldr	r3, [pc, #104]	; (80005c4 <main+0x3c0>)
 800055c:	2254      	movs	r2, #84	; 0x54
 800055e:	709a      	strb	r2, [r3, #2]
					  zb_send[3] = '|';
 8000560:	4b18      	ldr	r3, [pc, #96]	; (80005c4 <main+0x3c0>)
 8000562:	227c      	movs	r2, #124	; 0x7c
 8000564:	70da      	strb	r2, [r3, #3]
					  sendToZBByDMA(zb_send);
 8000566:	4917      	ldr	r1, [pc, #92]	; (80005c4 <main+0x3c0>)
 8000568:	4818      	ldr	r0, [pc, #96]	; (80005cc <main+0x3c8>)
 800056a:	f004 fbe3 	bl	8004d34 <siprintf>
 800056e:	4603      	mov	r3, r0
 8000570:	b29b      	uxth	r3, r3
 8000572:	461a      	mov	r2, r3
 8000574:	4915      	ldr	r1, [pc, #84]	; (80005cc <main+0x3c8>)
 8000576:	4816      	ldr	r0, [pc, #88]	; (80005d0 <main+0x3cc>)
 8000578:	f003 fecc 	bl	8004314 <HAL_UART_Transmit_DMA>
				  }
			  }
		  }
		  sendToLogByDMA("zb get data! %c, %c, %c, %c, %c\n", ZB_rec_buf[0], ZB_rec_buf[1], ZB_rec_buf[2], ZB_rec_buf[3], ZB_rec_buf[4]);
 800057c:	4b15      	ldr	r3, [pc, #84]	; (80005d4 <main+0x3d0>)
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	4618      	mov	r0, r3
 8000582:	4b14      	ldr	r3, [pc, #80]	; (80005d4 <main+0x3d0>)
 8000584:	785b      	ldrb	r3, [r3, #1]
 8000586:	461c      	mov	r4, r3
 8000588:	4b12      	ldr	r3, [pc, #72]	; (80005d4 <main+0x3d0>)
 800058a:	789b      	ldrb	r3, [r3, #2]
 800058c:	461a      	mov	r2, r3
 800058e:	4b11      	ldr	r3, [pc, #68]	; (80005d4 <main+0x3d0>)
 8000590:	78db      	ldrb	r3, [r3, #3]
 8000592:	4619      	mov	r1, r3
 8000594:	4b0f      	ldr	r3, [pc, #60]	; (80005d4 <main+0x3d0>)
 8000596:	791b      	ldrb	r3, [r3, #4]
 8000598:	9302      	str	r3, [sp, #8]
 800059a:	9101      	str	r1, [sp, #4]
 800059c:	9200      	str	r2, [sp, #0]
 800059e:	4623      	mov	r3, r4
 80005a0:	4602      	mov	r2, r0
 80005a2:	490d      	ldr	r1, [pc, #52]	; (80005d8 <main+0x3d4>)
 80005a4:	480d      	ldr	r0, [pc, #52]	; (80005dc <main+0x3d8>)
 80005a6:	f004 fbc5 	bl	8004d34 <siprintf>
 80005aa:	4603      	mov	r3, r0
 80005ac:	b29b      	uxth	r3, r3
 80005ae:	461a      	mov	r2, r3
 80005b0:	490a      	ldr	r1, [pc, #40]	; (80005dc <main+0x3d8>)
 80005b2:	480b      	ldr	r0, [pc, #44]	; (80005e0 <main+0x3dc>)
 80005b4:	f003 feae 	bl	8004314 <HAL_UART_Transmit_DMA>
 80005b8:	e681      	b.n	80002be <main+0xba>
			  continue;
 80005ba:	bf00      	nop
	  if(is_ZB_rec == 1){
 80005bc:	e67f      	b.n	80002be <main+0xba>
 80005be:	bf00      	nop
 80005c0:	20000000 	.word	0x20000000
 80005c4:	200003c0 	.word	0x200003c0
 80005c8:	20000094 	.word	0x20000094
 80005cc:	2000045c 	.word	0x2000045c
 80005d0:	2000033c 	.word	0x2000033c
 80005d4:	20000454 	.word	0x20000454
 80005d8:	08005588 	.word	0x08005588
 80005dc:	200003d4 	.word	0x200003d4
 80005e0:	200001c0 	.word	0x200001c0

080005e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b094      	sub	sp, #80	; 0x50
 80005e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005ee:	2228      	movs	r2, #40	; 0x28
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f004 fb96 	bl	8004d24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f8:	f107 0314 	add.w	r3, r7, #20
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]
 8000606:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000608:	1d3b      	adds	r3, r7, #4
 800060a:	2200      	movs	r2, #0
 800060c:	601a      	str	r2, [r3, #0]
 800060e:	605a      	str	r2, [r3, #4]
 8000610:	609a      	str	r2, [r3, #8]
 8000612:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000614:	2301      	movs	r3, #1
 8000616:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000618:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800061c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800061e:	2300      	movs	r3, #0
 8000620:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000622:	2301      	movs	r3, #1
 8000624:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000626:	2302      	movs	r3, #2
 8000628:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800062a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800062e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL7;
 8000630:	f44f 13a0 	mov.w	r3, #1310720	; 0x140000
 8000634:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000636:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800063a:	4618      	mov	r0, r3
 800063c:	f002 fa36 	bl	8002aac <HAL_RCC_OscConfig>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000646:	f000 fb6f 	bl	8000d28 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800064a:	230f      	movs	r3, #15
 800064c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800064e:	2302      	movs	r3, #2
 8000650:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000652:	2300      	movs	r3, #0
 8000654:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000656:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800065a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800065c:	2300      	movs	r3, #0
 800065e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000660:	f107 0314 	add.w	r3, r7, #20
 8000664:	2102      	movs	r1, #2
 8000666:	4618      	mov	r0, r3
 8000668:	f002 fca0 	bl	8002fac <HAL_RCC_ClockConfig>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000672:	f000 fb59 	bl	8000d28 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000676:	2302      	movs	r3, #2
 8000678:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 800067a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800067e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000680:	1d3b      	adds	r3, r7, #4
 8000682:	4618      	mov	r0, r3
 8000684:	f002 fe2e 	bl	80032e4 <HAL_RCCEx_PeriphCLKConfig>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800068e:	f000 fb4b 	bl	8000d28 <Error_Handler>
  }
}
 8000692:	bf00      	nop
 8000694:	3750      	adds	r7, #80	; 0x50
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
	...

0800069c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006a2:	1d3b      	adds	r3, r7, #4
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 80006ac:	4b20      	ldr	r3, [pc, #128]	; (8000730 <MX_ADC1_Init+0x94>)
 80006ae:	4a21      	ldr	r2, [pc, #132]	; (8000734 <MX_ADC1_Init+0x98>)
 80006b0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80006b2:	4b1f      	ldr	r3, [pc, #124]	; (8000730 <MX_ADC1_Init+0x94>)
 80006b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006b8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006ba:	4b1d      	ldr	r3, [pc, #116]	; (8000730 <MX_ADC1_Init+0x94>)
 80006bc:	2200      	movs	r2, #0
 80006be:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006c0:	4b1b      	ldr	r3, [pc, #108]	; (8000730 <MX_ADC1_Init+0x94>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006c6:	4b1a      	ldr	r3, [pc, #104]	; (8000730 <MX_ADC1_Init+0x94>)
 80006c8:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80006cc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006ce:	4b18      	ldr	r3, [pc, #96]	; (8000730 <MX_ADC1_Init+0x94>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 80006d4:	4b16      	ldr	r3, [pc, #88]	; (8000730 <MX_ADC1_Init+0x94>)
 80006d6:	2202      	movs	r2, #2
 80006d8:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006da:	4815      	ldr	r0, [pc, #84]	; (8000730 <MX_ADC1_Init+0x94>)
 80006dc:	f000 ff16 	bl	800150c <HAL_ADC_Init>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80006e6:	f000 fb1f 	bl	8000d28 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006ea:	2301      	movs	r3, #1
 80006ec:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006ee:	2301      	movs	r3, #1
 80006f0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 80006f2:	2306      	movs	r3, #6
 80006f4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006f6:	1d3b      	adds	r3, r7, #4
 80006f8:	4619      	mov	r1, r3
 80006fa:	480d      	ldr	r0, [pc, #52]	; (8000730 <MX_ADC1_Init+0x94>)
 80006fc:	f001 f9e0 	bl	8001ac0 <HAL_ADC_ConfigChannel>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000706:	f000 fb0f 	bl	8000d28 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800070a:	2302      	movs	r3, #2
 800070c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800070e:	2302      	movs	r3, #2
 8000710:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000712:	1d3b      	adds	r3, r7, #4
 8000714:	4619      	mov	r1, r3
 8000716:	4806      	ldr	r0, [pc, #24]	; (8000730 <MX_ADC1_Init+0x94>)
 8000718:	f001 f9d2 	bl	8001ac0 <HAL_ADC_ConfigChannel>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000722:	f000 fb01 	bl	8000d28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000726:	bf00      	nop
 8000728:	3710      	adds	r7, #16
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	200002c8 	.word	0x200002c8
 8000734:	40012400 	.word	0x40012400

08000738 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b08e      	sub	sp, #56	; 0x38
 800073c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800073e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
 8000746:	605a      	str	r2, [r3, #4]
 8000748:	609a      	str	r2, [r3, #8]
 800074a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800074c:	f107 0320 	add.w	r3, r7, #32
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	605a      	str	r2, [r3, #4]
 800075e:	609a      	str	r2, [r3, #8]
 8000760:	60da      	str	r2, [r3, #12]
 8000762:	611a      	str	r2, [r3, #16]
 8000764:	615a      	str	r2, [r3, #20]
 8000766:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000768:	4b37      	ldr	r3, [pc, #220]	; (8000848 <MX_TIM3_Init+0x110>)
 800076a:	4a38      	ldr	r2, [pc, #224]	; (800084c <MX_TIM3_Init+0x114>)
 800076c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 28-1;
 800076e:	4b36      	ldr	r3, [pc, #216]	; (8000848 <MX_TIM3_Init+0x110>)
 8000770:	221b      	movs	r2, #27
 8000772:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000774:	4b34      	ldr	r3, [pc, #208]	; (8000848 <MX_TIM3_Init+0x110>)
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 800077a:	4b33      	ldr	r3, [pc, #204]	; (8000848 <MX_TIM3_Init+0x110>)
 800077c:	2263      	movs	r2, #99	; 0x63
 800077e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000780:	4b31      	ldr	r3, [pc, #196]	; (8000848 <MX_TIM3_Init+0x110>)
 8000782:	2200      	movs	r2, #0
 8000784:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000786:	4b30      	ldr	r3, [pc, #192]	; (8000848 <MX_TIM3_Init+0x110>)
 8000788:	2200      	movs	r2, #0
 800078a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800078c:	482e      	ldr	r0, [pc, #184]	; (8000848 <MX_TIM3_Init+0x110>)
 800078e:	f002 ff1b 	bl	80035c8 <HAL_TIM_Base_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000798:	f000 fac6 	bl	8000d28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800079c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007a0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80007a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007a6:	4619      	mov	r1, r3
 80007a8:	4827      	ldr	r0, [pc, #156]	; (8000848 <MX_TIM3_Init+0x110>)
 80007aa:	f003 f98f 	bl	8003acc <HAL_TIM_ConfigClockSource>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80007b4:	f000 fab8 	bl	8000d28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80007b8:	4823      	ldr	r0, [pc, #140]	; (8000848 <MX_TIM3_Init+0x110>)
 80007ba:	f002 ff53 	bl	8003664 <HAL_TIM_PWM_Init>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80007c4:	f000 fab0 	bl	8000d28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007c8:	2300      	movs	r3, #0
 80007ca:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007cc:	2300      	movs	r3, #0
 80007ce:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007d0:	f107 0320 	add.w	r3, r7, #32
 80007d4:	4619      	mov	r1, r3
 80007d6:	481c      	ldr	r0, [pc, #112]	; (8000848 <MX_TIM3_Init+0x110>)
 80007d8:	f003 fcf8 	bl	80041cc <HAL_TIMEx_MasterConfigSynchronization>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 80007e2:	f000 faa1 	bl	8000d28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007e6:	2360      	movs	r3, #96	; 0x60
 80007e8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80007ea:	2300      	movs	r3, #0
 80007ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007ee:	2300      	movs	r3, #0
 80007f0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007f2:	2300      	movs	r3, #0
 80007f4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007f6:	1d3b      	adds	r3, r7, #4
 80007f8:	2204      	movs	r2, #4
 80007fa:	4619      	mov	r1, r3
 80007fc:	4812      	ldr	r0, [pc, #72]	; (8000848 <MX_TIM3_Init+0x110>)
 80007fe:	f003 f89f 	bl	8003940 <HAL_TIM_PWM_ConfigChannel>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8000808:	f000 fa8e 	bl	8000d28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800080c:	1d3b      	adds	r3, r7, #4
 800080e:	2208      	movs	r2, #8
 8000810:	4619      	mov	r1, r3
 8000812:	480d      	ldr	r0, [pc, #52]	; (8000848 <MX_TIM3_Init+0x110>)
 8000814:	f003 f894 	bl	8003940 <HAL_TIM_PWM_ConfigChannel>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 800081e:	f000 fa83 	bl	8000d28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000822:	1d3b      	adds	r3, r7, #4
 8000824:	220c      	movs	r2, #12
 8000826:	4619      	mov	r1, r3
 8000828:	4807      	ldr	r0, [pc, #28]	; (8000848 <MX_TIM3_Init+0x110>)
 800082a:	f003 f889 	bl	8003940 <HAL_TIM_PWM_ConfigChannel>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_TIM3_Init+0x100>
  {
    Error_Handler();
 8000834:	f000 fa78 	bl	8000d28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000838:	4803      	ldr	r0, [pc, #12]	; (8000848 <MX_TIM3_Init+0x110>)
 800083a:	f000 fb43 	bl	8000ec4 <HAL_TIM_MspPostInit>

}
 800083e:	bf00      	nop
 8000840:	3738      	adds	r7, #56	; 0x38
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	20000244 	.word	0x20000244
 800084c:	40000400 	.word	0x40000400

08000850 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000854:	4b11      	ldr	r3, [pc, #68]	; (800089c <MX_USART1_UART_Init+0x4c>)
 8000856:	4a12      	ldr	r2, [pc, #72]	; (80008a0 <MX_USART1_UART_Init+0x50>)
 8000858:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800085a:	4b10      	ldr	r3, [pc, #64]	; (800089c <MX_USART1_UART_Init+0x4c>)
 800085c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000860:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000862:	4b0e      	ldr	r3, [pc, #56]	; (800089c <MX_USART1_UART_Init+0x4c>)
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000868:	4b0c      	ldr	r3, [pc, #48]	; (800089c <MX_USART1_UART_Init+0x4c>)
 800086a:	2200      	movs	r2, #0
 800086c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800086e:	4b0b      	ldr	r3, [pc, #44]	; (800089c <MX_USART1_UART_Init+0x4c>)
 8000870:	2200      	movs	r2, #0
 8000872:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000874:	4b09      	ldr	r3, [pc, #36]	; (800089c <MX_USART1_UART_Init+0x4c>)
 8000876:	220c      	movs	r2, #12
 8000878:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800087a:	4b08      	ldr	r3, [pc, #32]	; (800089c <MX_USART1_UART_Init+0x4c>)
 800087c:	2200      	movs	r2, #0
 800087e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000880:	4b06      	ldr	r3, [pc, #24]	; (800089c <MX_USART1_UART_Init+0x4c>)
 8000882:	2200      	movs	r2, #0
 8000884:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000886:	4805      	ldr	r0, [pc, #20]	; (800089c <MX_USART1_UART_Init+0x4c>)
 8000888:	f003 fcf6 	bl	8004278 <HAL_UART_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000892:	f000 fa49 	bl	8000d28 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	2000033c 	.word	0x2000033c
 80008a0:	40013800 	.word	0x40013800

080008a4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008a8:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <MX_USART3_UART_Init+0x4c>)
 80008aa:	4a12      	ldr	r2, [pc, #72]	; (80008f4 <MX_USART3_UART_Init+0x50>)
 80008ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008ae:	4b10      	ldr	r3, [pc, #64]	; (80008f0 <MX_USART3_UART_Init+0x4c>)
 80008b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008b6:	4b0e      	ldr	r3, [pc, #56]	; (80008f0 <MX_USART3_UART_Init+0x4c>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008bc:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <MX_USART3_UART_Init+0x4c>)
 80008be:	2200      	movs	r2, #0
 80008c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008c2:	4b0b      	ldr	r3, [pc, #44]	; (80008f0 <MX_USART3_UART_Init+0x4c>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008c8:	4b09      	ldr	r3, [pc, #36]	; (80008f0 <MX_USART3_UART_Init+0x4c>)
 80008ca:	220c      	movs	r2, #12
 80008cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ce:	4b08      	ldr	r3, [pc, #32]	; (80008f0 <MX_USART3_UART_Init+0x4c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d4:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <MX_USART3_UART_Init+0x4c>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008da:	4805      	ldr	r0, [pc, #20]	; (80008f0 <MX_USART3_UART_Init+0x4c>)
 80008dc:	f003 fccc 	bl	8004278 <HAL_UART_Init>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80008e6:	f000 fa1f 	bl	8000d28 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	200001c0 	.word	0x200001c0
 80008f4:	40004800 	.word	0x40004800

080008f8 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008fe:	4b1c      	ldr	r3, [pc, #112]	; (8000970 <MX_DMA_Init+0x78>)
 8000900:	695b      	ldr	r3, [r3, #20]
 8000902:	4a1b      	ldr	r2, [pc, #108]	; (8000970 <MX_DMA_Init+0x78>)
 8000904:	f043 0301 	orr.w	r3, r3, #1
 8000908:	6153      	str	r3, [r2, #20]
 800090a:	4b19      	ldr	r3, [pc, #100]	; (8000970 <MX_DMA_Init+0x78>)
 800090c:	695b      	ldr	r3, [r3, #20]
 800090e:	f003 0301 	and.w	r3, r3, #1
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000916:	2200      	movs	r2, #0
 8000918:	2100      	movs	r1, #0
 800091a:	200b      	movs	r0, #11
 800091c:	f001 fc37 	bl	800218e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000920:	200b      	movs	r0, #11
 8000922:	f001 fc50 	bl	80021c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000926:	2200      	movs	r2, #0
 8000928:	2100      	movs	r1, #0
 800092a:	200c      	movs	r0, #12
 800092c:	f001 fc2f 	bl	800218e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000930:	200c      	movs	r0, #12
 8000932:	f001 fc48 	bl	80021c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000936:	2200      	movs	r2, #0
 8000938:	2100      	movs	r1, #0
 800093a:	200d      	movs	r0, #13
 800093c:	f001 fc27 	bl	800218e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000940:	200d      	movs	r0, #13
 8000942:	f001 fc40 	bl	80021c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000946:	2200      	movs	r2, #0
 8000948:	2100      	movs	r1, #0
 800094a:	200e      	movs	r0, #14
 800094c:	f001 fc1f 	bl	800218e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000950:	200e      	movs	r0, #14
 8000952:	f001 fc38 	bl	80021c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000956:	2200      	movs	r2, #0
 8000958:	2100      	movs	r1, #0
 800095a:	200f      	movs	r0, #15
 800095c:	f001 fc17 	bl	800218e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000960:	200f      	movs	r0, #15
 8000962:	f001 fc30 	bl	80021c6 <HAL_NVIC_EnableIRQ>

}
 8000966:	bf00      	nop
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40021000 	.word	0x40021000

08000974 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b088      	sub	sp, #32
 8000978:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097a:	f107 0310 	add.w	r3, r7, #16
 800097e:	2200      	movs	r2, #0
 8000980:	601a      	str	r2, [r3, #0]
 8000982:	605a      	str	r2, [r3, #4]
 8000984:	609a      	str	r2, [r3, #8]
 8000986:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000988:	4b2b      	ldr	r3, [pc, #172]	; (8000a38 <MX_GPIO_Init+0xc4>)
 800098a:	699b      	ldr	r3, [r3, #24]
 800098c:	4a2a      	ldr	r2, [pc, #168]	; (8000a38 <MX_GPIO_Init+0xc4>)
 800098e:	f043 0320 	orr.w	r3, r3, #32
 8000992:	6193      	str	r3, [r2, #24]
 8000994:	4b28      	ldr	r3, [pc, #160]	; (8000a38 <MX_GPIO_Init+0xc4>)
 8000996:	699b      	ldr	r3, [r3, #24]
 8000998:	f003 0320 	and.w	r3, r3, #32
 800099c:	60fb      	str	r3, [r7, #12]
 800099e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a0:	4b25      	ldr	r3, [pc, #148]	; (8000a38 <MX_GPIO_Init+0xc4>)
 80009a2:	699b      	ldr	r3, [r3, #24]
 80009a4:	4a24      	ldr	r2, [pc, #144]	; (8000a38 <MX_GPIO_Init+0xc4>)
 80009a6:	f043 0304 	orr.w	r3, r3, #4
 80009aa:	6193      	str	r3, [r2, #24]
 80009ac:	4b22      	ldr	r3, [pc, #136]	; (8000a38 <MX_GPIO_Init+0xc4>)
 80009ae:	699b      	ldr	r3, [r3, #24]
 80009b0:	f003 0304 	and.w	r3, r3, #4
 80009b4:	60bb      	str	r3, [r7, #8]
 80009b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b8:	4b1f      	ldr	r3, [pc, #124]	; (8000a38 <MX_GPIO_Init+0xc4>)
 80009ba:	699b      	ldr	r3, [r3, #24]
 80009bc:	4a1e      	ldr	r2, [pc, #120]	; (8000a38 <MX_GPIO_Init+0xc4>)
 80009be:	f043 0308 	orr.w	r3, r3, #8
 80009c2:	6193      	str	r3, [r2, #24]
 80009c4:	4b1c      	ldr	r3, [pc, #112]	; (8000a38 <MX_GPIO_Init+0xc4>)
 80009c6:	699b      	ldr	r3, [r3, #24]
 80009c8:	f003 0308 	and.w	r3, r3, #8
 80009cc:	607b      	str	r3, [r7, #4]
 80009ce:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80009d0:	2200      	movs	r2, #0
 80009d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009d6:	4819      	ldr	r0, [pc, #100]	; (8000a3c <MX_GPIO_Init+0xc8>)
 80009d8:	f002 f81f 	bl	8002a1a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_SET);
 80009dc:	2201      	movs	r2, #1
 80009de:	2118      	movs	r1, #24
 80009e0:	4816      	ldr	r0, [pc, #88]	; (8000a3c <MX_GPIO_Init+0xc8>)
 80009e2:	f002 f81a 	bl	8002a1a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB13 PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_4;
 80009e6:	f242 0318 	movw	r3, #8216	; 0x2018
 80009ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ec:	2301      	movs	r3, #1
 80009ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f4:	2302      	movs	r3, #2
 80009f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f8:	f107 0310 	add.w	r3, r7, #16
 80009fc:	4619      	mov	r1, r3
 80009fe:	480f      	ldr	r0, [pc, #60]	; (8000a3c <MX_GPIO_Init+0xc8>)
 8000a00:	f001 fe9a 	bl	8002738 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000a04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a0a:	4b0d      	ldr	r3, [pc, #52]	; (8000a40 <MX_GPIO_Init+0xcc>)
 8000a0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a12:	f107 0310 	add.w	r3, r7, #16
 8000a16:	4619      	mov	r1, r3
 8000a18:	4808      	ldr	r0, [pc, #32]	; (8000a3c <MX_GPIO_Init+0xc8>)
 8000a1a:	f001 fe8d 	bl	8002738 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2101      	movs	r1, #1
 8000a22:	2028      	movs	r0, #40	; 0x28
 8000a24:	f001 fbb3 	bl	800218e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a28:	2028      	movs	r0, #40	; 0x28
 8000a2a:	f001 fbcc 	bl	80021c6 <HAL_NVIC_EnableIRQ>

}
 8000a2e:	bf00      	nop
 8000a30:	3720      	adds	r7, #32
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40021000 	.word	0x40021000
 8000a3c:	40010c00 	.word	0x40010c00
 8000a40:	10110000 	.word	0x10110000

08000a44 <sensor_light>:

/* USER CODE BEGIN 4 */

// 光线传感器的值归一化到0-511
uint8_t sensor_light(uint32_t x){
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
	return (uint8_t)(x*511/4095);
 8000a4c:	687a      	ldr	r2, [r7, #4]
 8000a4e:	4613      	mov	r3, r2
 8000a50:	025b      	lsls	r3, r3, #9
 8000a52:	1a9a      	subs	r2, r3, r2
 8000a54:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <sensor_light+0x2c>)
 8000a56:	fba3 1302 	umull	r1, r3, r3, r2
 8000a5a:	1ad2      	subs	r2, r2, r3
 8000a5c:	0852      	lsrs	r2, r2, #1
 8000a5e:	4413      	add	r3, r2
 8000a60:	0adb      	lsrs	r3, r3, #11
 8000a62:	b2db      	uxtb	r3, r3
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	370c      	adds	r7, #12
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bc80      	pop	{r7}
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	00100101 	.word	0x00100101

08000a74 <sensor_voice>:

// 声音传感器的值归一化到0-511
uint8_t sensor_voice(uint32_t x){
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
	return (uint8_t)(x*511/2095);
 8000a7c:	687a      	ldr	r2, [r7, #4]
 8000a7e:	4613      	mov	r3, r2
 8000a80:	025b      	lsls	r3, r3, #9
 8000a82:	1a9b      	subs	r3, r3, r2
 8000a84:	4a04      	ldr	r2, [pc, #16]	; (8000a98 <sensor_voice+0x24>)
 8000a86:	fba2 2303 	umull	r2, r3, r2, r3
 8000a8a:	0a9b      	lsrs	r3, r3, #10
 8000a8c:	b2db      	uxtb	r3, r3
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	370c      	adds	r7, #12
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bc80      	pop	{r7}
 8000a96:	4770      	bx	lr
 8000a98:	7d20dee3 	.word	0x7d20dee3

08000a9c <voice_second_per_max>:

// 返回1/100秒内声音的最大值
uint8_t voice_second_per_max(){
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
	uint8_t vm = 0;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	71fb      	strb	r3, [r7, #7]
	for(int i=0; i<VOICE_BUF_PER_SIZE; i++){
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	603b      	str	r3, [r7, #0]
 8000aaa:	e00e      	b.n	8000aca <voice_second_per_max+0x2e>
		if(voice_s_p[i] > vm){
 8000aac:	4a0b      	ldr	r2, [pc, #44]	; (8000adc <voice_second_per_max+0x40>)
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	4413      	add	r3, r2
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	79fa      	ldrb	r2, [r7, #7]
 8000ab6:	429a      	cmp	r2, r3
 8000ab8:	d204      	bcs.n	8000ac4 <voice_second_per_max+0x28>
			vm = voice_s_p[i];
 8000aba:	4a08      	ldr	r2, [pc, #32]	; (8000adc <voice_second_per_max+0x40>)
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	4413      	add	r3, r2
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	71fb      	strb	r3, [r7, #7]
	for(int i=0; i<VOICE_BUF_PER_SIZE; i++){
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	603b      	str	r3, [r7, #0]
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	2b63      	cmp	r3, #99	; 0x63
 8000ace:	dded      	ble.n	8000aac <voice_second_per_max+0x10>
		}
	}
	return vm;
 8000ad0:	79fb      	ldrb	r3, [r7, #7]
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	370c      	adds	r7, #12
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bc80      	pop	{r7}
 8000ada:	4770      	bx	lr
 8000adc:	20000100 	.word	0x20000100

08000ae0 <voice_second_max>:

// 返回1秒内声音的最大值
uint8_t voice_second_max(){
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
	uint8_t vm = 0;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	71fb      	strb	r3, [r7, #7]
	for(int i=0; i<VOICE_BUF_SIZE; i++){
 8000aea:	2300      	movs	r3, #0
 8000aec:	603b      	str	r3, [r7, #0]
 8000aee:	e00e      	b.n	8000b0e <voice_second_max+0x2e>
		if(voice_s[i] > vm){
 8000af0:	4a0b      	ldr	r2, [pc, #44]	; (8000b20 <voice_second_max+0x40>)
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	4413      	add	r3, r2
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	79fa      	ldrb	r2, [r7, #7]
 8000afa:	429a      	cmp	r2, r3
 8000afc:	d204      	bcs.n	8000b08 <voice_second_max+0x28>
			vm = voice_s[i];
 8000afe:	4a08      	ldr	r2, [pc, #32]	; (8000b20 <voice_second_max+0x40>)
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	4413      	add	r3, r2
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	71fb      	strb	r3, [r7, #7]
	for(int i=0; i<VOICE_BUF_SIZE; i++){
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	603b      	str	r3, [r7, #0]
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	2b63      	cmp	r3, #99	; 0x63
 8000b12:	dded      	ble.n	8000af0 <voice_second_max+0x10>
		}
	}
	return vm;
 8000b14:	79fb      	ldrb	r3, [r7, #7]
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bc80      	pop	{r7}
 8000b1e:	4770      	bx	lr
 8000b20:	2000009c 	.word	0x2000009c

08000b24 <HAL_GPIO_EXTI_Callback>:

// 触摸开关控制灯的亮灭
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_15){
 8000b2e:	88fb      	ldrh	r3, [r7, #6]
 8000b30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000b34:	d104      	bne.n	8000b40 <HAL_GPIO_EXTI_Callback+0x1c>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8000b36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b3a:	4803      	ldr	r0, [pc, #12]	; (8000b48 <HAL_GPIO_EXTI_Callback+0x24>)
 8000b3c:	f001 ff85 	bl	8002a4a <HAL_GPIO_TogglePin>
	}
}
 8000b40:	bf00      	nop
 8000b42:	3708      	adds	r7, #8
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	40010c00 	.word	0x40010c00

08000b4c <HAL_TIM_PeriodElapsedCallback>:

// TIM3定时器中断,100us一次
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
	  // 执行ADC自动自校准
	  if(HAL_OK != HAL_ADCEx_Calibration_Start(&hadc1))
 8000b54:	4821      	ldr	r0, [pc, #132]	; (8000bdc <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000b56:	f001 f99d 	bl	8001e94 <HAL_ADCEx_Calibration_Start>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <HAL_TIM_PeriodElapsedCallback+0x18>
		  Error_Handler();
 8000b60:	f000 f8e2 	bl	8000d28 <Error_Handler>
	  //开启ADC
	  if(HAL_OK != HAL_ADC_Start_DMA(&hadc1, adc_buf, 2))
 8000b64:	2202      	movs	r2, #2
 8000b66:	491e      	ldr	r1, [pc, #120]	; (8000be0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000b68:	481c      	ldr	r0, [pc, #112]	; (8000bdc <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000b6a:	f000 fda7 	bl	80016bc <HAL_ADC_Start_DMA>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <HAL_TIM_PeriodElapsedCallback+0x2c>
		  Error_Handler();
 8000b74:	f000 f8d8 	bl	8000d28 <Error_Handler>

	  // 声光控实现
	  if(state[2] == 'a'){
 8000b78:	4b1a      	ldr	r3, [pc, #104]	; (8000be4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000b7a:	789b      	ldrb	r3, [r3, #2]
 8000b7c:	2b61      	cmp	r3, #97	; 0x61
 8000b7e:	d128      	bne.n	8000bd2 <HAL_TIM_PeriodElapsedCallback+0x86>
		  if(voice_light_on == 0){
 8000b80:	4b19      	ldr	r3, [pc, #100]	; (8000be8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d111      	bne.n	8000bac <HAL_TIM_PeriodElapsedCallback+0x60>
			  if((light_current < 20) && (voice_current > 200)){
 8000b88:	4b18      	ldr	r3, [pc, #96]	; (8000bec <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	2b13      	cmp	r3, #19
 8000b8e:	d813      	bhi.n	8000bb8 <HAL_TIM_PeriodElapsedCallback+0x6c>
 8000b90:	4b17      	ldr	r3, [pc, #92]	; (8000bf0 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	2bc8      	cmp	r3, #200	; 0xc8
 8000b96:	d90f      	bls.n	8000bb8 <HAL_TIM_PeriodElapsedCallback+0x6c>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8000b98:	2201      	movs	r2, #1
 8000b9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b9e:	4815      	ldr	r0, [pc, #84]	; (8000bf4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000ba0:	f001 ff3b 	bl	8002a1a <HAL_GPIO_WritePin>
				  voice_light_on = 1;
 8000ba4:	4b10      	ldr	r3, [pc, #64]	; (8000be8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	701a      	strb	r2, [r3, #0]
 8000baa:	e005      	b.n	8000bb8 <HAL_TIM_PeriodElapsedCallback+0x6c>
			  }
		  }else{
			  voice_light_count++;
 8000bac:	4b12      	ldr	r3, [pc, #72]	; (8000bf8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000bae:	881b      	ldrh	r3, [r3, #0]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	b29a      	uxth	r2, r3
 8000bb4:	4b10      	ldr	r3, [pc, #64]	; (8000bf8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000bb6:	801a      	strh	r2, [r3, #0]
		  }
		  if(voice_light_count >= 200){
 8000bb8:	4b0f      	ldr	r3, [pc, #60]	; (8000bf8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000bba:	881b      	ldrh	r3, [r3, #0]
 8000bbc:	2bc7      	cmp	r3, #199	; 0xc7
 8000bbe:	d908      	bls.n	8000bd2 <HAL_TIM_PeriodElapsedCallback+0x86>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bc6:	480b      	ldr	r0, [pc, #44]	; (8000bf4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000bc8:	f001 ff27 	bl	8002a1a <HAL_GPIO_WritePin>
			  voice_light_on = 0;
 8000bcc:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	701a      	strb	r2, [r3, #0]
		  }
	  }
}
 8000bd2:	bf00      	nop
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	200002c8 	.word	0x200002c8
 8000be0:	200003cc 	.word	0x200003cc
 8000be4:	20000000 	.word	0x20000000
 8000be8:	20000098 	.word	0x20000098
 8000bec:	2000016c 	.word	0x2000016c
 8000bf0:	2000016d 	.word	0x2000016d
 8000bf4:	40010c00 	.word	0x40010c00
 8000bf8:	20000096 	.word	0x20000096

08000bfc <HAL_ADC_ConvCpltCallback>:

// ADC转换完成后回调函数
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000bfc:	b590      	push	{r4, r7, lr}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
	if(HAL_OK != HAL_ADC_Stop_DMA(&hadc1))
 8000c04:	4830      	ldr	r0, [pc, #192]	; (8000cc8 <HAL_ADC_ConvCpltCallback+0xcc>)
 8000c06:	f000 fe37 	bl	8001878 <HAL_ADC_Stop_DMA>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <HAL_ADC_ConvCpltCallback+0x18>
		Error_Handler();
 8000c10:	f000 f88a 	bl	8000d28 <Error_Handler>
	light_current = sensor_light(adc_buf[0]);
 8000c14:	4b2d      	ldr	r3, [pc, #180]	; (8000ccc <HAL_ADC_ConvCpltCallback+0xd0>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff ff13 	bl	8000a44 <sensor_light>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	461a      	mov	r2, r3
 8000c22:	4b2b      	ldr	r3, [pc, #172]	; (8000cd0 <HAL_ADC_ConvCpltCallback+0xd4>)
 8000c24:	701a      	strb	r2, [r3, #0]
	voice_current = sensor_voice(adc_buf[1]);
 8000c26:	4b29      	ldr	r3, [pc, #164]	; (8000ccc <HAL_ADC_ConvCpltCallback+0xd0>)
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f7ff ff22 	bl	8000a74 <sensor_voice>
 8000c30:	4603      	mov	r3, r0
 8000c32:	461a      	mov	r2, r3
 8000c34:	4b27      	ldr	r3, [pc, #156]	; (8000cd4 <HAL_ADC_ConvCpltCallback+0xd8>)
 8000c36:	701a      	strb	r2, [r3, #0]

	// 循环填充声音信号暂存数组
		  if(voice_s_p_idx < VOICE_BUF_PER_SIZE){
 8000c38:	4b27      	ldr	r3, [pc, #156]	; (8000cd8 <HAL_ADC_ConvCpltCallback+0xdc>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	2b63      	cmp	r3, #99	; 0x63
 8000c3e:	d80d      	bhi.n	8000c5c <HAL_ADC_ConvCpltCallback+0x60>
			  voice_s_p[voice_s_p_idx] = voice_current;
 8000c40:	4b25      	ldr	r3, [pc, #148]	; (8000cd8 <HAL_ADC_ConvCpltCallback+0xdc>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	461a      	mov	r2, r3
 8000c46:	4b23      	ldr	r3, [pc, #140]	; (8000cd4 <HAL_ADC_ConvCpltCallback+0xd8>)
 8000c48:	7819      	ldrb	r1, [r3, #0]
 8000c4a:	4b24      	ldr	r3, [pc, #144]	; (8000cdc <HAL_ADC_ConvCpltCallback+0xe0>)
 8000c4c:	5499      	strb	r1, [r3, r2]
			  voice_s_p_idx++;
 8000c4e:	4b22      	ldr	r3, [pc, #136]	; (8000cd8 <HAL_ADC_ConvCpltCallback+0xdc>)
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	3301      	adds	r3, #1
 8000c54:	b2da      	uxtb	r2, r3
 8000c56:	4b20      	ldr	r3, [pc, #128]	; (8000cd8 <HAL_ADC_ConvCpltCallback+0xdc>)
 8000c58:	701a      	strb	r2, [r3, #0]
					  voice_t_idx = 0;
					  // sendToLogByDMA("3s!- %d - %d - %d\n", voice_t[0], voice_t[1], voice_t[2]);
				  }
			  }
		  }
}
 8000c5a:	e030      	b.n	8000cbe <HAL_ADC_ConvCpltCallback+0xc2>
			  voice_s_p_idx = 0;
 8000c5c:	4b1e      	ldr	r3, [pc, #120]	; (8000cd8 <HAL_ADC_ConvCpltCallback+0xdc>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	701a      	strb	r2, [r3, #0]
			  if(voice_s_idx < VOICE_BUF_SIZE){
 8000c62:	4b1f      	ldr	r3, [pc, #124]	; (8000ce0 <HAL_ADC_ConvCpltCallback+0xe4>)
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	2b63      	cmp	r3, #99	; 0x63
 8000c68:	d80f      	bhi.n	8000c8a <HAL_ADC_ConvCpltCallback+0x8e>
				  voice_s[voice_s_idx] = voice_second_per_max();
 8000c6a:	4b1d      	ldr	r3, [pc, #116]	; (8000ce0 <HAL_ADC_ConvCpltCallback+0xe4>)
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	461c      	mov	r4, r3
 8000c70:	f7ff ff14 	bl	8000a9c <voice_second_per_max>
 8000c74:	4603      	mov	r3, r0
 8000c76:	461a      	mov	r2, r3
 8000c78:	4b1a      	ldr	r3, [pc, #104]	; (8000ce4 <HAL_ADC_ConvCpltCallback+0xe8>)
 8000c7a:	551a      	strb	r2, [r3, r4]
				  voice_s_idx++;
 8000c7c:	4b18      	ldr	r3, [pc, #96]	; (8000ce0 <HAL_ADC_ConvCpltCallback+0xe4>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	3301      	adds	r3, #1
 8000c82:	b2da      	uxtb	r2, r3
 8000c84:	4b16      	ldr	r3, [pc, #88]	; (8000ce0 <HAL_ADC_ConvCpltCallback+0xe4>)
 8000c86:	701a      	strb	r2, [r3, #0]
}
 8000c88:	e019      	b.n	8000cbe <HAL_ADC_ConvCpltCallback+0xc2>
				  voice_s_idx = 0;
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <HAL_ADC_ConvCpltCallback+0xe4>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	701a      	strb	r2, [r3, #0]
				  if(voice_t_idx < VOICE_STORE_N){
 8000c90:	4b15      	ldr	r3, [pc, #84]	; (8000ce8 <HAL_ADC_ConvCpltCallback+0xec>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	2b02      	cmp	r3, #2
 8000c96:	d80f      	bhi.n	8000cb8 <HAL_ADC_ConvCpltCallback+0xbc>
					  voice_t[voice_t_idx] = voice_second_max();
 8000c98:	4b13      	ldr	r3, [pc, #76]	; (8000ce8 <HAL_ADC_ConvCpltCallback+0xec>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	461c      	mov	r4, r3
 8000c9e:	f7ff ff1f 	bl	8000ae0 <voice_second_max>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	4b11      	ldr	r3, [pc, #68]	; (8000cec <HAL_ADC_ConvCpltCallback+0xf0>)
 8000ca8:	551a      	strb	r2, [r3, r4]
					  voice_t_idx++;
 8000caa:	4b0f      	ldr	r3, [pc, #60]	; (8000ce8 <HAL_ADC_ConvCpltCallback+0xec>)
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	3301      	adds	r3, #1
 8000cb0:	b2da      	uxtb	r2, r3
 8000cb2:	4b0d      	ldr	r3, [pc, #52]	; (8000ce8 <HAL_ADC_ConvCpltCallback+0xec>)
 8000cb4:	701a      	strb	r2, [r3, #0]
}
 8000cb6:	e002      	b.n	8000cbe <HAL_ADC_ConvCpltCallback+0xc2>
					  voice_t_idx = 0;
 8000cb8:	4b0b      	ldr	r3, [pc, #44]	; (8000ce8 <HAL_ADC_ConvCpltCallback+0xec>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	701a      	strb	r2, [r3, #0]
}
 8000cbe:	bf00      	nop
 8000cc0:	370c      	adds	r7, #12
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd90      	pop	{r4, r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	200002c8 	.word	0x200002c8
 8000ccc:	200003cc 	.word	0x200003cc
 8000cd0:	2000016c 	.word	0x2000016c
 8000cd4:	2000016d 	.word	0x2000016d
 8000cd8:	20000165 	.word	0x20000165
 8000cdc:	20000100 	.word	0x20000100
 8000ce0:	20000164 	.word	0x20000164
 8000ce4:	2000009c 	.word	0x2000009c
 8000ce8:	2000016b 	.word	0x2000016b
 8000cec:	20000168 	.word	0x20000168

08000cf0 <HAL_UART_RxCpltCallback>:

// 串口1收到数据的回调函数
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1){
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a07      	ldr	r2, [pc, #28]	; (8000d1c <HAL_UART_RxCpltCallback+0x2c>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d107      	bne.n	8000d12 <HAL_UART_RxCpltCallback+0x22>
		// 若接收方为自己则接收
		if(ZB_rec_buf[0] == DEVICE_ADDRESS){
 8000d02:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <HAL_UART_RxCpltCallback+0x30>)
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	2262      	movs	r2, #98	; 0x62
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d102      	bne.n	8000d12 <HAL_UART_RxCpltCallback+0x22>
			is_ZB_rec = 1;
 8000d0c:	4b05      	ldr	r3, [pc, #20]	; (8000d24 <HAL_UART_RxCpltCallback+0x34>)
 8000d0e:	2201      	movs	r2, #1
 8000d10:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000d12:	bf00      	nop
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bc80      	pop	{r7}
 8000d1a:	4770      	bx	lr
 8000d1c:	40013800 	.word	0x40013800
 8000d20:	20000454 	.word	0x20000454
 8000d24:	20000099 	.word	0x20000099

08000d28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bc80      	pop	{r7}
 8000d32:	4770      	bx	lr

08000d34 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d3a:	4b15      	ldr	r3, [pc, #84]	; (8000d90 <HAL_MspInit+0x5c>)
 8000d3c:	699b      	ldr	r3, [r3, #24]
 8000d3e:	4a14      	ldr	r2, [pc, #80]	; (8000d90 <HAL_MspInit+0x5c>)
 8000d40:	f043 0301 	orr.w	r3, r3, #1
 8000d44:	6193      	str	r3, [r2, #24]
 8000d46:	4b12      	ldr	r3, [pc, #72]	; (8000d90 <HAL_MspInit+0x5c>)
 8000d48:	699b      	ldr	r3, [r3, #24]
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	60bb      	str	r3, [r7, #8]
 8000d50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d52:	4b0f      	ldr	r3, [pc, #60]	; (8000d90 <HAL_MspInit+0x5c>)
 8000d54:	69db      	ldr	r3, [r3, #28]
 8000d56:	4a0e      	ldr	r2, [pc, #56]	; (8000d90 <HAL_MspInit+0x5c>)
 8000d58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d5c:	61d3      	str	r3, [r2, #28]
 8000d5e:	4b0c      	ldr	r3, [pc, #48]	; (8000d90 <HAL_MspInit+0x5c>)
 8000d60:	69db      	ldr	r3, [r3, #28]
 8000d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d66:	607b      	str	r3, [r7, #4]
 8000d68:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d6a:	4b0a      	ldr	r3, [pc, #40]	; (8000d94 <HAL_MspInit+0x60>)
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	4a04      	ldr	r2, [pc, #16]	; (8000d94 <HAL_MspInit+0x60>)
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d86:	bf00      	nop
 8000d88:	3714      	adds	r7, #20
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bc80      	pop	{r7}
 8000d8e:	4770      	bx	lr
 8000d90:	40021000 	.word	0x40021000
 8000d94:	40010000 	.word	0x40010000

08000d98 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b088      	sub	sp, #32
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da0:	f107 0310 	add.w	r3, r7, #16
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a2c      	ldr	r2, [pc, #176]	; (8000e64 <HAL_ADC_MspInit+0xcc>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d151      	bne.n	8000e5c <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000db8:	4b2b      	ldr	r3, [pc, #172]	; (8000e68 <HAL_ADC_MspInit+0xd0>)
 8000dba:	699b      	ldr	r3, [r3, #24]
 8000dbc:	4a2a      	ldr	r2, [pc, #168]	; (8000e68 <HAL_ADC_MspInit+0xd0>)
 8000dbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dc2:	6193      	str	r3, [r2, #24]
 8000dc4:	4b28      	ldr	r3, [pc, #160]	; (8000e68 <HAL_ADC_MspInit+0xd0>)
 8000dc6:	699b      	ldr	r3, [r3, #24]
 8000dc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000dcc:	60fb      	str	r3, [r7, #12]
 8000dce:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd0:	4b25      	ldr	r3, [pc, #148]	; (8000e68 <HAL_ADC_MspInit+0xd0>)
 8000dd2:	699b      	ldr	r3, [r3, #24]
 8000dd4:	4a24      	ldr	r2, [pc, #144]	; (8000e68 <HAL_ADC_MspInit+0xd0>)
 8000dd6:	f043 0304 	orr.w	r3, r3, #4
 8000dda:	6193      	str	r3, [r2, #24]
 8000ddc:	4b22      	ldr	r3, [pc, #136]	; (8000e68 <HAL_ADC_MspInit+0xd0>)
 8000dde:	699b      	ldr	r3, [r3, #24]
 8000de0:	f003 0304 	and.w	r3, r3, #4
 8000de4:	60bb      	str	r3, [r7, #8]
 8000de6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000de8:	2306      	movs	r3, #6
 8000dea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dec:	2303      	movs	r3, #3
 8000dee:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df0:	f107 0310 	add.w	r3, r7, #16
 8000df4:	4619      	mov	r1, r3
 8000df6:	481d      	ldr	r0, [pc, #116]	; (8000e6c <HAL_ADC_MspInit+0xd4>)
 8000df8:	f001 fc9e 	bl	8002738 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000dfc:	4b1c      	ldr	r3, [pc, #112]	; (8000e70 <HAL_ADC_MspInit+0xd8>)
 8000dfe:	4a1d      	ldr	r2, [pc, #116]	; (8000e74 <HAL_ADC_MspInit+0xdc>)
 8000e00:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e02:	4b1b      	ldr	r3, [pc, #108]	; (8000e70 <HAL_ADC_MspInit+0xd8>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e08:	4b19      	ldr	r3, [pc, #100]	; (8000e70 <HAL_ADC_MspInit+0xd8>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e0e:	4b18      	ldr	r3, [pc, #96]	; (8000e70 <HAL_ADC_MspInit+0xd8>)
 8000e10:	2280      	movs	r2, #128	; 0x80
 8000e12:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e14:	4b16      	ldr	r3, [pc, #88]	; (8000e70 <HAL_ADC_MspInit+0xd8>)
 8000e16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e1a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000e1c:	4b14      	ldr	r3, [pc, #80]	; (8000e70 <HAL_ADC_MspInit+0xd8>)
 8000e1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e22:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e24:	4b12      	ldr	r3, [pc, #72]	; (8000e70 <HAL_ADC_MspInit+0xd8>)
 8000e26:	2220      	movs	r2, #32
 8000e28:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e2a:	4b11      	ldr	r3, [pc, #68]	; (8000e70 <HAL_ADC_MspInit+0xd8>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e30:	480f      	ldr	r0, [pc, #60]	; (8000e70 <HAL_ADC_MspInit+0xd8>)
 8000e32:	f001 f9e3 	bl	80021fc <HAL_DMA_Init>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000e3c:	f7ff ff74 	bl	8000d28 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	4a0b      	ldr	r2, [pc, #44]	; (8000e70 <HAL_ADC_MspInit+0xd8>)
 8000e44:	621a      	str	r2, [r3, #32]
 8000e46:	4a0a      	ldr	r2, [pc, #40]	; (8000e70 <HAL_ADC_MspInit+0xd8>)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	2101      	movs	r1, #1
 8000e50:	2012      	movs	r0, #18
 8000e52:	f001 f99c 	bl	800218e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000e56:	2012      	movs	r0, #18
 8000e58:	f001 f9b5 	bl	80021c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e5c:	bf00      	nop
 8000e5e:	3720      	adds	r7, #32
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	40012400 	.word	0x40012400
 8000e68:	40021000 	.word	0x40021000
 8000e6c:	40010800 	.word	0x40010800
 8000e70:	2000037c 	.word	0x2000037c
 8000e74:	40020008 	.word	0x40020008

08000e78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a0d      	ldr	r2, [pc, #52]	; (8000ebc <HAL_TIM_Base_MspInit+0x44>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d113      	bne.n	8000eb2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e8a:	4b0d      	ldr	r3, [pc, #52]	; (8000ec0 <HAL_TIM_Base_MspInit+0x48>)
 8000e8c:	69db      	ldr	r3, [r3, #28]
 8000e8e:	4a0c      	ldr	r2, [pc, #48]	; (8000ec0 <HAL_TIM_Base_MspInit+0x48>)
 8000e90:	f043 0302 	orr.w	r3, r3, #2
 8000e94:	61d3      	str	r3, [r2, #28]
 8000e96:	4b0a      	ldr	r3, [pc, #40]	; (8000ec0 <HAL_TIM_Base_MspInit+0x48>)
 8000e98:	69db      	ldr	r3, [r3, #28]
 8000e9a:	f003 0302 	and.w	r3, r3, #2
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	2101      	movs	r1, #1
 8000ea6:	201d      	movs	r0, #29
 8000ea8:	f001 f971 	bl	800218e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000eac:	201d      	movs	r0, #29
 8000eae:	f001 f98a 	bl	80021c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000eb2:	bf00      	nop
 8000eb4:	3710      	adds	r7, #16
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40000400 	.word	0x40000400
 8000ec0:	40021000 	.word	0x40021000

08000ec4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b088      	sub	sp, #32
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ecc:	f107 0310 	add.w	r3, r7, #16
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a1b      	ldr	r2, [pc, #108]	; (8000f4c <HAL_TIM_MspPostInit+0x88>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d12f      	bne.n	8000f44 <HAL_TIM_MspPostInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee4:	4b1a      	ldr	r3, [pc, #104]	; (8000f50 <HAL_TIM_MspPostInit+0x8c>)
 8000ee6:	699b      	ldr	r3, [r3, #24]
 8000ee8:	4a19      	ldr	r2, [pc, #100]	; (8000f50 <HAL_TIM_MspPostInit+0x8c>)
 8000eea:	f043 0304 	orr.w	r3, r3, #4
 8000eee:	6193      	str	r3, [r2, #24]
 8000ef0:	4b17      	ldr	r3, [pc, #92]	; (8000f50 <HAL_TIM_MspPostInit+0x8c>)
 8000ef2:	699b      	ldr	r3, [r3, #24]
 8000ef4:	f003 0304 	and.w	r3, r3, #4
 8000ef8:	60fb      	str	r3, [r7, #12]
 8000efa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000efc:	4b14      	ldr	r3, [pc, #80]	; (8000f50 <HAL_TIM_MspPostInit+0x8c>)
 8000efe:	699b      	ldr	r3, [r3, #24]
 8000f00:	4a13      	ldr	r2, [pc, #76]	; (8000f50 <HAL_TIM_MspPostInit+0x8c>)
 8000f02:	f043 0308 	orr.w	r3, r3, #8
 8000f06:	6193      	str	r3, [r2, #24]
 8000f08:	4b11      	ldr	r3, [pc, #68]	; (8000f50 <HAL_TIM_MspPostInit+0x8c>)
 8000f0a:	699b      	ldr	r3, [r3, #24]
 8000f0c:	f003 0308 	and.w	r3, r3, #8
 8000f10:	60bb      	str	r3, [r7, #8]
 8000f12:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000f14:	2380      	movs	r3, #128	; 0x80
 8000f16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f20:	f107 0310 	add.w	r3, r7, #16
 8000f24:	4619      	mov	r1, r3
 8000f26:	480b      	ldr	r0, [pc, #44]	; (8000f54 <HAL_TIM_MspPostInit+0x90>)
 8000f28:	f001 fc06 	bl	8002738 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f30:	2302      	movs	r3, #2
 8000f32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f34:	2302      	movs	r3, #2
 8000f36:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f38:	f107 0310 	add.w	r3, r7, #16
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4806      	ldr	r0, [pc, #24]	; (8000f58 <HAL_TIM_MspPostInit+0x94>)
 8000f40:	f001 fbfa 	bl	8002738 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000f44:	bf00      	nop
 8000f46:	3720      	adds	r7, #32
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	40000400 	.word	0x40000400
 8000f50:	40021000 	.word	0x40021000
 8000f54:	40010800 	.word	0x40010800
 8000f58:	40010c00 	.word	0x40010c00

08000f5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b08a      	sub	sp, #40	; 0x28
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f64:	f107 0318 	add.w	r3, r7, #24
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a8d      	ldr	r2, [pc, #564]	; (80011ac <HAL_UART_MspInit+0x250>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	f040 8087 	bne.w	800108c <HAL_UART_MspInit+0x130>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f7e:	4b8c      	ldr	r3, [pc, #560]	; (80011b0 <HAL_UART_MspInit+0x254>)
 8000f80:	699b      	ldr	r3, [r3, #24]
 8000f82:	4a8b      	ldr	r2, [pc, #556]	; (80011b0 <HAL_UART_MspInit+0x254>)
 8000f84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f88:	6193      	str	r3, [r2, #24]
 8000f8a:	4b89      	ldr	r3, [pc, #548]	; (80011b0 <HAL_UART_MspInit+0x254>)
 8000f8c:	699b      	ldr	r3, [r3, #24]
 8000f8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f92:	617b      	str	r3, [r7, #20]
 8000f94:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f96:	4b86      	ldr	r3, [pc, #536]	; (80011b0 <HAL_UART_MspInit+0x254>)
 8000f98:	699b      	ldr	r3, [r3, #24]
 8000f9a:	4a85      	ldr	r2, [pc, #532]	; (80011b0 <HAL_UART_MspInit+0x254>)
 8000f9c:	f043 0304 	orr.w	r3, r3, #4
 8000fa0:	6193      	str	r3, [r2, #24]
 8000fa2:	4b83      	ldr	r3, [pc, #524]	; (80011b0 <HAL_UART_MspInit+0x254>)
 8000fa4:	699b      	ldr	r3, [r3, #24]
 8000fa6:	f003 0304 	and.w	r3, r3, #4
 8000faa:	613b      	str	r3, [r7, #16]
 8000fac:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000fae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fb8:	2303      	movs	r3, #3
 8000fba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fbc:	f107 0318 	add.w	r3, r7, #24
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	487c      	ldr	r0, [pc, #496]	; (80011b4 <HAL_UART_MspInit+0x258>)
 8000fc4:	f001 fbb8 	bl	8002738 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000fc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd6:	f107 0318 	add.w	r3, r7, #24
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4875      	ldr	r0, [pc, #468]	; (80011b4 <HAL_UART_MspInit+0x258>)
 8000fde:	f001 fbab 	bl	8002738 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000fe2:	4b75      	ldr	r3, [pc, #468]	; (80011b8 <HAL_UART_MspInit+0x25c>)
 8000fe4:	4a75      	ldr	r2, [pc, #468]	; (80011bc <HAL_UART_MspInit+0x260>)
 8000fe6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fe8:	4b73      	ldr	r3, [pc, #460]	; (80011b8 <HAL_UART_MspInit+0x25c>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fee:	4b72      	ldr	r3, [pc, #456]	; (80011b8 <HAL_UART_MspInit+0x25c>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ff4:	4b70      	ldr	r3, [pc, #448]	; (80011b8 <HAL_UART_MspInit+0x25c>)
 8000ff6:	2280      	movs	r2, #128	; 0x80
 8000ff8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ffa:	4b6f      	ldr	r3, [pc, #444]	; (80011b8 <HAL_UART_MspInit+0x25c>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001000:	4b6d      	ldr	r3, [pc, #436]	; (80011b8 <HAL_UART_MspInit+0x25c>)
 8001002:	2200      	movs	r2, #0
 8001004:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001006:	4b6c      	ldr	r3, [pc, #432]	; (80011b8 <HAL_UART_MspInit+0x25c>)
 8001008:	2220      	movs	r2, #32
 800100a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800100c:	4b6a      	ldr	r3, [pc, #424]	; (80011b8 <HAL_UART_MspInit+0x25c>)
 800100e:	2200      	movs	r2, #0
 8001010:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001012:	4869      	ldr	r0, [pc, #420]	; (80011b8 <HAL_UART_MspInit+0x25c>)
 8001014:	f001 f8f2 	bl	80021fc <HAL_DMA_Init>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 800101e:	f7ff fe83 	bl	8000d28 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a64      	ldr	r2, [pc, #400]	; (80011b8 <HAL_UART_MspInit+0x25c>)
 8001026:	635a      	str	r2, [r3, #52]	; 0x34
 8001028:	4a63      	ldr	r2, [pc, #396]	; (80011b8 <HAL_UART_MspInit+0x25c>)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800102e:	4b64      	ldr	r3, [pc, #400]	; (80011c0 <HAL_UART_MspInit+0x264>)
 8001030:	4a64      	ldr	r2, [pc, #400]	; (80011c4 <HAL_UART_MspInit+0x268>)
 8001032:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001034:	4b62      	ldr	r3, [pc, #392]	; (80011c0 <HAL_UART_MspInit+0x264>)
 8001036:	2210      	movs	r2, #16
 8001038:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800103a:	4b61      	ldr	r3, [pc, #388]	; (80011c0 <HAL_UART_MspInit+0x264>)
 800103c:	2200      	movs	r2, #0
 800103e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001040:	4b5f      	ldr	r3, [pc, #380]	; (80011c0 <HAL_UART_MspInit+0x264>)
 8001042:	2280      	movs	r2, #128	; 0x80
 8001044:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001046:	4b5e      	ldr	r3, [pc, #376]	; (80011c0 <HAL_UART_MspInit+0x264>)
 8001048:	2200      	movs	r2, #0
 800104a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800104c:	4b5c      	ldr	r3, [pc, #368]	; (80011c0 <HAL_UART_MspInit+0x264>)
 800104e:	2200      	movs	r2, #0
 8001050:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001052:	4b5b      	ldr	r3, [pc, #364]	; (80011c0 <HAL_UART_MspInit+0x264>)
 8001054:	2200      	movs	r2, #0
 8001056:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001058:	4b59      	ldr	r3, [pc, #356]	; (80011c0 <HAL_UART_MspInit+0x264>)
 800105a:	2200      	movs	r2, #0
 800105c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800105e:	4858      	ldr	r0, [pc, #352]	; (80011c0 <HAL_UART_MspInit+0x264>)
 8001060:	f001 f8cc 	bl	80021fc <HAL_DMA_Init>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 800106a:	f7ff fe5d 	bl	8000d28 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a53      	ldr	r2, [pc, #332]	; (80011c0 <HAL_UART_MspInit+0x264>)
 8001072:	631a      	str	r2, [r3, #48]	; 0x30
 8001074:	4a52      	ldr	r2, [pc, #328]	; (80011c0 <HAL_UART_MspInit+0x264>)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800107a:	2200      	movs	r2, #0
 800107c:	2101      	movs	r1, #1
 800107e:	2025      	movs	r0, #37	; 0x25
 8001080:	f001 f885 	bl	800218e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001084:	2025      	movs	r0, #37	; 0x25
 8001086:	f001 f89e 	bl	80021c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800108a:	e08b      	b.n	80011a4 <HAL_UART_MspInit+0x248>
  else if(huart->Instance==USART3)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a4d      	ldr	r2, [pc, #308]	; (80011c8 <HAL_UART_MspInit+0x26c>)
 8001092:	4293      	cmp	r3, r2
 8001094:	f040 8086 	bne.w	80011a4 <HAL_UART_MspInit+0x248>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001098:	4b45      	ldr	r3, [pc, #276]	; (80011b0 <HAL_UART_MspInit+0x254>)
 800109a:	69db      	ldr	r3, [r3, #28]
 800109c:	4a44      	ldr	r2, [pc, #272]	; (80011b0 <HAL_UART_MspInit+0x254>)
 800109e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010a2:	61d3      	str	r3, [r2, #28]
 80010a4:	4b42      	ldr	r3, [pc, #264]	; (80011b0 <HAL_UART_MspInit+0x254>)
 80010a6:	69db      	ldr	r3, [r3, #28]
 80010a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010ac:	60fb      	str	r3, [r7, #12]
 80010ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b0:	4b3f      	ldr	r3, [pc, #252]	; (80011b0 <HAL_UART_MspInit+0x254>)
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	4a3e      	ldr	r2, [pc, #248]	; (80011b0 <HAL_UART_MspInit+0x254>)
 80010b6:	f043 0308 	orr.w	r3, r3, #8
 80010ba:	6193      	str	r3, [r2, #24]
 80010bc:	4b3c      	ldr	r3, [pc, #240]	; (80011b0 <HAL_UART_MspInit+0x254>)
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	f003 0308 	and.w	r3, r3, #8
 80010c4:	60bb      	str	r3, [r7, #8]
 80010c6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80010c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ce:	2302      	movs	r3, #2
 80010d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010d2:	2303      	movs	r3, #3
 80010d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d6:	f107 0318 	add.w	r3, r7, #24
 80010da:	4619      	mov	r1, r3
 80010dc:	483b      	ldr	r0, [pc, #236]	; (80011cc <HAL_UART_MspInit+0x270>)
 80010de:	f001 fb2b 	bl	8002738 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80010e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80010e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010e8:	2300      	movs	r3, #0
 80010ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f0:	f107 0318 	add.w	r3, r7, #24
 80010f4:	4619      	mov	r1, r3
 80010f6:	4835      	ldr	r0, [pc, #212]	; (80011cc <HAL_UART_MspInit+0x270>)
 80010f8:	f001 fb1e 	bl	8002738 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 80010fc:	4b34      	ldr	r3, [pc, #208]	; (80011d0 <HAL_UART_MspInit+0x274>)
 80010fe:	4a35      	ldr	r2, [pc, #212]	; (80011d4 <HAL_UART_MspInit+0x278>)
 8001100:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001102:	4b33      	ldr	r3, [pc, #204]	; (80011d0 <HAL_UART_MspInit+0x274>)
 8001104:	2200      	movs	r2, #0
 8001106:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001108:	4b31      	ldr	r3, [pc, #196]	; (80011d0 <HAL_UART_MspInit+0x274>)
 800110a:	2200      	movs	r2, #0
 800110c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800110e:	4b30      	ldr	r3, [pc, #192]	; (80011d0 <HAL_UART_MspInit+0x274>)
 8001110:	2280      	movs	r2, #128	; 0x80
 8001112:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001114:	4b2e      	ldr	r3, [pc, #184]	; (80011d0 <HAL_UART_MspInit+0x274>)
 8001116:	2200      	movs	r2, #0
 8001118:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800111a:	4b2d      	ldr	r3, [pc, #180]	; (80011d0 <HAL_UART_MspInit+0x274>)
 800111c:	2200      	movs	r2, #0
 800111e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001120:	4b2b      	ldr	r3, [pc, #172]	; (80011d0 <HAL_UART_MspInit+0x274>)
 8001122:	2220      	movs	r2, #32
 8001124:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001126:	4b2a      	ldr	r3, [pc, #168]	; (80011d0 <HAL_UART_MspInit+0x274>)
 8001128:	2200      	movs	r2, #0
 800112a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800112c:	4828      	ldr	r0, [pc, #160]	; (80011d0 <HAL_UART_MspInit+0x274>)
 800112e:	f001 f865 	bl	80021fc <HAL_DMA_Init>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <HAL_UART_MspInit+0x1e0>
      Error_Handler();
 8001138:	f7ff fdf6 	bl	8000d28 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	4a24      	ldr	r2, [pc, #144]	; (80011d0 <HAL_UART_MspInit+0x274>)
 8001140:	635a      	str	r2, [r3, #52]	; 0x34
 8001142:	4a23      	ldr	r2, [pc, #140]	; (80011d0 <HAL_UART_MspInit+0x274>)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8001148:	4b23      	ldr	r3, [pc, #140]	; (80011d8 <HAL_UART_MspInit+0x27c>)
 800114a:	4a24      	ldr	r2, [pc, #144]	; (80011dc <HAL_UART_MspInit+0x280>)
 800114c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800114e:	4b22      	ldr	r3, [pc, #136]	; (80011d8 <HAL_UART_MspInit+0x27c>)
 8001150:	2210      	movs	r2, #16
 8001152:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001154:	4b20      	ldr	r3, [pc, #128]	; (80011d8 <HAL_UART_MspInit+0x27c>)
 8001156:	2200      	movs	r2, #0
 8001158:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800115a:	4b1f      	ldr	r3, [pc, #124]	; (80011d8 <HAL_UART_MspInit+0x27c>)
 800115c:	2280      	movs	r2, #128	; 0x80
 800115e:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001160:	4b1d      	ldr	r3, [pc, #116]	; (80011d8 <HAL_UART_MspInit+0x27c>)
 8001162:	2200      	movs	r2, #0
 8001164:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001166:	4b1c      	ldr	r3, [pc, #112]	; (80011d8 <HAL_UART_MspInit+0x27c>)
 8001168:	2200      	movs	r2, #0
 800116a:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800116c:	4b1a      	ldr	r3, [pc, #104]	; (80011d8 <HAL_UART_MspInit+0x27c>)
 800116e:	2200      	movs	r2, #0
 8001170:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001172:	4b19      	ldr	r3, [pc, #100]	; (80011d8 <HAL_UART_MspInit+0x27c>)
 8001174:	2200      	movs	r2, #0
 8001176:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001178:	4817      	ldr	r0, [pc, #92]	; (80011d8 <HAL_UART_MspInit+0x27c>)
 800117a:	f001 f83f 	bl	80021fc <HAL_DMA_Init>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <HAL_UART_MspInit+0x22c>
      Error_Handler();
 8001184:	f7ff fdd0 	bl	8000d28 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	4a13      	ldr	r2, [pc, #76]	; (80011d8 <HAL_UART_MspInit+0x27c>)
 800118c:	631a      	str	r2, [r3, #48]	; 0x30
 800118e:	4a12      	ldr	r2, [pc, #72]	; (80011d8 <HAL_UART_MspInit+0x27c>)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 2, 0);
 8001194:	2200      	movs	r2, #0
 8001196:	2102      	movs	r1, #2
 8001198:	2027      	movs	r0, #39	; 0x27
 800119a:	f000 fff8 	bl	800218e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800119e:	2027      	movs	r0, #39	; 0x27
 80011a0:	f001 f811 	bl	80021c6 <HAL_NVIC_EnableIRQ>
}
 80011a4:	bf00      	nop
 80011a6:	3728      	adds	r7, #40	; 0x28
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	40013800 	.word	0x40013800
 80011b0:	40021000 	.word	0x40021000
 80011b4:	40010800 	.word	0x40010800
 80011b8:	200002f8 	.word	0x200002f8
 80011bc:	40020058 	.word	0x40020058
 80011c0:	20000284 	.word	0x20000284
 80011c4:	40020044 	.word	0x40020044
 80011c8:	40004800 	.word	0x40004800
 80011cc:	40010c00 	.word	0x40010c00
 80011d0:	2000017c 	.word	0x2000017c
 80011d4:	40020030 	.word	0x40020030
 80011d8:	20000200 	.word	0x20000200
 80011dc:	4002001c 	.word	0x4002001c

080011e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bc80      	pop	{r7}
 80011ea:	4770      	bx	lr

080011ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011f0:	e7fe      	b.n	80011f0 <HardFault_Handler+0x4>

080011f2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011f2:	b480      	push	{r7}
 80011f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011f6:	e7fe      	b.n	80011f6 <MemManage_Handler+0x4>

080011f8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011fc:	e7fe      	b.n	80011fc <BusFault_Handler+0x4>

080011fe <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011fe:	b480      	push	{r7}
 8001200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001202:	e7fe      	b.n	8001202 <UsageFault_Handler+0x4>

08001204 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	bc80      	pop	{r7}
 800120e:	4770      	bx	lr

08001210 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001214:	bf00      	nop
 8001216:	46bd      	mov	sp, r7
 8001218:	bc80      	pop	{r7}
 800121a:	4770      	bx	lr

0800121c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001220:	bf00      	nop
 8001222:	46bd      	mov	sp, r7
 8001224:	bc80      	pop	{r7}
 8001226:	4770      	bx	lr

08001228 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800122c:	f000 f930 	bl	8001490 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001230:	bf00      	nop
 8001232:	bd80      	pop	{r7, pc}

08001234 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001238:	4802      	ldr	r0, [pc, #8]	; (8001244 <DMA1_Channel1_IRQHandler+0x10>)
 800123a:	f001 f949 	bl	80024d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	2000037c 	.word	0x2000037c

08001248 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800124c:	4802      	ldr	r0, [pc, #8]	; (8001258 <DMA1_Channel2_IRQHandler+0x10>)
 800124e:	f001 f93f 	bl	80024d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001252:	bf00      	nop
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	20000200 	.word	0x20000200

0800125c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001260:	4802      	ldr	r0, [pc, #8]	; (800126c <DMA1_Channel3_IRQHandler+0x10>)
 8001262:	f001 f935 	bl	80024d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	2000017c 	.word	0x2000017c

08001270 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001274:	4802      	ldr	r0, [pc, #8]	; (8001280 <DMA1_Channel4_IRQHandler+0x10>)
 8001276:	f001 f92b 	bl	80024d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	20000284 	.word	0x20000284

08001284 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001288:	4802      	ldr	r0, [pc, #8]	; (8001294 <DMA1_Channel5_IRQHandler+0x10>)
 800128a:	f001 f921 	bl	80024d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	200002f8 	.word	0x200002f8

08001298 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800129c:	4802      	ldr	r0, [pc, #8]	; (80012a8 <ADC1_2_IRQHandler+0x10>)
 800129e:	f000 fb30 	bl	8001902 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	200002c8 	.word	0x200002c8

080012ac <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80012b0:	4802      	ldr	r0, [pc, #8]	; (80012bc <TIM3_IRQHandler+0x10>)
 80012b2:	f002 fa3d 	bl	8003730 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20000244 	.word	0x20000244

080012c0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80012c4:	4802      	ldr	r0, [pc, #8]	; (80012d0 <USART1_IRQHandler+0x10>)
 80012c6:	f003 f911 	bl	80044ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	2000033c 	.word	0x2000033c

080012d4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80012d8:	4802      	ldr	r0, [pc, #8]	; (80012e4 <USART3_IRQHandler+0x10>)
 80012da:	f003 f907 	bl	80044ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	200001c0 	.word	0x200001c0

080012e8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80012ec:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80012f0:	f001 fbc4 	bl	8002a7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80012f4:	bf00      	nop
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001300:	4b11      	ldr	r3, [pc, #68]	; (8001348 <_sbrk+0x50>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d102      	bne.n	800130e <_sbrk+0x16>
		heap_end = &end;
 8001308:	4b0f      	ldr	r3, [pc, #60]	; (8001348 <_sbrk+0x50>)
 800130a:	4a10      	ldr	r2, [pc, #64]	; (800134c <_sbrk+0x54>)
 800130c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800130e:	4b0e      	ldr	r3, [pc, #56]	; (8001348 <_sbrk+0x50>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001314:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <_sbrk+0x50>)
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	4413      	add	r3, r2
 800131c:	466a      	mov	r2, sp
 800131e:	4293      	cmp	r3, r2
 8001320:	d907      	bls.n	8001332 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001322:	f003 fcd5 	bl	8004cd0 <__errno>
 8001326:	4602      	mov	r2, r0
 8001328:	230c      	movs	r3, #12
 800132a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800132c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001330:	e006      	b.n	8001340 <_sbrk+0x48>
	}

	heap_end += incr;
 8001332:	4b05      	ldr	r3, [pc, #20]	; (8001348 <_sbrk+0x50>)
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4413      	add	r3, r2
 800133a:	4a03      	ldr	r2, [pc, #12]	; (8001348 <_sbrk+0x50>)
 800133c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800133e:	68fb      	ldr	r3, [r7, #12]
}
 8001340:	4618      	mov	r0, r3
 8001342:	3710      	adds	r7, #16
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	20000170 	.word	0x20000170
 800134c:	20000470 	.word	0x20000470

08001350 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001354:	4b15      	ldr	r3, [pc, #84]	; (80013ac <SystemInit+0x5c>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a14      	ldr	r2, [pc, #80]	; (80013ac <SystemInit+0x5c>)
 800135a:	f043 0301 	orr.w	r3, r3, #1
 800135e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001360:	4b12      	ldr	r3, [pc, #72]	; (80013ac <SystemInit+0x5c>)
 8001362:	685a      	ldr	r2, [r3, #4]
 8001364:	4911      	ldr	r1, [pc, #68]	; (80013ac <SystemInit+0x5c>)
 8001366:	4b12      	ldr	r3, [pc, #72]	; (80013b0 <SystemInit+0x60>)
 8001368:	4013      	ands	r3, r2
 800136a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800136c:	4b0f      	ldr	r3, [pc, #60]	; (80013ac <SystemInit+0x5c>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a0e      	ldr	r2, [pc, #56]	; (80013ac <SystemInit+0x5c>)
 8001372:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001376:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800137a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800137c:	4b0b      	ldr	r3, [pc, #44]	; (80013ac <SystemInit+0x5c>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a0a      	ldr	r2, [pc, #40]	; (80013ac <SystemInit+0x5c>)
 8001382:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001386:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001388:	4b08      	ldr	r3, [pc, #32]	; (80013ac <SystemInit+0x5c>)
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	4a07      	ldr	r2, [pc, #28]	; (80013ac <SystemInit+0x5c>)
 800138e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001392:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001394:	4b05      	ldr	r3, [pc, #20]	; (80013ac <SystemInit+0x5c>)
 8001396:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800139a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800139c:	4b05      	ldr	r3, [pc, #20]	; (80013b4 <SystemInit+0x64>)
 800139e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013a2:	609a      	str	r2, [r3, #8]
#endif 
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bc80      	pop	{r7}
 80013aa:	4770      	bx	lr
 80013ac:	40021000 	.word	0x40021000
 80013b0:	f8ff0000 	.word	0xf8ff0000
 80013b4:	e000ed00 	.word	0xe000ed00

080013b8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80013b8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80013ba:	e003      	b.n	80013c4 <LoopCopyDataInit>

080013bc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80013bc:	4b0b      	ldr	r3, [pc, #44]	; (80013ec <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80013be:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80013c0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80013c2:	3104      	adds	r1, #4

080013c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80013c4:	480a      	ldr	r0, [pc, #40]	; (80013f0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80013c6:	4b0b      	ldr	r3, [pc, #44]	; (80013f4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80013c8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80013ca:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80013cc:	d3f6      	bcc.n	80013bc <CopyDataInit>
  ldr r2, =_sbss
 80013ce:	4a0a      	ldr	r2, [pc, #40]	; (80013f8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80013d0:	e002      	b.n	80013d8 <LoopFillZerobss>

080013d2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80013d2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80013d4:	f842 3b04 	str.w	r3, [r2], #4

080013d8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80013d8:	4b08      	ldr	r3, [pc, #32]	; (80013fc <LoopFillZerobss+0x24>)
  cmp r2, r3
 80013da:	429a      	cmp	r2, r3
  bcc FillZerobss
 80013dc:	d3f9      	bcc.n	80013d2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80013de:	f7ff ffb7 	bl	8001350 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013e2:	f003 fc7b 	bl	8004cdc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013e6:	f7fe ff0d 	bl	8000204 <main>
  bx lr
 80013ea:	4770      	bx	lr
  ldr r3, =_sidata
 80013ec:	08005628 	.word	0x08005628
  ldr r0, =_sdata
 80013f0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80013f4:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 80013f8:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 80013fc:	20000470 	.word	0x20000470

08001400 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001400:	e7fe      	b.n	8001400 <CAN1_RX1_IRQHandler>
	...

08001404 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001408:	4b08      	ldr	r3, [pc, #32]	; (800142c <HAL_Init+0x28>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a07      	ldr	r2, [pc, #28]	; (800142c <HAL_Init+0x28>)
 800140e:	f043 0310 	orr.w	r3, r3, #16
 8001412:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001414:	2003      	movs	r0, #3
 8001416:	f000 feaf 	bl	8002178 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800141a:	2000      	movs	r0, #0
 800141c:	f000 f808 	bl	8001430 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001420:	f7ff fc88 	bl	8000d34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001424:	2300      	movs	r3, #0
}
 8001426:	4618      	mov	r0, r3
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	40022000 	.word	0x40022000

08001430 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001438:	4b12      	ldr	r3, [pc, #72]	; (8001484 <HAL_InitTick+0x54>)
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	4b12      	ldr	r3, [pc, #72]	; (8001488 <HAL_InitTick+0x58>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	4619      	mov	r1, r3
 8001442:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001446:	fbb3 f3f1 	udiv	r3, r3, r1
 800144a:	fbb2 f3f3 	udiv	r3, r2, r3
 800144e:	4618      	mov	r0, r3
 8001450:	f000 fec7 	bl	80021e2 <HAL_SYSTICK_Config>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e00e      	b.n	800147c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2b0f      	cmp	r3, #15
 8001462:	d80a      	bhi.n	800147a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001464:	2200      	movs	r2, #0
 8001466:	6879      	ldr	r1, [r7, #4]
 8001468:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800146c:	f000 fe8f 	bl	800218e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001470:	4a06      	ldr	r2, [pc, #24]	; (800148c <HAL_InitTick+0x5c>)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001476:	2300      	movs	r3, #0
 8001478:	e000      	b.n	800147c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
}
 800147c:	4618      	mov	r0, r3
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	20000008 	.word	0x20000008
 8001488:	20000010 	.word	0x20000010
 800148c:	2000000c 	.word	0x2000000c

08001490 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001494:	4b05      	ldr	r3, [pc, #20]	; (80014ac <HAL_IncTick+0x1c>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	461a      	mov	r2, r3
 800149a:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <HAL_IncTick+0x20>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4413      	add	r3, r2
 80014a0:	4a03      	ldr	r2, [pc, #12]	; (80014b0 <HAL_IncTick+0x20>)
 80014a2:	6013      	str	r3, [r2, #0]
}
 80014a4:	bf00      	nop
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bc80      	pop	{r7}
 80014aa:	4770      	bx	lr
 80014ac:	20000010 	.word	0x20000010
 80014b0:	20000468 	.word	0x20000468

080014b4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  return uwTick;
 80014b8:	4b02      	ldr	r3, [pc, #8]	; (80014c4 <HAL_GetTick+0x10>)
 80014ba:	681b      	ldr	r3, [r3, #0]
}
 80014bc:	4618      	mov	r0, r3
 80014be:	46bd      	mov	sp, r7
 80014c0:	bc80      	pop	{r7}
 80014c2:	4770      	bx	lr
 80014c4:	20000468 	.word	0x20000468

080014c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014d0:	f7ff fff0 	bl	80014b4 <HAL_GetTick>
 80014d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80014e0:	d005      	beq.n	80014ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014e2:	4b09      	ldr	r3, [pc, #36]	; (8001508 <HAL_Delay+0x40>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	461a      	mov	r2, r3
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	4413      	add	r3, r2
 80014ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014ee:	bf00      	nop
 80014f0:	f7ff ffe0 	bl	80014b4 <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	68fa      	ldr	r2, [r7, #12]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d8f7      	bhi.n	80014f0 <HAL_Delay+0x28>
  {
  }
}
 8001500:	bf00      	nop
 8001502:	3710      	adds	r7, #16
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	20000010 	.word	0x20000010

0800150c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001514:	2300      	movs	r3, #0
 8001516:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001518:	2300      	movs	r3, #0
 800151a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800151c:	2300      	movs	r3, #0
 800151e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001520:	2300      	movs	r3, #0
 8001522:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d101      	bne.n	800152e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e0be      	b.n	80016ac <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001538:	2b00      	cmp	r3, #0
 800153a:	d109      	bne.n	8001550 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2200      	movs	r2, #0
 8001540:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2200      	movs	r2, #0
 8001546:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f7ff fc24 	bl	8000d98 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f000 fbff 	bl	8001d54 <ADC_ConversionStop_Disable>
 8001556:	4603      	mov	r3, r0
 8001558:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800155e:	f003 0310 	and.w	r3, r3, #16
 8001562:	2b00      	cmp	r3, #0
 8001564:	f040 8099 	bne.w	800169a <HAL_ADC_Init+0x18e>
 8001568:	7dfb      	ldrb	r3, [r7, #23]
 800156a:	2b00      	cmp	r3, #0
 800156c:	f040 8095 	bne.w	800169a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001574:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001578:	f023 0302 	bic.w	r3, r3, #2
 800157c:	f043 0202 	orr.w	r2, r3, #2
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800158c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	7b1b      	ldrb	r3, [r3, #12]
 8001592:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001594:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001596:	68ba      	ldr	r2, [r7, #8]
 8001598:	4313      	orrs	r3, r2
 800159a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015a4:	d003      	beq.n	80015ae <HAL_ADC_Init+0xa2>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d102      	bne.n	80015b4 <HAL_ADC_Init+0xa8>
 80015ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015b2:	e000      	b.n	80015b6 <HAL_ADC_Init+0xaa>
 80015b4:	2300      	movs	r3, #0
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	7d1b      	ldrb	r3, [r3, #20]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d119      	bne.n	80015f8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	7b1b      	ldrb	r3, [r3, #12]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d109      	bne.n	80015e0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	699b      	ldr	r3, [r3, #24]
 80015d0:	3b01      	subs	r3, #1
 80015d2:	035a      	lsls	r2, r3, #13
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80015dc:	613b      	str	r3, [r7, #16]
 80015de:	e00b      	b.n	80015f8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e4:	f043 0220 	orr.w	r2, r3, #32
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f0:	f043 0201 	orr.w	r2, r3, #1
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	430a      	orrs	r2, r1
 800160a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	689a      	ldr	r2, [r3, #8]
 8001612:	4b28      	ldr	r3, [pc, #160]	; (80016b4 <HAL_ADC_Init+0x1a8>)
 8001614:	4013      	ands	r3, r2
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	6812      	ldr	r2, [r2, #0]
 800161a:	68b9      	ldr	r1, [r7, #8]
 800161c:	430b      	orrs	r3, r1
 800161e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001628:	d003      	beq.n	8001632 <HAL_ADC_Init+0x126>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d104      	bne.n	800163c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	691b      	ldr	r3, [r3, #16]
 8001636:	3b01      	subs	r3, #1
 8001638:	051b      	lsls	r3, r3, #20
 800163a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001642:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	68fa      	ldr	r2, [r7, #12]
 800164c:	430a      	orrs	r2, r1
 800164e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	689a      	ldr	r2, [r3, #8]
 8001656:	4b18      	ldr	r3, [pc, #96]	; (80016b8 <HAL_ADC_Init+0x1ac>)
 8001658:	4013      	ands	r3, r2
 800165a:	68ba      	ldr	r2, [r7, #8]
 800165c:	429a      	cmp	r2, r3
 800165e:	d10b      	bne.n	8001678 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2200      	movs	r2, #0
 8001664:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800166a:	f023 0303 	bic.w	r3, r3, #3
 800166e:	f043 0201 	orr.w	r2, r3, #1
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001676:	e018      	b.n	80016aa <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800167c:	f023 0312 	bic.w	r3, r3, #18
 8001680:	f043 0210 	orr.w	r2, r3, #16
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800168c:	f043 0201 	orr.w	r2, r3, #1
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001698:	e007      	b.n	80016aa <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800169e:	f043 0210 	orr.w	r2, r3, #16
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80016aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3718      	adds	r7, #24
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	ffe1f7fd 	.word	0xffe1f7fd
 80016b8:	ff1f0efe 	.word	0xff1f0efe

080016bc <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b086      	sub	sp, #24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	60f8      	str	r0, [r7, #12]
 80016c4:	60b9      	str	r1, [r7, #8]
 80016c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016c8:	2300      	movs	r3, #0
 80016ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a64      	ldr	r2, [pc, #400]	; (8001864 <HAL_ADC_Start_DMA+0x1a8>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d004      	beq.n	80016e0 <HAL_ADC_Start_DMA+0x24>
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a63      	ldr	r2, [pc, #396]	; (8001868 <HAL_ADC_Start_DMA+0x1ac>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d106      	bne.n	80016ee <HAL_ADC_Start_DMA+0x32>
 80016e0:	4b60      	ldr	r3, [pc, #384]	; (8001864 <HAL_ADC_Start_DMA+0x1a8>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	f040 80b3 	bne.w	8001854 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d101      	bne.n	80016fc <HAL_ADC_Start_DMA+0x40>
 80016f8:	2302      	movs	r3, #2
 80016fa:	e0ae      	b.n	800185a <HAL_ADC_Start_DMA+0x19e>
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	2201      	movs	r2, #1
 8001700:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001704:	68f8      	ldr	r0, [r7, #12]
 8001706:	f000 fad3 	bl	8001cb0 <ADC_Enable>
 800170a:	4603      	mov	r3, r0
 800170c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800170e:	7dfb      	ldrb	r3, [r7, #23]
 8001710:	2b00      	cmp	r3, #0
 8001712:	f040 809a 	bne.w	800184a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800171a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800171e:	f023 0301 	bic.w	r3, r3, #1
 8001722:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a4e      	ldr	r2, [pc, #312]	; (8001868 <HAL_ADC_Start_DMA+0x1ac>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d105      	bne.n	8001740 <HAL_ADC_Start_DMA+0x84>
 8001734:	4b4b      	ldr	r3, [pc, #300]	; (8001864 <HAL_ADC_Start_DMA+0x1a8>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d115      	bne.n	800176c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001744:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001756:	2b00      	cmp	r3, #0
 8001758:	d026      	beq.n	80017a8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800175e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001762:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800176a:	e01d      	b.n	80017a8 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001770:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a39      	ldr	r2, [pc, #228]	; (8001864 <HAL_ADC_Start_DMA+0x1a8>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d004      	beq.n	800178c <HAL_ADC_Start_DMA+0xd0>
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a38      	ldr	r2, [pc, #224]	; (8001868 <HAL_ADC_Start_DMA+0x1ac>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d10d      	bne.n	80017a8 <HAL_ADC_Start_DMA+0xec>
 800178c:	4b35      	ldr	r3, [pc, #212]	; (8001864 <HAL_ADC_Start_DMA+0x1a8>)
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001794:	2b00      	cmp	r3, #0
 8001796:	d007      	beq.n	80017a8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800179c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80017a0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d006      	beq.n	80017c2 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b8:	f023 0206 	bic.w	r2, r3, #6
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	62da      	str	r2, [r3, #44]	; 0x2c
 80017c0:	e002      	b.n	80017c8 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	2200      	movs	r2, #0
 80017c6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	2200      	movs	r2, #0
 80017cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	6a1b      	ldr	r3, [r3, #32]
 80017d4:	4a25      	ldr	r2, [pc, #148]	; (800186c <HAL_ADC_Start_DMA+0x1b0>)
 80017d6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	6a1b      	ldr	r3, [r3, #32]
 80017dc:	4a24      	ldr	r2, [pc, #144]	; (8001870 <HAL_ADC_Start_DMA+0x1b4>)
 80017de:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	6a1b      	ldr	r3, [r3, #32]
 80017e4:	4a23      	ldr	r2, [pc, #140]	; (8001874 <HAL_ADC_Start_DMA+0x1b8>)
 80017e6:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f06f 0202 	mvn.w	r2, #2
 80017f0:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	689a      	ldr	r2, [r3, #8]
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001800:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	6a18      	ldr	r0, [r3, #32]
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	334c      	adds	r3, #76	; 0x4c
 800180c:	4619      	mov	r1, r3
 800180e:	68ba      	ldr	r2, [r7, #8]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f000 fd4d 	bl	80022b0 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001820:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001824:	d108      	bne.n	8001838 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	689a      	ldr	r2, [r3, #8]
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001834:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001836:	e00f      	b.n	8001858 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	689a      	ldr	r2, [r3, #8]
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001846:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001848:	e006      	b.n	8001858 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	2200      	movs	r2, #0
 800184e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001852:	e001      	b.n	8001858 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001858:	7dfb      	ldrb	r3, [r7, #23]
}
 800185a:	4618      	mov	r0, r3
 800185c:	3718      	adds	r7, #24
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40012400 	.word	0x40012400
 8001868:	40012800 	.word	0x40012800
 800186c:	08001dc9 	.word	0x08001dc9
 8001870:	08001e45 	.word	0x08001e45
 8001874:	08001e61 	.word	0x08001e61

08001878 <HAL_ADC_Stop_DMA>:
  *         on devices) have DMA capability.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001880:	2300      	movs	r3, #0
 8001882:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800188a:	2b01      	cmp	r3, #1
 800188c:	d101      	bne.n	8001892 <HAL_ADC_Stop_DMA+0x1a>
 800188e:	2302      	movs	r3, #2
 8001890:	e033      	b.n	80018fa <HAL_ADC_Stop_DMA+0x82>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2201      	movs	r2, #1
 8001896:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f000 fa5a 	bl	8001d54 <ADC_ConversionStop_Disable>
 80018a0:	4603      	mov	r3, r0
 80018a2:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80018a4:	7bfb      	ldrb	r3, [r7, #15]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d122      	bne.n	80018f0 <HAL_ADC_Stop_DMA+0x78>
  {
    /* Disable ADC DMA mode */
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	689a      	ldr	r2, [r3, #8]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018b8:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6a1b      	ldr	r3, [r3, #32]
 80018be:	4618      	mov	r0, r3
 80018c0:	f000 fd55 	bl	800236e <HAL_DMA_Abort>
 80018c4:	4603      	mov	r3, r0
 80018c6:	73fb      	strb	r3, [r7, #15]
    
    /* Check if DMA channel effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80018c8:	7bfb      	ldrb	r3, [r7, #15]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d10a      	bne.n	80018e4 <HAL_ADC_Stop_DMA+0x6c>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80018d6:	f023 0301 	bic.w	r3, r3, #1
 80018da:	f043 0201 	orr.w	r2, r3, #1
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	629a      	str	r2, [r3, #40]	; 0x28
 80018e2:	e005      	b.n	80018f0 <HAL_ADC_Stop_DMA+0x78>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2200      	movs	r2, #0
 80018f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Return function status */
  return tmp_hal_status;
 80018f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3710      	adds	r7, #16
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001902:	b580      	push	{r7, lr}
 8001904:	b082      	sub	sp, #8
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f003 0320 	and.w	r3, r3, #32
 8001914:	2b20      	cmp	r3, #32
 8001916:	d140      	bne.n	800199a <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	2b02      	cmp	r3, #2
 8001924:	d139      	bne.n	800199a <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800192a:	f003 0310 	and.w	r3, r3, #16
 800192e:	2b00      	cmp	r3, #0
 8001930:	d105      	bne.n	800193e <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001936:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001948:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800194c:	d11d      	bne.n	800198a <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001952:	2b00      	cmp	r3, #0
 8001954:	d119      	bne.n	800198a <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	685a      	ldr	r2, [r3, #4]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f022 0220 	bic.w	r2, r2, #32
 8001964:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800196a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001976:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d105      	bne.n	800198a <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001982:	f043 0201 	orr.w	r2, r3, #1
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f7ff f936 	bl	8000bfc <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f06f 0212 	mvn.w	r2, #18
 8001998:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019a4:	2b80      	cmp	r3, #128	; 0x80
 80019a6:	d14f      	bne.n	8001a48 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0304 	and.w	r3, r3, #4
 80019b2:	2b04      	cmp	r3, #4
 80019b4:	d148      	bne.n	8001a48 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ba:	f003 0310 	and.w	r3, r3, #16
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d105      	bne.n	80019ce <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80019d8:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80019dc:	d012      	beq.n	8001a04 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d125      	bne.n	8001a38 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80019f6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80019fa:	d11d      	bne.n	8001a38 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d119      	bne.n	8001a38 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	685a      	ldr	r2, [r3, #4]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a12:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a18:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d105      	bne.n	8001a38 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a30:	f043 0201 	orr.w	r2, r3, #1
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f000 fac7 	bl	8001fcc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f06f 020c 	mvn.w	r2, #12
 8001a46:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a52:	2b40      	cmp	r3, #64	; 0x40
 8001a54:	d114      	bne.n	8001a80 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0301 	and.w	r3, r3, #1
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d10d      	bne.n	8001a80 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a68:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f000 f812 	bl	8001a9a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f06f 0201 	mvn.w	r2, #1
 8001a7e:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001a80:	bf00      	nop
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001a90:	bf00      	nop
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bc80      	pop	{r7}
 8001a98:	4770      	bx	lr

08001a9a <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	b083      	sub	sp, #12
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001aa2:	bf00      	nop
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bc80      	pop	{r7}
 8001aaa:	4770      	bx	lr

08001aac <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001ab4:	bf00      	nop
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bc80      	pop	{r7}
 8001abc:	4770      	bx	lr
	...

08001ac0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001aca:	2300      	movs	r3, #0
 8001acc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d101      	bne.n	8001ae0 <HAL_ADC_ConfigChannel+0x20>
 8001adc:	2302      	movs	r3, #2
 8001ade:	e0dc      	b.n	8001c9a <HAL_ADC_ConfigChannel+0x1da>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	2b06      	cmp	r3, #6
 8001aee:	d81c      	bhi.n	8001b2a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	685a      	ldr	r2, [r3, #4]
 8001afa:	4613      	mov	r3, r2
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	4413      	add	r3, r2
 8001b00:	3b05      	subs	r3, #5
 8001b02:	221f      	movs	r2, #31
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	4019      	ands	r1, r3
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	6818      	ldr	r0, [r3, #0]
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685a      	ldr	r2, [r3, #4]
 8001b14:	4613      	mov	r3, r2
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	4413      	add	r3, r2
 8001b1a:	3b05      	subs	r3, #5
 8001b1c:	fa00 f203 	lsl.w	r2, r0, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	430a      	orrs	r2, r1
 8001b26:	635a      	str	r2, [r3, #52]	; 0x34
 8001b28:	e03c      	b.n	8001ba4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	2b0c      	cmp	r3, #12
 8001b30:	d81c      	bhi.n	8001b6c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685a      	ldr	r2, [r3, #4]
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	4413      	add	r3, r2
 8001b42:	3b23      	subs	r3, #35	; 0x23
 8001b44:	221f      	movs	r2, #31
 8001b46:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4a:	43db      	mvns	r3, r3
 8001b4c:	4019      	ands	r1, r3
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	6818      	ldr	r0, [r3, #0]
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685a      	ldr	r2, [r3, #4]
 8001b56:	4613      	mov	r3, r2
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	4413      	add	r3, r2
 8001b5c:	3b23      	subs	r3, #35	; 0x23
 8001b5e:	fa00 f203 	lsl.w	r2, r0, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	430a      	orrs	r2, r1
 8001b68:	631a      	str	r2, [r3, #48]	; 0x30
 8001b6a:	e01b      	b.n	8001ba4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685a      	ldr	r2, [r3, #4]
 8001b76:	4613      	mov	r3, r2
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	4413      	add	r3, r2
 8001b7c:	3b41      	subs	r3, #65	; 0x41
 8001b7e:	221f      	movs	r2, #31
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	43db      	mvns	r3, r3
 8001b86:	4019      	ands	r1, r3
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	6818      	ldr	r0, [r3, #0]
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685a      	ldr	r2, [r3, #4]
 8001b90:	4613      	mov	r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	4413      	add	r3, r2
 8001b96:	3b41      	subs	r3, #65	; 0x41
 8001b98:	fa00 f203 	lsl.w	r2, r0, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	430a      	orrs	r2, r1
 8001ba2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2b09      	cmp	r3, #9
 8001baa:	d91c      	bls.n	8001be6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	68d9      	ldr	r1, [r3, #12]
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	4413      	add	r3, r2
 8001bbc:	3b1e      	subs	r3, #30
 8001bbe:	2207      	movs	r2, #7
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	4019      	ands	r1, r3
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	6898      	ldr	r0, [r3, #8]
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	4413      	add	r3, r2
 8001bd6:	3b1e      	subs	r3, #30
 8001bd8:	fa00 f203 	lsl.w	r2, r0, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	430a      	orrs	r2, r1
 8001be2:	60da      	str	r2, [r3, #12]
 8001be4:	e019      	b.n	8001c1a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	6919      	ldr	r1, [r3, #16]
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	4413      	add	r3, r2
 8001bf6:	2207      	movs	r2, #7
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	4019      	ands	r1, r3
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	6898      	ldr	r0, [r3, #8]
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	4613      	mov	r3, r2
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	4413      	add	r3, r2
 8001c0e:	fa00 f203 	lsl.w	r2, r0, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	430a      	orrs	r2, r1
 8001c18:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2b10      	cmp	r3, #16
 8001c20:	d003      	beq.n	8001c2a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001c26:	2b11      	cmp	r3, #17
 8001c28:	d132      	bne.n	8001c90 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a1d      	ldr	r2, [pc, #116]	; (8001ca4 <HAL_ADC_ConfigChannel+0x1e4>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d125      	bne.n	8001c80 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d126      	bne.n	8001c90 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	689a      	ldr	r2, [r3, #8]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001c50:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	2b10      	cmp	r3, #16
 8001c58:	d11a      	bne.n	8001c90 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c5a:	4b13      	ldr	r3, [pc, #76]	; (8001ca8 <HAL_ADC_ConfigChannel+0x1e8>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a13      	ldr	r2, [pc, #76]	; (8001cac <HAL_ADC_ConfigChannel+0x1ec>)
 8001c60:	fba2 2303 	umull	r2, r3, r2, r3
 8001c64:	0c9a      	lsrs	r2, r3, #18
 8001c66:	4613      	mov	r3, r2
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	4413      	add	r3, r2
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c70:	e002      	b.n	8001c78 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	3b01      	subs	r3, #1
 8001c76:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d1f9      	bne.n	8001c72 <HAL_ADC_ConfigChannel+0x1b2>
 8001c7e:	e007      	b.n	8001c90 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c84:	f043 0220 	orr.w	r2, r3, #32
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3714      	adds	r7, #20
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bc80      	pop	{r7}
 8001ca2:	4770      	bx	lr
 8001ca4:	40012400 	.word	0x40012400
 8001ca8:	20000008 	.word	0x20000008
 8001cac:	431bde83 	.word	0x431bde83

08001cb0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d039      	beq.n	8001d42 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	689a      	ldr	r2, [r3, #8]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f042 0201 	orr.w	r2, r2, #1
 8001cdc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001cde:	4b1b      	ldr	r3, [pc, #108]	; (8001d4c <ADC_Enable+0x9c>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a1b      	ldr	r2, [pc, #108]	; (8001d50 <ADC_Enable+0xa0>)
 8001ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ce8:	0c9b      	lsrs	r3, r3, #18
 8001cea:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001cec:	e002      	b.n	8001cf4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	3b01      	subs	r3, #1
 8001cf2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1f9      	bne.n	8001cee <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001cfa:	f7ff fbdb 	bl	80014b4 <HAL_GetTick>
 8001cfe:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001d00:	e018      	b.n	8001d34 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001d02:	f7ff fbd7 	bl	80014b4 <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d911      	bls.n	8001d34 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d14:	f043 0210 	orr.w	r2, r3, #16
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d20:	f043 0201 	orr.w	r2, r3, #1
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e007      	b.n	8001d44 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d1df      	bne.n	8001d02 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001d42:	2300      	movs	r3, #0
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3710      	adds	r7, #16
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	20000008 	.word	0x20000008
 8001d50:	431bde83 	.word	0x431bde83

08001d54 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d127      	bne.n	8001dbe <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	689a      	ldr	r2, [r3, #8]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f022 0201 	bic.w	r2, r2, #1
 8001d7c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001d7e:	f7ff fb99 	bl	80014b4 <HAL_GetTick>
 8001d82:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001d84:	e014      	b.n	8001db0 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001d86:	f7ff fb95 	bl	80014b4 <HAL_GetTick>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d90d      	bls.n	8001db0 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d98:	f043 0210 	orr.w	r2, r3, #16
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da4:	f043 0201 	orr.w	r2, r3, #1
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e007      	b.n	8001dc0 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d0e3      	beq.n	8001d86 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001dbe:	2300      	movs	r3, #0
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3710      	adds	r7, #16
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd4:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dda:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d127      	bne.n	8001e32 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001df8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001dfc:	d115      	bne.n	8001e2a <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d111      	bne.n	8001e2a <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e0a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d105      	bne.n	8001e2a <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e22:	f043 0201 	orr.w	r2, r3, #1
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001e2a:	68f8      	ldr	r0, [r7, #12]
 8001e2c:	f7fe fee6 	bl	8000bfc <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001e30:	e004      	b.n	8001e3c <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	6a1b      	ldr	r3, [r3, #32]
 8001e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	4798      	blx	r3
}
 8001e3c:	bf00      	nop
 8001e3e:	3710      	adds	r7, #16
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}

08001e44 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e50:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001e52:	68f8      	ldr	r0, [r7, #12]
 8001e54:	f7ff fe18 	bl	8001a88 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e58:	bf00      	nop
 8001e5a:	3710      	adds	r7, #16
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6c:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e72:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e7e:	f043 0204 	orr.w	r2, r3, #4
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001e86:	68f8      	ldr	r0, [r7, #12]
 8001e88:	f7ff fe10 	bl	8001aac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e8c:	bf00      	nop
 8001e8e:	3710      	adds	r7, #16
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001e94:	b590      	push	{r4, r7, lr}
 8001e96:	b087      	sub	sp, #28
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d101      	bne.n	8001eb2 <HAL_ADCEx_Calibration_Start+0x1e>
 8001eae:	2302      	movs	r3, #2
 8001eb0:	e086      	b.n	8001fc0 <HAL_ADCEx_Calibration_Start+0x12c>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f7ff ff4a 	bl	8001d54 <ADC_ConversionStop_Disable>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001ec4:	7dfb      	ldrb	r3, [r7, #23]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d175      	bne.n	8001fb6 <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ece:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ed2:	f023 0302 	bic.w	r3, r3, #2
 8001ed6:	f043 0202 	orr.w	r2, r3, #2
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001ede:	4b3a      	ldr	r3, [pc, #232]	; (8001fc8 <HAL_ADCEx_Calibration_Start+0x134>)
 8001ee0:	681c      	ldr	r4, [r3, #0]
 8001ee2:	2002      	movs	r0, #2
 8001ee4:	f001 fab4 	bl	8003450 <HAL_RCCEx_GetPeriphCLKFreq>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001eee:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001ef0:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001ef2:	e002      	b.n	8001efa <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d1f9      	bne.n	8001ef4 <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f7ff fed5 	bl	8001cb0 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	689a      	ldr	r2, [r3, #8]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f042 0208 	orr.w	r2, r2, #8
 8001f14:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001f16:	f7ff facd 	bl	80014b4 <HAL_GetTick>
 8001f1a:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001f1c:	e014      	b.n	8001f48 <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001f1e:	f7ff fac9 	bl	80014b4 <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	2b0a      	cmp	r3, #10
 8001f2a:	d90d      	bls.n	8001f48 <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f30:	f023 0312 	bic.w	r3, r3, #18
 8001f34:	f043 0210 	orr.w	r2, r3, #16
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e03b      	b.n	8001fc0 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f003 0308 	and.w	r3, r3, #8
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d1e3      	bne.n	8001f1e <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	689a      	ldr	r2, [r3, #8]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f042 0204 	orr.w	r2, r2, #4
 8001f64:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001f66:	f7ff faa5 	bl	80014b4 <HAL_GetTick>
 8001f6a:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001f6c:	e014      	b.n	8001f98 <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001f6e:	f7ff faa1 	bl	80014b4 <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b0a      	cmp	r3, #10
 8001f7a:	d90d      	bls.n	8001f98 <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f80:	f023 0312 	bic.w	r3, r3, #18
 8001f84:	f043 0210 	orr.w	r2, r3, #16
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e013      	b.n	8001fc0 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f003 0304 	and.w	r3, r3, #4
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d1e3      	bne.n	8001f6e <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001faa:	f023 0303 	bic.w	r3, r3, #3
 8001fae:	f043 0201 	orr.w	r2, r3, #1
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001fbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	371c      	adds	r7, #28
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd90      	pop	{r4, r7, pc}
 8001fc8:	20000008 	.word	0x20000008

08001fcc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bc80      	pop	{r7}
 8001fdc:	4770      	bx	lr
	...

08001fe0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b085      	sub	sp, #20
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f003 0307 	and.w	r3, r3, #7
 8001fee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ff0:	4b0c      	ldr	r3, [pc, #48]	; (8002024 <__NVIC_SetPriorityGrouping+0x44>)
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ff6:	68ba      	ldr	r2, [r7, #8]
 8001ff8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002008:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800200c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002010:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002012:	4a04      	ldr	r2, [pc, #16]	; (8002024 <__NVIC_SetPriorityGrouping+0x44>)
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	60d3      	str	r3, [r2, #12]
}
 8002018:	bf00      	nop
 800201a:	3714      	adds	r7, #20
 800201c:	46bd      	mov	sp, r7
 800201e:	bc80      	pop	{r7}
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	e000ed00 	.word	0xe000ed00

08002028 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800202c:	4b04      	ldr	r3, [pc, #16]	; (8002040 <__NVIC_GetPriorityGrouping+0x18>)
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	0a1b      	lsrs	r3, r3, #8
 8002032:	f003 0307 	and.w	r3, r3, #7
}
 8002036:	4618      	mov	r0, r3
 8002038:	46bd      	mov	sp, r7
 800203a:	bc80      	pop	{r7}
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	e000ed00 	.word	0xe000ed00

08002044 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	4603      	mov	r3, r0
 800204c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800204e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002052:	2b00      	cmp	r3, #0
 8002054:	db0b      	blt.n	800206e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002056:	79fb      	ldrb	r3, [r7, #7]
 8002058:	f003 021f 	and.w	r2, r3, #31
 800205c:	4906      	ldr	r1, [pc, #24]	; (8002078 <__NVIC_EnableIRQ+0x34>)
 800205e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002062:	095b      	lsrs	r3, r3, #5
 8002064:	2001      	movs	r0, #1
 8002066:	fa00 f202 	lsl.w	r2, r0, r2
 800206a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800206e:	bf00      	nop
 8002070:	370c      	adds	r7, #12
 8002072:	46bd      	mov	sp, r7
 8002074:	bc80      	pop	{r7}
 8002076:	4770      	bx	lr
 8002078:	e000e100 	.word	0xe000e100

0800207c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	4603      	mov	r3, r0
 8002084:	6039      	str	r1, [r7, #0]
 8002086:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002088:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208c:	2b00      	cmp	r3, #0
 800208e:	db0a      	blt.n	80020a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	b2da      	uxtb	r2, r3
 8002094:	490c      	ldr	r1, [pc, #48]	; (80020c8 <__NVIC_SetPriority+0x4c>)
 8002096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209a:	0112      	lsls	r2, r2, #4
 800209c:	b2d2      	uxtb	r2, r2
 800209e:	440b      	add	r3, r1
 80020a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020a4:	e00a      	b.n	80020bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	b2da      	uxtb	r2, r3
 80020aa:	4908      	ldr	r1, [pc, #32]	; (80020cc <__NVIC_SetPriority+0x50>)
 80020ac:	79fb      	ldrb	r3, [r7, #7]
 80020ae:	f003 030f 	and.w	r3, r3, #15
 80020b2:	3b04      	subs	r3, #4
 80020b4:	0112      	lsls	r2, r2, #4
 80020b6:	b2d2      	uxtb	r2, r2
 80020b8:	440b      	add	r3, r1
 80020ba:	761a      	strb	r2, [r3, #24]
}
 80020bc:	bf00      	nop
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bc80      	pop	{r7}
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	e000e100 	.word	0xe000e100
 80020cc:	e000ed00 	.word	0xe000ed00

080020d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b089      	sub	sp, #36	; 0x24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f003 0307 	and.w	r3, r3, #7
 80020e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	f1c3 0307 	rsb	r3, r3, #7
 80020ea:	2b04      	cmp	r3, #4
 80020ec:	bf28      	it	cs
 80020ee:	2304      	movcs	r3, #4
 80020f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	3304      	adds	r3, #4
 80020f6:	2b06      	cmp	r3, #6
 80020f8:	d902      	bls.n	8002100 <NVIC_EncodePriority+0x30>
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	3b03      	subs	r3, #3
 80020fe:	e000      	b.n	8002102 <NVIC_EncodePriority+0x32>
 8002100:	2300      	movs	r3, #0
 8002102:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002104:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	fa02 f303 	lsl.w	r3, r2, r3
 800210e:	43da      	mvns	r2, r3
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	401a      	ands	r2, r3
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002118:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	fa01 f303 	lsl.w	r3, r1, r3
 8002122:	43d9      	mvns	r1, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002128:	4313      	orrs	r3, r2
         );
}
 800212a:	4618      	mov	r0, r3
 800212c:	3724      	adds	r7, #36	; 0x24
 800212e:	46bd      	mov	sp, r7
 8002130:	bc80      	pop	{r7}
 8002132:	4770      	bx	lr

08002134 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	3b01      	subs	r3, #1
 8002140:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002144:	d301      	bcc.n	800214a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002146:	2301      	movs	r3, #1
 8002148:	e00f      	b.n	800216a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800214a:	4a0a      	ldr	r2, [pc, #40]	; (8002174 <SysTick_Config+0x40>)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	3b01      	subs	r3, #1
 8002150:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002152:	210f      	movs	r1, #15
 8002154:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002158:	f7ff ff90 	bl	800207c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800215c:	4b05      	ldr	r3, [pc, #20]	; (8002174 <SysTick_Config+0x40>)
 800215e:	2200      	movs	r2, #0
 8002160:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002162:	4b04      	ldr	r3, [pc, #16]	; (8002174 <SysTick_Config+0x40>)
 8002164:	2207      	movs	r2, #7
 8002166:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	e000e010 	.word	0xe000e010

08002178 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f7ff ff2d 	bl	8001fe0 <__NVIC_SetPriorityGrouping>
}
 8002186:	bf00      	nop
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800218e:	b580      	push	{r7, lr}
 8002190:	b086      	sub	sp, #24
 8002192:	af00      	add	r7, sp, #0
 8002194:	4603      	mov	r3, r0
 8002196:	60b9      	str	r1, [r7, #8]
 8002198:	607a      	str	r2, [r7, #4]
 800219a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800219c:	2300      	movs	r3, #0
 800219e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021a0:	f7ff ff42 	bl	8002028 <__NVIC_GetPriorityGrouping>
 80021a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	68b9      	ldr	r1, [r7, #8]
 80021aa:	6978      	ldr	r0, [r7, #20]
 80021ac:	f7ff ff90 	bl	80020d0 <NVIC_EncodePriority>
 80021b0:	4602      	mov	r2, r0
 80021b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021b6:	4611      	mov	r1, r2
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7ff ff5f 	bl	800207c <__NVIC_SetPriority>
}
 80021be:	bf00      	nop
 80021c0:	3718      	adds	r7, #24
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}

080021c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021c6:	b580      	push	{r7, lr}
 80021c8:	b082      	sub	sp, #8
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	4603      	mov	r3, r0
 80021ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7ff ff35 	bl	8002044 <__NVIC_EnableIRQ>
}
 80021da:	bf00      	nop
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b082      	sub	sp, #8
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f7ff ffa2 	bl	8002134 <SysTick_Config>
 80021f0:	4603      	mov	r3, r0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
	...

080021fc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b085      	sub	sp, #20
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002204:	2300      	movs	r3, #0
 8002206:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d101      	bne.n	8002212 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e043      	b.n	800229a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	461a      	mov	r2, r3
 8002218:	4b22      	ldr	r3, [pc, #136]	; (80022a4 <HAL_DMA_Init+0xa8>)
 800221a:	4413      	add	r3, r2
 800221c:	4a22      	ldr	r2, [pc, #136]	; (80022a8 <HAL_DMA_Init+0xac>)
 800221e:	fba2 2303 	umull	r2, r3, r2, r3
 8002222:	091b      	lsrs	r3, r3, #4
 8002224:	009a      	lsls	r2, r3, #2
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a1f      	ldr	r2, [pc, #124]	; (80022ac <HAL_DMA_Init+0xb0>)
 800222e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2202      	movs	r2, #2
 8002234:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002246:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800224a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002254:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002260:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	695b      	ldr	r3, [r3, #20]
 8002266:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800226c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	69db      	ldr	r3, [r3, #28]
 8002272:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002274:	68fa      	ldr	r2, [r7, #12]
 8002276:	4313      	orrs	r3, r2
 8002278:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	68fa      	ldr	r2, [r7, #12]
 8002280:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2201      	movs	r2, #1
 800228c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3714      	adds	r7, #20
 800229e:	46bd      	mov	sp, r7
 80022a0:	bc80      	pop	{r7}
 80022a2:	4770      	bx	lr
 80022a4:	bffdfff8 	.word	0xbffdfff8
 80022a8:	cccccccd 	.word	0xcccccccd
 80022ac:	40020000 	.word	0x40020000

080022b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b086      	sub	sp, #24
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	607a      	str	r2, [r7, #4]
 80022bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022be:	2300      	movs	r3, #0
 80022c0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d101      	bne.n	80022d0 <HAL_DMA_Start_IT+0x20>
 80022cc:	2302      	movs	r3, #2
 80022ce:	e04a      	b.n	8002366 <HAL_DMA_Start_IT+0xb6>
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2201      	movs	r2, #1
 80022d4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d13a      	bne.n	8002358 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2202      	movs	r2, #2
 80022e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2200      	movs	r2, #0
 80022ee:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f022 0201 	bic.w	r2, r2, #1
 80022fe:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	68b9      	ldr	r1, [r7, #8]
 8002306:	68f8      	ldr	r0, [r7, #12]
 8002308:	f000 f9e8 	bl	80026dc <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002310:	2b00      	cmp	r3, #0
 8002312:	d008      	beq.n	8002326 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f042 020e 	orr.w	r2, r2, #14
 8002322:	601a      	str	r2, [r3, #0]
 8002324:	e00f      	b.n	8002346 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f022 0204 	bic.w	r2, r2, #4
 8002334:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f042 020a 	orr.w	r2, r2, #10
 8002344:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f042 0201 	orr.w	r2, r2, #1
 8002354:	601a      	str	r2, [r3, #0]
 8002356:	e005      	b.n	8002364 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2200      	movs	r2, #0
 800235c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002360:	2302      	movs	r3, #2
 8002362:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002364:	7dfb      	ldrb	r3, [r7, #23]
}
 8002366:	4618      	mov	r0, r3
 8002368:	3718      	adds	r7, #24
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}

0800236e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800236e:	b480      	push	{r7}
 8002370:	b085      	sub	sp, #20
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002376:	2300      	movs	r3, #0
 8002378:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002380:	2b02      	cmp	r3, #2
 8002382:	d008      	beq.n	8002396 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2204      	movs	r2, #4
 8002388:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e020      	b.n	80023d8 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f022 020e 	bic.w	r2, r2, #14
 80023a4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f022 0201 	bic.w	r2, r2, #1
 80023b4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023be:	2101      	movs	r1, #1
 80023c0:	fa01 f202 	lsl.w	r2, r1, r2
 80023c4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2201      	movs	r2, #1
 80023ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80023d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3714      	adds	r7, #20
 80023dc:	46bd      	mov	sp, r7
 80023de:	bc80      	pop	{r7}
 80023e0:	4770      	bx	lr
	...

080023e4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023ec:	2300      	movs	r3, #0
 80023ee:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d005      	beq.n	8002406 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2204      	movs	r2, #4
 80023fe:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	73fb      	strb	r3, [r7, #15]
 8002404:	e051      	b.n	80024aa <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f022 020e 	bic.w	r2, r2, #14
 8002414:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f022 0201 	bic.w	r2, r2, #1
 8002424:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a22      	ldr	r2, [pc, #136]	; (80024b4 <HAL_DMA_Abort_IT+0xd0>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d029      	beq.n	8002484 <HAL_DMA_Abort_IT+0xa0>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a20      	ldr	r2, [pc, #128]	; (80024b8 <HAL_DMA_Abort_IT+0xd4>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d022      	beq.n	8002480 <HAL_DMA_Abort_IT+0x9c>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a1f      	ldr	r2, [pc, #124]	; (80024bc <HAL_DMA_Abort_IT+0xd8>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d01a      	beq.n	800247a <HAL_DMA_Abort_IT+0x96>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a1d      	ldr	r2, [pc, #116]	; (80024c0 <HAL_DMA_Abort_IT+0xdc>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d012      	beq.n	8002474 <HAL_DMA_Abort_IT+0x90>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a1c      	ldr	r2, [pc, #112]	; (80024c4 <HAL_DMA_Abort_IT+0xe0>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d00a      	beq.n	800246e <HAL_DMA_Abort_IT+0x8a>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a1a      	ldr	r2, [pc, #104]	; (80024c8 <HAL_DMA_Abort_IT+0xe4>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d102      	bne.n	8002468 <HAL_DMA_Abort_IT+0x84>
 8002462:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002466:	e00e      	b.n	8002486 <HAL_DMA_Abort_IT+0xa2>
 8002468:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800246c:	e00b      	b.n	8002486 <HAL_DMA_Abort_IT+0xa2>
 800246e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002472:	e008      	b.n	8002486 <HAL_DMA_Abort_IT+0xa2>
 8002474:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002478:	e005      	b.n	8002486 <HAL_DMA_Abort_IT+0xa2>
 800247a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800247e:	e002      	b.n	8002486 <HAL_DMA_Abort_IT+0xa2>
 8002480:	2310      	movs	r3, #16
 8002482:	e000      	b.n	8002486 <HAL_DMA_Abort_IT+0xa2>
 8002484:	2301      	movs	r3, #1
 8002486:	4a11      	ldr	r2, [pc, #68]	; (80024cc <HAL_DMA_Abort_IT+0xe8>)
 8002488:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2201      	movs	r2, #1
 800248e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d003      	beq.n	80024aa <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	4798      	blx	r3
    } 
  }
  return status;
 80024aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3710      	adds	r7, #16
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	40020008 	.word	0x40020008
 80024b8:	4002001c 	.word	0x4002001c
 80024bc:	40020030 	.word	0x40020030
 80024c0:	40020044 	.word	0x40020044
 80024c4:	40020058 	.word	0x40020058
 80024c8:	4002006c 	.word	0x4002006c
 80024cc:	40020000 	.word	0x40020000

080024d0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ec:	2204      	movs	r2, #4
 80024ee:	409a      	lsls	r2, r3
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	4013      	ands	r3, r2
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d04f      	beq.n	8002598 <HAL_DMA_IRQHandler+0xc8>
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	f003 0304 	and.w	r3, r3, #4
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d04a      	beq.n	8002598 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0320 	and.w	r3, r3, #32
 800250c:	2b00      	cmp	r3, #0
 800250e:	d107      	bne.n	8002520 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f022 0204 	bic.w	r2, r2, #4
 800251e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a66      	ldr	r2, [pc, #408]	; (80026c0 <HAL_DMA_IRQHandler+0x1f0>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d029      	beq.n	800257e <HAL_DMA_IRQHandler+0xae>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a65      	ldr	r2, [pc, #404]	; (80026c4 <HAL_DMA_IRQHandler+0x1f4>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d022      	beq.n	800257a <HAL_DMA_IRQHandler+0xaa>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a63      	ldr	r2, [pc, #396]	; (80026c8 <HAL_DMA_IRQHandler+0x1f8>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d01a      	beq.n	8002574 <HAL_DMA_IRQHandler+0xa4>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a62      	ldr	r2, [pc, #392]	; (80026cc <HAL_DMA_IRQHandler+0x1fc>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d012      	beq.n	800256e <HAL_DMA_IRQHandler+0x9e>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a60      	ldr	r2, [pc, #384]	; (80026d0 <HAL_DMA_IRQHandler+0x200>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d00a      	beq.n	8002568 <HAL_DMA_IRQHandler+0x98>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a5f      	ldr	r2, [pc, #380]	; (80026d4 <HAL_DMA_IRQHandler+0x204>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d102      	bne.n	8002562 <HAL_DMA_IRQHandler+0x92>
 800255c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002560:	e00e      	b.n	8002580 <HAL_DMA_IRQHandler+0xb0>
 8002562:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002566:	e00b      	b.n	8002580 <HAL_DMA_IRQHandler+0xb0>
 8002568:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800256c:	e008      	b.n	8002580 <HAL_DMA_IRQHandler+0xb0>
 800256e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002572:	e005      	b.n	8002580 <HAL_DMA_IRQHandler+0xb0>
 8002574:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002578:	e002      	b.n	8002580 <HAL_DMA_IRQHandler+0xb0>
 800257a:	2340      	movs	r3, #64	; 0x40
 800257c:	e000      	b.n	8002580 <HAL_DMA_IRQHandler+0xb0>
 800257e:	2304      	movs	r3, #4
 8002580:	4a55      	ldr	r2, [pc, #340]	; (80026d8 <HAL_DMA_IRQHandler+0x208>)
 8002582:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002588:	2b00      	cmp	r3, #0
 800258a:	f000 8094 	beq.w	80026b6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002596:	e08e      	b.n	80026b6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259c:	2202      	movs	r2, #2
 800259e:	409a      	lsls	r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	4013      	ands	r3, r2
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d056      	beq.n	8002656 <HAL_DMA_IRQHandler+0x186>
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d051      	beq.n	8002656 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0320 	and.w	r3, r3, #32
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d10b      	bne.n	80025d8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f022 020a 	bic.w	r2, r2, #10
 80025ce:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2201      	movs	r2, #1
 80025d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a38      	ldr	r2, [pc, #224]	; (80026c0 <HAL_DMA_IRQHandler+0x1f0>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d029      	beq.n	8002636 <HAL_DMA_IRQHandler+0x166>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a37      	ldr	r2, [pc, #220]	; (80026c4 <HAL_DMA_IRQHandler+0x1f4>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d022      	beq.n	8002632 <HAL_DMA_IRQHandler+0x162>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a35      	ldr	r2, [pc, #212]	; (80026c8 <HAL_DMA_IRQHandler+0x1f8>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d01a      	beq.n	800262c <HAL_DMA_IRQHandler+0x15c>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a34      	ldr	r2, [pc, #208]	; (80026cc <HAL_DMA_IRQHandler+0x1fc>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d012      	beq.n	8002626 <HAL_DMA_IRQHandler+0x156>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a32      	ldr	r2, [pc, #200]	; (80026d0 <HAL_DMA_IRQHandler+0x200>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d00a      	beq.n	8002620 <HAL_DMA_IRQHandler+0x150>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a31      	ldr	r2, [pc, #196]	; (80026d4 <HAL_DMA_IRQHandler+0x204>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d102      	bne.n	800261a <HAL_DMA_IRQHandler+0x14a>
 8002614:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002618:	e00e      	b.n	8002638 <HAL_DMA_IRQHandler+0x168>
 800261a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800261e:	e00b      	b.n	8002638 <HAL_DMA_IRQHandler+0x168>
 8002620:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002624:	e008      	b.n	8002638 <HAL_DMA_IRQHandler+0x168>
 8002626:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800262a:	e005      	b.n	8002638 <HAL_DMA_IRQHandler+0x168>
 800262c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002630:	e002      	b.n	8002638 <HAL_DMA_IRQHandler+0x168>
 8002632:	2320      	movs	r3, #32
 8002634:	e000      	b.n	8002638 <HAL_DMA_IRQHandler+0x168>
 8002636:	2302      	movs	r3, #2
 8002638:	4a27      	ldr	r2, [pc, #156]	; (80026d8 <HAL_DMA_IRQHandler+0x208>)
 800263a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002648:	2b00      	cmp	r3, #0
 800264a:	d034      	beq.n	80026b6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002654:	e02f      	b.n	80026b6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265a:	2208      	movs	r2, #8
 800265c:	409a      	lsls	r2, r3
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	4013      	ands	r3, r2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d028      	beq.n	80026b8 <HAL_DMA_IRQHandler+0x1e8>
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	f003 0308 	and.w	r3, r3, #8
 800266c:	2b00      	cmp	r3, #0
 800266e:	d023      	beq.n	80026b8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f022 020e 	bic.w	r2, r2, #14
 800267e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002688:	2101      	movs	r1, #1
 800268a:	fa01 f202 	lsl.w	r2, r1, r2
 800268e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2201      	movs	r2, #1
 800269a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d004      	beq.n	80026b8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	4798      	blx	r3
    }
  }
  return;
 80026b6:	bf00      	nop
 80026b8:	bf00      	nop
}
 80026ba:	3710      	adds	r7, #16
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	40020008 	.word	0x40020008
 80026c4:	4002001c 	.word	0x4002001c
 80026c8:	40020030 	.word	0x40020030
 80026cc:	40020044 	.word	0x40020044
 80026d0:	40020058 	.word	0x40020058
 80026d4:	4002006c 	.word	0x4002006c
 80026d8:	40020000 	.word	0x40020000

080026dc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026dc:	b480      	push	{r7}
 80026de:	b085      	sub	sp, #20
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	60b9      	str	r1, [r7, #8]
 80026e6:	607a      	str	r2, [r7, #4]
 80026e8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026f2:	2101      	movs	r1, #1
 80026f4:	fa01 f202 	lsl.w	r2, r1, r2
 80026f8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	683a      	ldr	r2, [r7, #0]
 8002700:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	2b10      	cmp	r3, #16
 8002708:	d108      	bne.n	800271c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	68ba      	ldr	r2, [r7, #8]
 8002718:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800271a:	e007      	b.n	800272c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	68ba      	ldr	r2, [r7, #8]
 8002722:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	60da      	str	r2, [r3, #12]
}
 800272c:	bf00      	nop
 800272e:	3714      	adds	r7, #20
 8002730:	46bd      	mov	sp, r7
 8002732:	bc80      	pop	{r7}
 8002734:	4770      	bx	lr
	...

08002738 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002738:	b480      	push	{r7}
 800273a:	b08b      	sub	sp, #44	; 0x2c
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002742:	2300      	movs	r3, #0
 8002744:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002746:	2300      	movs	r3, #0
 8002748:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800274a:	e127      	b.n	800299c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800274c:	2201      	movs	r2, #1
 800274e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	69fa      	ldr	r2, [r7, #28]
 800275c:	4013      	ands	r3, r2
 800275e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	429a      	cmp	r2, r3
 8002766:	f040 8116 	bne.w	8002996 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	2b12      	cmp	r3, #18
 8002770:	d034      	beq.n	80027dc <HAL_GPIO_Init+0xa4>
 8002772:	2b12      	cmp	r3, #18
 8002774:	d80d      	bhi.n	8002792 <HAL_GPIO_Init+0x5a>
 8002776:	2b02      	cmp	r3, #2
 8002778:	d02b      	beq.n	80027d2 <HAL_GPIO_Init+0x9a>
 800277a:	2b02      	cmp	r3, #2
 800277c:	d804      	bhi.n	8002788 <HAL_GPIO_Init+0x50>
 800277e:	2b00      	cmp	r3, #0
 8002780:	d031      	beq.n	80027e6 <HAL_GPIO_Init+0xae>
 8002782:	2b01      	cmp	r3, #1
 8002784:	d01c      	beq.n	80027c0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002786:	e048      	b.n	800281a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002788:	2b03      	cmp	r3, #3
 800278a:	d043      	beq.n	8002814 <HAL_GPIO_Init+0xdc>
 800278c:	2b11      	cmp	r3, #17
 800278e:	d01b      	beq.n	80027c8 <HAL_GPIO_Init+0x90>
          break;
 8002790:	e043      	b.n	800281a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002792:	4a89      	ldr	r2, [pc, #548]	; (80029b8 <HAL_GPIO_Init+0x280>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d026      	beq.n	80027e6 <HAL_GPIO_Init+0xae>
 8002798:	4a87      	ldr	r2, [pc, #540]	; (80029b8 <HAL_GPIO_Init+0x280>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d806      	bhi.n	80027ac <HAL_GPIO_Init+0x74>
 800279e:	4a87      	ldr	r2, [pc, #540]	; (80029bc <HAL_GPIO_Init+0x284>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d020      	beq.n	80027e6 <HAL_GPIO_Init+0xae>
 80027a4:	4a86      	ldr	r2, [pc, #536]	; (80029c0 <HAL_GPIO_Init+0x288>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d01d      	beq.n	80027e6 <HAL_GPIO_Init+0xae>
          break;
 80027aa:	e036      	b.n	800281a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80027ac:	4a85      	ldr	r2, [pc, #532]	; (80029c4 <HAL_GPIO_Init+0x28c>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d019      	beq.n	80027e6 <HAL_GPIO_Init+0xae>
 80027b2:	4a85      	ldr	r2, [pc, #532]	; (80029c8 <HAL_GPIO_Init+0x290>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d016      	beq.n	80027e6 <HAL_GPIO_Init+0xae>
 80027b8:	4a84      	ldr	r2, [pc, #528]	; (80029cc <HAL_GPIO_Init+0x294>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d013      	beq.n	80027e6 <HAL_GPIO_Init+0xae>
          break;
 80027be:	e02c      	b.n	800281a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	623b      	str	r3, [r7, #32]
          break;
 80027c6:	e028      	b.n	800281a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	3304      	adds	r3, #4
 80027ce:	623b      	str	r3, [r7, #32]
          break;
 80027d0:	e023      	b.n	800281a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	3308      	adds	r3, #8
 80027d8:	623b      	str	r3, [r7, #32]
          break;
 80027da:	e01e      	b.n	800281a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	330c      	adds	r3, #12
 80027e2:	623b      	str	r3, [r7, #32]
          break;
 80027e4:	e019      	b.n	800281a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d102      	bne.n	80027f4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80027ee:	2304      	movs	r3, #4
 80027f0:	623b      	str	r3, [r7, #32]
          break;
 80027f2:	e012      	b.n	800281a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d105      	bne.n	8002808 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027fc:	2308      	movs	r3, #8
 80027fe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	69fa      	ldr	r2, [r7, #28]
 8002804:	611a      	str	r2, [r3, #16]
          break;
 8002806:	e008      	b.n	800281a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002808:	2308      	movs	r3, #8
 800280a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	69fa      	ldr	r2, [r7, #28]
 8002810:	615a      	str	r2, [r3, #20]
          break;
 8002812:	e002      	b.n	800281a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002814:	2300      	movs	r3, #0
 8002816:	623b      	str	r3, [r7, #32]
          break;
 8002818:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800281a:	69bb      	ldr	r3, [r7, #24]
 800281c:	2bff      	cmp	r3, #255	; 0xff
 800281e:	d801      	bhi.n	8002824 <HAL_GPIO_Init+0xec>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	e001      	b.n	8002828 <HAL_GPIO_Init+0xf0>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	3304      	adds	r3, #4
 8002828:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	2bff      	cmp	r3, #255	; 0xff
 800282e:	d802      	bhi.n	8002836 <HAL_GPIO_Init+0xfe>
 8002830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	e002      	b.n	800283c <HAL_GPIO_Init+0x104>
 8002836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002838:	3b08      	subs	r3, #8
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	210f      	movs	r1, #15
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	fa01 f303 	lsl.w	r3, r1, r3
 800284a:	43db      	mvns	r3, r3
 800284c:	401a      	ands	r2, r3
 800284e:	6a39      	ldr	r1, [r7, #32]
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	fa01 f303 	lsl.w	r3, r1, r3
 8002856:	431a      	orrs	r2, r3
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002864:	2b00      	cmp	r3, #0
 8002866:	f000 8096 	beq.w	8002996 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800286a:	4b59      	ldr	r3, [pc, #356]	; (80029d0 <HAL_GPIO_Init+0x298>)
 800286c:	699b      	ldr	r3, [r3, #24]
 800286e:	4a58      	ldr	r2, [pc, #352]	; (80029d0 <HAL_GPIO_Init+0x298>)
 8002870:	f043 0301 	orr.w	r3, r3, #1
 8002874:	6193      	str	r3, [r2, #24]
 8002876:	4b56      	ldr	r3, [pc, #344]	; (80029d0 <HAL_GPIO_Init+0x298>)
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	f003 0301 	and.w	r3, r3, #1
 800287e:	60bb      	str	r3, [r7, #8]
 8002880:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002882:	4a54      	ldr	r2, [pc, #336]	; (80029d4 <HAL_GPIO_Init+0x29c>)
 8002884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002886:	089b      	lsrs	r3, r3, #2
 8002888:	3302      	adds	r3, #2
 800288a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800288e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002892:	f003 0303 	and.w	r3, r3, #3
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	220f      	movs	r2, #15
 800289a:	fa02 f303 	lsl.w	r3, r2, r3
 800289e:	43db      	mvns	r3, r3
 80028a0:	68fa      	ldr	r2, [r7, #12]
 80028a2:	4013      	ands	r3, r2
 80028a4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a4b      	ldr	r2, [pc, #300]	; (80029d8 <HAL_GPIO_Init+0x2a0>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d013      	beq.n	80028d6 <HAL_GPIO_Init+0x19e>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a4a      	ldr	r2, [pc, #296]	; (80029dc <HAL_GPIO_Init+0x2a4>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d00d      	beq.n	80028d2 <HAL_GPIO_Init+0x19a>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a49      	ldr	r2, [pc, #292]	; (80029e0 <HAL_GPIO_Init+0x2a8>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d007      	beq.n	80028ce <HAL_GPIO_Init+0x196>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a48      	ldr	r2, [pc, #288]	; (80029e4 <HAL_GPIO_Init+0x2ac>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d101      	bne.n	80028ca <HAL_GPIO_Init+0x192>
 80028c6:	2303      	movs	r3, #3
 80028c8:	e006      	b.n	80028d8 <HAL_GPIO_Init+0x1a0>
 80028ca:	2304      	movs	r3, #4
 80028cc:	e004      	b.n	80028d8 <HAL_GPIO_Init+0x1a0>
 80028ce:	2302      	movs	r3, #2
 80028d0:	e002      	b.n	80028d8 <HAL_GPIO_Init+0x1a0>
 80028d2:	2301      	movs	r3, #1
 80028d4:	e000      	b.n	80028d8 <HAL_GPIO_Init+0x1a0>
 80028d6:	2300      	movs	r3, #0
 80028d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028da:	f002 0203 	and.w	r2, r2, #3
 80028de:	0092      	lsls	r2, r2, #2
 80028e0:	4093      	lsls	r3, r2
 80028e2:	68fa      	ldr	r2, [r7, #12]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80028e8:	493a      	ldr	r1, [pc, #232]	; (80029d4 <HAL_GPIO_Init+0x29c>)
 80028ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ec:	089b      	lsrs	r3, r3, #2
 80028ee:	3302      	adds	r3, #2
 80028f0:	68fa      	ldr	r2, [r7, #12]
 80028f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d006      	beq.n	8002910 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002902:	4b39      	ldr	r3, [pc, #228]	; (80029e8 <HAL_GPIO_Init+0x2b0>)
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	4938      	ldr	r1, [pc, #224]	; (80029e8 <HAL_GPIO_Init+0x2b0>)
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	4313      	orrs	r3, r2
 800290c:	600b      	str	r3, [r1, #0]
 800290e:	e006      	b.n	800291e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002910:	4b35      	ldr	r3, [pc, #212]	; (80029e8 <HAL_GPIO_Init+0x2b0>)
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	43db      	mvns	r3, r3
 8002918:	4933      	ldr	r1, [pc, #204]	; (80029e8 <HAL_GPIO_Init+0x2b0>)
 800291a:	4013      	ands	r3, r2
 800291c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d006      	beq.n	8002938 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800292a:	4b2f      	ldr	r3, [pc, #188]	; (80029e8 <HAL_GPIO_Init+0x2b0>)
 800292c:	685a      	ldr	r2, [r3, #4]
 800292e:	492e      	ldr	r1, [pc, #184]	; (80029e8 <HAL_GPIO_Init+0x2b0>)
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	4313      	orrs	r3, r2
 8002934:	604b      	str	r3, [r1, #4]
 8002936:	e006      	b.n	8002946 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002938:	4b2b      	ldr	r3, [pc, #172]	; (80029e8 <HAL_GPIO_Init+0x2b0>)
 800293a:	685a      	ldr	r2, [r3, #4]
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	43db      	mvns	r3, r3
 8002940:	4929      	ldr	r1, [pc, #164]	; (80029e8 <HAL_GPIO_Init+0x2b0>)
 8002942:	4013      	ands	r3, r2
 8002944:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d006      	beq.n	8002960 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002952:	4b25      	ldr	r3, [pc, #148]	; (80029e8 <HAL_GPIO_Init+0x2b0>)
 8002954:	689a      	ldr	r2, [r3, #8]
 8002956:	4924      	ldr	r1, [pc, #144]	; (80029e8 <HAL_GPIO_Init+0x2b0>)
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	4313      	orrs	r3, r2
 800295c:	608b      	str	r3, [r1, #8]
 800295e:	e006      	b.n	800296e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002960:	4b21      	ldr	r3, [pc, #132]	; (80029e8 <HAL_GPIO_Init+0x2b0>)
 8002962:	689a      	ldr	r2, [r3, #8]
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	43db      	mvns	r3, r3
 8002968:	491f      	ldr	r1, [pc, #124]	; (80029e8 <HAL_GPIO_Init+0x2b0>)
 800296a:	4013      	ands	r3, r2
 800296c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d006      	beq.n	8002988 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800297a:	4b1b      	ldr	r3, [pc, #108]	; (80029e8 <HAL_GPIO_Init+0x2b0>)
 800297c:	68da      	ldr	r2, [r3, #12]
 800297e:	491a      	ldr	r1, [pc, #104]	; (80029e8 <HAL_GPIO_Init+0x2b0>)
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	4313      	orrs	r3, r2
 8002984:	60cb      	str	r3, [r1, #12]
 8002986:	e006      	b.n	8002996 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002988:	4b17      	ldr	r3, [pc, #92]	; (80029e8 <HAL_GPIO_Init+0x2b0>)
 800298a:	68da      	ldr	r2, [r3, #12]
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	43db      	mvns	r3, r3
 8002990:	4915      	ldr	r1, [pc, #84]	; (80029e8 <HAL_GPIO_Init+0x2b0>)
 8002992:	4013      	ands	r3, r2
 8002994:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002998:	3301      	adds	r3, #1
 800299a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a2:	fa22 f303 	lsr.w	r3, r2, r3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	f47f aed0 	bne.w	800274c <HAL_GPIO_Init+0x14>
  }
}
 80029ac:	bf00      	nop
 80029ae:	372c      	adds	r7, #44	; 0x2c
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bc80      	pop	{r7}
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	10210000 	.word	0x10210000
 80029bc:	10110000 	.word	0x10110000
 80029c0:	10120000 	.word	0x10120000
 80029c4:	10310000 	.word	0x10310000
 80029c8:	10320000 	.word	0x10320000
 80029cc:	10220000 	.word	0x10220000
 80029d0:	40021000 	.word	0x40021000
 80029d4:	40010000 	.word	0x40010000
 80029d8:	40010800 	.word	0x40010800
 80029dc:	40010c00 	.word	0x40010c00
 80029e0:	40011000 	.word	0x40011000
 80029e4:	40011400 	.word	0x40011400
 80029e8:	40010400 	.word	0x40010400

080029ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b085      	sub	sp, #20
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	460b      	mov	r3, r1
 80029f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	689a      	ldr	r2, [r3, #8]
 80029fc:	887b      	ldrh	r3, [r7, #2]
 80029fe:	4013      	ands	r3, r2
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d002      	beq.n	8002a0a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a04:	2301      	movs	r3, #1
 8002a06:	73fb      	strb	r3, [r7, #15]
 8002a08:	e001      	b.n	8002a0e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3714      	adds	r7, #20
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bc80      	pop	{r7}
 8002a18:	4770      	bx	lr

08002a1a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a1a:	b480      	push	{r7}
 8002a1c:	b083      	sub	sp, #12
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
 8002a22:	460b      	mov	r3, r1
 8002a24:	807b      	strh	r3, [r7, #2]
 8002a26:	4613      	mov	r3, r2
 8002a28:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a2a:	787b      	ldrb	r3, [r7, #1]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d003      	beq.n	8002a38 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a30:	887a      	ldrh	r2, [r7, #2]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002a36:	e003      	b.n	8002a40 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a38:	887b      	ldrh	r3, [r7, #2]
 8002a3a:	041a      	lsls	r2, r3, #16
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	611a      	str	r2, [r3, #16]
}
 8002a40:	bf00      	nop
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bc80      	pop	{r7}
 8002a48:	4770      	bx	lr

08002a4a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	b083      	sub	sp, #12
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
 8002a52:	460b      	mov	r3, r1
 8002a54:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	68da      	ldr	r2, [r3, #12]
 8002a5a:	887b      	ldrh	r3, [r7, #2]
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d003      	beq.n	8002a6a <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a62:	887a      	ldrh	r2, [r7, #2]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8002a68:	e002      	b.n	8002a70 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a6a:	887a      	ldrh	r2, [r7, #2]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	611a      	str	r2, [r3, #16]
}
 8002a70:	bf00      	nop
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bc80      	pop	{r7}
 8002a78:	4770      	bx	lr
	...

08002a7c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	4603      	mov	r3, r0
 8002a84:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002a86:	4b08      	ldr	r3, [pc, #32]	; (8002aa8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a88:	695a      	ldr	r2, [r3, #20]
 8002a8a:	88fb      	ldrh	r3, [r7, #6]
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d006      	beq.n	8002aa0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a92:	4a05      	ldr	r2, [pc, #20]	; (8002aa8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a94:	88fb      	ldrh	r3, [r7, #6]
 8002a96:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a98:	88fb      	ldrh	r3, [r7, #6]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7fe f842 	bl	8000b24 <HAL_GPIO_EXTI_Callback>
  }
}
 8002aa0:	bf00      	nop
 8002aa2:	3708      	adds	r7, #8
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	40010400 	.word	0x40010400

08002aac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b086      	sub	sp, #24
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d101      	bne.n	8002abe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e26c      	b.n	8002f98 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	f000 8087 	beq.w	8002bda <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002acc:	4b92      	ldr	r3, [pc, #584]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f003 030c 	and.w	r3, r3, #12
 8002ad4:	2b04      	cmp	r3, #4
 8002ad6:	d00c      	beq.n	8002af2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ad8:	4b8f      	ldr	r3, [pc, #572]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f003 030c 	and.w	r3, r3, #12
 8002ae0:	2b08      	cmp	r3, #8
 8002ae2:	d112      	bne.n	8002b0a <HAL_RCC_OscConfig+0x5e>
 8002ae4:	4b8c      	ldr	r3, [pc, #560]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002af0:	d10b      	bne.n	8002b0a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002af2:	4b89      	ldr	r3, [pc, #548]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d06c      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x12c>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d168      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e246      	b.n	8002f98 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b12:	d106      	bne.n	8002b22 <HAL_RCC_OscConfig+0x76>
 8002b14:	4b80      	ldr	r3, [pc, #512]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a7f      	ldr	r2, [pc, #508]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002b1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b1e:	6013      	str	r3, [r2, #0]
 8002b20:	e02e      	b.n	8002b80 <HAL_RCC_OscConfig+0xd4>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d10c      	bne.n	8002b44 <HAL_RCC_OscConfig+0x98>
 8002b2a:	4b7b      	ldr	r3, [pc, #492]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a7a      	ldr	r2, [pc, #488]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002b30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b34:	6013      	str	r3, [r2, #0]
 8002b36:	4b78      	ldr	r3, [pc, #480]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a77      	ldr	r2, [pc, #476]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002b3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b40:	6013      	str	r3, [r2, #0]
 8002b42:	e01d      	b.n	8002b80 <HAL_RCC_OscConfig+0xd4>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b4c:	d10c      	bne.n	8002b68 <HAL_RCC_OscConfig+0xbc>
 8002b4e:	4b72      	ldr	r3, [pc, #456]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a71      	ldr	r2, [pc, #452]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002b54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b58:	6013      	str	r3, [r2, #0]
 8002b5a:	4b6f      	ldr	r3, [pc, #444]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a6e      	ldr	r2, [pc, #440]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002b60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b64:	6013      	str	r3, [r2, #0]
 8002b66:	e00b      	b.n	8002b80 <HAL_RCC_OscConfig+0xd4>
 8002b68:	4b6b      	ldr	r3, [pc, #428]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a6a      	ldr	r2, [pc, #424]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002b6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b72:	6013      	str	r3, [r2, #0]
 8002b74:	4b68      	ldr	r3, [pc, #416]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a67      	ldr	r2, [pc, #412]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002b7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b7e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d013      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b88:	f7fe fc94 	bl	80014b4 <HAL_GetTick>
 8002b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b8e:	e008      	b.n	8002ba2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b90:	f7fe fc90 	bl	80014b4 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b64      	cmp	r3, #100	; 0x64
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e1fa      	b.n	8002f98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ba2:	4b5d      	ldr	r3, [pc, #372]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d0f0      	beq.n	8002b90 <HAL_RCC_OscConfig+0xe4>
 8002bae:	e014      	b.n	8002bda <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb0:	f7fe fc80 	bl	80014b4 <HAL_GetTick>
 8002bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bb6:	e008      	b.n	8002bca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bb8:	f7fe fc7c 	bl	80014b4 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b64      	cmp	r3, #100	; 0x64
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e1e6      	b.n	8002f98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bca:	4b53      	ldr	r3, [pc, #332]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d1f0      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x10c>
 8002bd6:	e000      	b.n	8002bda <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0302 	and.w	r3, r3, #2
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d063      	beq.n	8002cae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002be6:	4b4c      	ldr	r3, [pc, #304]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f003 030c 	and.w	r3, r3, #12
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d00b      	beq.n	8002c0a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002bf2:	4b49      	ldr	r3, [pc, #292]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f003 030c 	and.w	r3, r3, #12
 8002bfa:	2b08      	cmp	r3, #8
 8002bfc:	d11c      	bne.n	8002c38 <HAL_RCC_OscConfig+0x18c>
 8002bfe:	4b46      	ldr	r3, [pc, #280]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d116      	bne.n	8002c38 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c0a:	4b43      	ldr	r3, [pc, #268]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d005      	beq.n	8002c22 <HAL_RCC_OscConfig+0x176>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d001      	beq.n	8002c22 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e1ba      	b.n	8002f98 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c22:	4b3d      	ldr	r3, [pc, #244]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	695b      	ldr	r3, [r3, #20]
 8002c2e:	00db      	lsls	r3, r3, #3
 8002c30:	4939      	ldr	r1, [pc, #228]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c36:	e03a      	b.n	8002cae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d020      	beq.n	8002c82 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c40:	4b36      	ldr	r3, [pc, #216]	; (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002c42:	2201      	movs	r2, #1
 8002c44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c46:	f7fe fc35 	bl	80014b4 <HAL_GetTick>
 8002c4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c4c:	e008      	b.n	8002c60 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c4e:	f7fe fc31 	bl	80014b4 <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d901      	bls.n	8002c60 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e19b      	b.n	8002f98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c60:	4b2d      	ldr	r3, [pc, #180]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0302 	and.w	r3, r3, #2
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d0f0      	beq.n	8002c4e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c6c:	4b2a      	ldr	r3, [pc, #168]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	695b      	ldr	r3, [r3, #20]
 8002c78:	00db      	lsls	r3, r3, #3
 8002c7a:	4927      	ldr	r1, [pc, #156]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	600b      	str	r3, [r1, #0]
 8002c80:	e015      	b.n	8002cae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c82:	4b26      	ldr	r3, [pc, #152]	; (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c88:	f7fe fc14 	bl	80014b4 <HAL_GetTick>
 8002c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c8e:	e008      	b.n	8002ca2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c90:	f7fe fc10 	bl	80014b4 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e17a      	b.n	8002f98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ca2:	4b1d      	ldr	r3, [pc, #116]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d1f0      	bne.n	8002c90 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0308 	and.w	r3, r3, #8
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d03a      	beq.n	8002d30 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d019      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cc2:	4b17      	ldr	r3, [pc, #92]	; (8002d20 <HAL_RCC_OscConfig+0x274>)
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cc8:	f7fe fbf4 	bl	80014b4 <HAL_GetTick>
 8002ccc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cce:	e008      	b.n	8002ce2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cd0:	f7fe fbf0 	bl	80014b4 <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e15a      	b.n	8002f98 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ce2:	4b0d      	ldr	r3, [pc, #52]	; (8002d18 <HAL_RCC_OscConfig+0x26c>)
 8002ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d0f0      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002cee:	2001      	movs	r0, #1
 8002cf0:	f000 fada 	bl	80032a8 <RCC_Delay>
 8002cf4:	e01c      	b.n	8002d30 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cf6:	4b0a      	ldr	r3, [pc, #40]	; (8002d20 <HAL_RCC_OscConfig+0x274>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cfc:	f7fe fbda 	bl	80014b4 <HAL_GetTick>
 8002d00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d02:	e00f      	b.n	8002d24 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d04:	f7fe fbd6 	bl	80014b4 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d908      	bls.n	8002d24 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e140      	b.n	8002f98 <HAL_RCC_OscConfig+0x4ec>
 8002d16:	bf00      	nop
 8002d18:	40021000 	.word	0x40021000
 8002d1c:	42420000 	.word	0x42420000
 8002d20:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d24:	4b9e      	ldr	r3, [pc, #632]	; (8002fa0 <HAL_RCC_OscConfig+0x4f4>)
 8002d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d1e9      	bne.n	8002d04 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0304 	and.w	r3, r3, #4
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	f000 80a6 	beq.w	8002e8a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d42:	4b97      	ldr	r3, [pc, #604]	; (8002fa0 <HAL_RCC_OscConfig+0x4f4>)
 8002d44:	69db      	ldr	r3, [r3, #28]
 8002d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d10d      	bne.n	8002d6a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d4e:	4b94      	ldr	r3, [pc, #592]	; (8002fa0 <HAL_RCC_OscConfig+0x4f4>)
 8002d50:	69db      	ldr	r3, [r3, #28]
 8002d52:	4a93      	ldr	r2, [pc, #588]	; (8002fa0 <HAL_RCC_OscConfig+0x4f4>)
 8002d54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d58:	61d3      	str	r3, [r2, #28]
 8002d5a:	4b91      	ldr	r3, [pc, #580]	; (8002fa0 <HAL_RCC_OscConfig+0x4f4>)
 8002d5c:	69db      	ldr	r3, [r3, #28]
 8002d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d62:	60bb      	str	r3, [r7, #8]
 8002d64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d66:	2301      	movs	r3, #1
 8002d68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d6a:	4b8e      	ldr	r3, [pc, #568]	; (8002fa4 <HAL_RCC_OscConfig+0x4f8>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d118      	bne.n	8002da8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d76:	4b8b      	ldr	r3, [pc, #556]	; (8002fa4 <HAL_RCC_OscConfig+0x4f8>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a8a      	ldr	r2, [pc, #552]	; (8002fa4 <HAL_RCC_OscConfig+0x4f8>)
 8002d7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d82:	f7fe fb97 	bl	80014b4 <HAL_GetTick>
 8002d86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d88:	e008      	b.n	8002d9c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d8a:	f7fe fb93 	bl	80014b4 <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	2b64      	cmp	r3, #100	; 0x64
 8002d96:	d901      	bls.n	8002d9c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e0fd      	b.n	8002f98 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d9c:	4b81      	ldr	r3, [pc, #516]	; (8002fa4 <HAL_RCC_OscConfig+0x4f8>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d0f0      	beq.n	8002d8a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d106      	bne.n	8002dbe <HAL_RCC_OscConfig+0x312>
 8002db0:	4b7b      	ldr	r3, [pc, #492]	; (8002fa0 <HAL_RCC_OscConfig+0x4f4>)
 8002db2:	6a1b      	ldr	r3, [r3, #32]
 8002db4:	4a7a      	ldr	r2, [pc, #488]	; (8002fa0 <HAL_RCC_OscConfig+0x4f4>)
 8002db6:	f043 0301 	orr.w	r3, r3, #1
 8002dba:	6213      	str	r3, [r2, #32]
 8002dbc:	e02d      	b.n	8002e1a <HAL_RCC_OscConfig+0x36e>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d10c      	bne.n	8002de0 <HAL_RCC_OscConfig+0x334>
 8002dc6:	4b76      	ldr	r3, [pc, #472]	; (8002fa0 <HAL_RCC_OscConfig+0x4f4>)
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
 8002dca:	4a75      	ldr	r2, [pc, #468]	; (8002fa0 <HAL_RCC_OscConfig+0x4f4>)
 8002dcc:	f023 0301 	bic.w	r3, r3, #1
 8002dd0:	6213      	str	r3, [r2, #32]
 8002dd2:	4b73      	ldr	r3, [pc, #460]	; (8002fa0 <HAL_RCC_OscConfig+0x4f4>)
 8002dd4:	6a1b      	ldr	r3, [r3, #32]
 8002dd6:	4a72      	ldr	r2, [pc, #456]	; (8002fa0 <HAL_RCC_OscConfig+0x4f4>)
 8002dd8:	f023 0304 	bic.w	r3, r3, #4
 8002ddc:	6213      	str	r3, [r2, #32]
 8002dde:	e01c      	b.n	8002e1a <HAL_RCC_OscConfig+0x36e>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	2b05      	cmp	r3, #5
 8002de6:	d10c      	bne.n	8002e02 <HAL_RCC_OscConfig+0x356>
 8002de8:	4b6d      	ldr	r3, [pc, #436]	; (8002fa0 <HAL_RCC_OscConfig+0x4f4>)
 8002dea:	6a1b      	ldr	r3, [r3, #32]
 8002dec:	4a6c      	ldr	r2, [pc, #432]	; (8002fa0 <HAL_RCC_OscConfig+0x4f4>)
 8002dee:	f043 0304 	orr.w	r3, r3, #4
 8002df2:	6213      	str	r3, [r2, #32]
 8002df4:	4b6a      	ldr	r3, [pc, #424]	; (8002fa0 <HAL_RCC_OscConfig+0x4f4>)
 8002df6:	6a1b      	ldr	r3, [r3, #32]
 8002df8:	4a69      	ldr	r2, [pc, #420]	; (8002fa0 <HAL_RCC_OscConfig+0x4f4>)
 8002dfa:	f043 0301 	orr.w	r3, r3, #1
 8002dfe:	6213      	str	r3, [r2, #32]
 8002e00:	e00b      	b.n	8002e1a <HAL_RCC_OscConfig+0x36e>
 8002e02:	4b67      	ldr	r3, [pc, #412]	; (8002fa0 <HAL_RCC_OscConfig+0x4f4>)
 8002e04:	6a1b      	ldr	r3, [r3, #32]
 8002e06:	4a66      	ldr	r2, [pc, #408]	; (8002fa0 <HAL_RCC_OscConfig+0x4f4>)
 8002e08:	f023 0301 	bic.w	r3, r3, #1
 8002e0c:	6213      	str	r3, [r2, #32]
 8002e0e:	4b64      	ldr	r3, [pc, #400]	; (8002fa0 <HAL_RCC_OscConfig+0x4f4>)
 8002e10:	6a1b      	ldr	r3, [r3, #32]
 8002e12:	4a63      	ldr	r2, [pc, #396]	; (8002fa0 <HAL_RCC_OscConfig+0x4f4>)
 8002e14:	f023 0304 	bic.w	r3, r3, #4
 8002e18:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d015      	beq.n	8002e4e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e22:	f7fe fb47 	bl	80014b4 <HAL_GetTick>
 8002e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e28:	e00a      	b.n	8002e40 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e2a:	f7fe fb43 	bl	80014b4 <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d901      	bls.n	8002e40 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e0ab      	b.n	8002f98 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e40:	4b57      	ldr	r3, [pc, #348]	; (8002fa0 <HAL_RCC_OscConfig+0x4f4>)
 8002e42:	6a1b      	ldr	r3, [r3, #32]
 8002e44:	f003 0302 	and.w	r3, r3, #2
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d0ee      	beq.n	8002e2a <HAL_RCC_OscConfig+0x37e>
 8002e4c:	e014      	b.n	8002e78 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e4e:	f7fe fb31 	bl	80014b4 <HAL_GetTick>
 8002e52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e54:	e00a      	b.n	8002e6c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e56:	f7fe fb2d 	bl	80014b4 <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d901      	bls.n	8002e6c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e095      	b.n	8002f98 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e6c:	4b4c      	ldr	r3, [pc, #304]	; (8002fa0 <HAL_RCC_OscConfig+0x4f4>)
 8002e6e:	6a1b      	ldr	r3, [r3, #32]
 8002e70:	f003 0302 	and.w	r3, r3, #2
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d1ee      	bne.n	8002e56 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e78:	7dfb      	ldrb	r3, [r7, #23]
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d105      	bne.n	8002e8a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e7e:	4b48      	ldr	r3, [pc, #288]	; (8002fa0 <HAL_RCC_OscConfig+0x4f4>)
 8002e80:	69db      	ldr	r3, [r3, #28]
 8002e82:	4a47      	ldr	r2, [pc, #284]	; (8002fa0 <HAL_RCC_OscConfig+0x4f4>)
 8002e84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e88:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	69db      	ldr	r3, [r3, #28]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	f000 8081 	beq.w	8002f96 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e94:	4b42      	ldr	r3, [pc, #264]	; (8002fa0 <HAL_RCC_OscConfig+0x4f4>)
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f003 030c 	and.w	r3, r3, #12
 8002e9c:	2b08      	cmp	r3, #8
 8002e9e:	d061      	beq.n	8002f64 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	69db      	ldr	r3, [r3, #28]
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d146      	bne.n	8002f36 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ea8:	4b3f      	ldr	r3, [pc, #252]	; (8002fa8 <HAL_RCC_OscConfig+0x4fc>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eae:	f7fe fb01 	bl	80014b4 <HAL_GetTick>
 8002eb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eb4:	e008      	b.n	8002ec8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eb6:	f7fe fafd 	bl	80014b4 <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d901      	bls.n	8002ec8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e067      	b.n	8002f98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ec8:	4b35      	ldr	r3, [pc, #212]	; (8002fa0 <HAL_RCC_OscConfig+0x4f4>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d1f0      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a1b      	ldr	r3, [r3, #32]
 8002ed8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002edc:	d108      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002ede:	4b30      	ldr	r3, [pc, #192]	; (8002fa0 <HAL_RCC_OscConfig+0x4f4>)
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	492d      	ldr	r1, [pc, #180]	; (8002fa0 <HAL_RCC_OscConfig+0x4f4>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ef0:	4b2b      	ldr	r3, [pc, #172]	; (8002fa0 <HAL_RCC_OscConfig+0x4f4>)
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a19      	ldr	r1, [r3, #32]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f00:	430b      	orrs	r3, r1
 8002f02:	4927      	ldr	r1, [pc, #156]	; (8002fa0 <HAL_RCC_OscConfig+0x4f4>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f08:	4b27      	ldr	r3, [pc, #156]	; (8002fa8 <HAL_RCC_OscConfig+0x4fc>)
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f0e:	f7fe fad1 	bl	80014b4 <HAL_GetTick>
 8002f12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f14:	e008      	b.n	8002f28 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f16:	f7fe facd 	bl	80014b4 <HAL_GetTick>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d901      	bls.n	8002f28 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e037      	b.n	8002f98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f28:	4b1d      	ldr	r3, [pc, #116]	; (8002fa0 <HAL_RCC_OscConfig+0x4f4>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d0f0      	beq.n	8002f16 <HAL_RCC_OscConfig+0x46a>
 8002f34:	e02f      	b.n	8002f96 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f36:	4b1c      	ldr	r3, [pc, #112]	; (8002fa8 <HAL_RCC_OscConfig+0x4fc>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f3c:	f7fe faba 	bl	80014b4 <HAL_GetTick>
 8002f40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f42:	e008      	b.n	8002f56 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f44:	f7fe fab6 	bl	80014b4 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e020      	b.n	8002f98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f56:	4b12      	ldr	r3, [pc, #72]	; (8002fa0 <HAL_RCC_OscConfig+0x4f4>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1f0      	bne.n	8002f44 <HAL_RCC_OscConfig+0x498>
 8002f62:	e018      	b.n	8002f96 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	69db      	ldr	r3, [r3, #28]
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d101      	bne.n	8002f70 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e013      	b.n	8002f98 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f70:	4b0b      	ldr	r3, [pc, #44]	; (8002fa0 <HAL_RCC_OscConfig+0x4f4>)
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a1b      	ldr	r3, [r3, #32]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d106      	bne.n	8002f92 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d001      	beq.n	8002f96 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e000      	b.n	8002f98 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002f96:	2300      	movs	r3, #0
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3718      	adds	r7, #24
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	40021000 	.word	0x40021000
 8002fa4:	40007000 	.word	0x40007000
 8002fa8:	42420060 	.word	0x42420060

08002fac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d101      	bne.n	8002fc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e0d0      	b.n	8003162 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002fc0:	4b6a      	ldr	r3, [pc, #424]	; (800316c <HAL_RCC_ClockConfig+0x1c0>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0307 	and.w	r3, r3, #7
 8002fc8:	683a      	ldr	r2, [r7, #0]
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d910      	bls.n	8002ff0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fce:	4b67      	ldr	r3, [pc, #412]	; (800316c <HAL_RCC_ClockConfig+0x1c0>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f023 0207 	bic.w	r2, r3, #7
 8002fd6:	4965      	ldr	r1, [pc, #404]	; (800316c <HAL_RCC_ClockConfig+0x1c0>)
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fde:	4b63      	ldr	r3, [pc, #396]	; (800316c <HAL_RCC_ClockConfig+0x1c0>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0307 	and.w	r3, r3, #7
 8002fe6:	683a      	ldr	r2, [r7, #0]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d001      	beq.n	8002ff0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e0b8      	b.n	8003162 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0302 	and.w	r3, r3, #2
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d020      	beq.n	800303e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0304 	and.w	r3, r3, #4
 8003004:	2b00      	cmp	r3, #0
 8003006:	d005      	beq.n	8003014 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003008:	4b59      	ldr	r3, [pc, #356]	; (8003170 <HAL_RCC_ClockConfig+0x1c4>)
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	4a58      	ldr	r2, [pc, #352]	; (8003170 <HAL_RCC_ClockConfig+0x1c4>)
 800300e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003012:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0308 	and.w	r3, r3, #8
 800301c:	2b00      	cmp	r3, #0
 800301e:	d005      	beq.n	800302c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003020:	4b53      	ldr	r3, [pc, #332]	; (8003170 <HAL_RCC_ClockConfig+0x1c4>)
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	4a52      	ldr	r2, [pc, #328]	; (8003170 <HAL_RCC_ClockConfig+0x1c4>)
 8003026:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800302a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800302c:	4b50      	ldr	r3, [pc, #320]	; (8003170 <HAL_RCC_ClockConfig+0x1c4>)
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	494d      	ldr	r1, [pc, #308]	; (8003170 <HAL_RCC_ClockConfig+0x1c4>)
 800303a:	4313      	orrs	r3, r2
 800303c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0301 	and.w	r3, r3, #1
 8003046:	2b00      	cmp	r3, #0
 8003048:	d040      	beq.n	80030cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	2b01      	cmp	r3, #1
 8003050:	d107      	bne.n	8003062 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003052:	4b47      	ldr	r3, [pc, #284]	; (8003170 <HAL_RCC_ClockConfig+0x1c4>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d115      	bne.n	800308a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e07f      	b.n	8003162 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	2b02      	cmp	r3, #2
 8003068:	d107      	bne.n	800307a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800306a:	4b41      	ldr	r3, [pc, #260]	; (8003170 <HAL_RCC_ClockConfig+0x1c4>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d109      	bne.n	800308a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e073      	b.n	8003162 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800307a:	4b3d      	ldr	r3, [pc, #244]	; (8003170 <HAL_RCC_ClockConfig+0x1c4>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0302 	and.w	r3, r3, #2
 8003082:	2b00      	cmp	r3, #0
 8003084:	d101      	bne.n	800308a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e06b      	b.n	8003162 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800308a:	4b39      	ldr	r3, [pc, #228]	; (8003170 <HAL_RCC_ClockConfig+0x1c4>)
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f023 0203 	bic.w	r2, r3, #3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	4936      	ldr	r1, [pc, #216]	; (8003170 <HAL_RCC_ClockConfig+0x1c4>)
 8003098:	4313      	orrs	r3, r2
 800309a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800309c:	f7fe fa0a 	bl	80014b4 <HAL_GetTick>
 80030a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030a2:	e00a      	b.n	80030ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030a4:	f7fe fa06 	bl	80014b4 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e053      	b.n	8003162 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ba:	4b2d      	ldr	r3, [pc, #180]	; (8003170 <HAL_RCC_ClockConfig+0x1c4>)
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f003 020c 	and.w	r2, r3, #12
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d1eb      	bne.n	80030a4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030cc:	4b27      	ldr	r3, [pc, #156]	; (800316c <HAL_RCC_ClockConfig+0x1c0>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0307 	and.w	r3, r3, #7
 80030d4:	683a      	ldr	r2, [r7, #0]
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d210      	bcs.n	80030fc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030da:	4b24      	ldr	r3, [pc, #144]	; (800316c <HAL_RCC_ClockConfig+0x1c0>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f023 0207 	bic.w	r2, r3, #7
 80030e2:	4922      	ldr	r1, [pc, #136]	; (800316c <HAL_RCC_ClockConfig+0x1c0>)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ea:	4b20      	ldr	r3, [pc, #128]	; (800316c <HAL_RCC_ClockConfig+0x1c0>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0307 	and.w	r3, r3, #7
 80030f2:	683a      	ldr	r2, [r7, #0]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d001      	beq.n	80030fc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e032      	b.n	8003162 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0304 	and.w	r3, r3, #4
 8003104:	2b00      	cmp	r3, #0
 8003106:	d008      	beq.n	800311a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003108:	4b19      	ldr	r3, [pc, #100]	; (8003170 <HAL_RCC_ClockConfig+0x1c4>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	4916      	ldr	r1, [pc, #88]	; (8003170 <HAL_RCC_ClockConfig+0x1c4>)
 8003116:	4313      	orrs	r3, r2
 8003118:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0308 	and.w	r3, r3, #8
 8003122:	2b00      	cmp	r3, #0
 8003124:	d009      	beq.n	800313a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003126:	4b12      	ldr	r3, [pc, #72]	; (8003170 <HAL_RCC_ClockConfig+0x1c4>)
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	00db      	lsls	r3, r3, #3
 8003134:	490e      	ldr	r1, [pc, #56]	; (8003170 <HAL_RCC_ClockConfig+0x1c4>)
 8003136:	4313      	orrs	r3, r2
 8003138:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800313a:	f000 f821 	bl	8003180 <HAL_RCC_GetSysClockFreq>
 800313e:	4601      	mov	r1, r0
 8003140:	4b0b      	ldr	r3, [pc, #44]	; (8003170 <HAL_RCC_ClockConfig+0x1c4>)
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	091b      	lsrs	r3, r3, #4
 8003146:	f003 030f 	and.w	r3, r3, #15
 800314a:	4a0a      	ldr	r2, [pc, #40]	; (8003174 <HAL_RCC_ClockConfig+0x1c8>)
 800314c:	5cd3      	ldrb	r3, [r2, r3]
 800314e:	fa21 f303 	lsr.w	r3, r1, r3
 8003152:	4a09      	ldr	r2, [pc, #36]	; (8003178 <HAL_RCC_ClockConfig+0x1cc>)
 8003154:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003156:	4b09      	ldr	r3, [pc, #36]	; (800317c <HAL_RCC_ClockConfig+0x1d0>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4618      	mov	r0, r3
 800315c:	f7fe f968 	bl	8001430 <HAL_InitTick>

  return HAL_OK;
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3710      	adds	r7, #16
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	40022000 	.word	0x40022000
 8003170:	40021000 	.word	0x40021000
 8003174:	080055d4 	.word	0x080055d4
 8003178:	20000008 	.word	0x20000008
 800317c:	2000000c 	.word	0x2000000c

08003180 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003180:	b490      	push	{r4, r7}
 8003182:	b08a      	sub	sp, #40	; 0x28
 8003184:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003186:	4b2a      	ldr	r3, [pc, #168]	; (8003230 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003188:	1d3c      	adds	r4, r7, #4
 800318a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800318c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003190:	4b28      	ldr	r3, [pc, #160]	; (8003234 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003192:	881b      	ldrh	r3, [r3, #0]
 8003194:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003196:	2300      	movs	r3, #0
 8003198:	61fb      	str	r3, [r7, #28]
 800319a:	2300      	movs	r3, #0
 800319c:	61bb      	str	r3, [r7, #24]
 800319e:	2300      	movs	r3, #0
 80031a0:	627b      	str	r3, [r7, #36]	; 0x24
 80031a2:	2300      	movs	r3, #0
 80031a4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80031a6:	2300      	movs	r3, #0
 80031a8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80031aa:	4b23      	ldr	r3, [pc, #140]	; (8003238 <HAL_RCC_GetSysClockFreq+0xb8>)
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	f003 030c 	and.w	r3, r3, #12
 80031b6:	2b04      	cmp	r3, #4
 80031b8:	d002      	beq.n	80031c0 <HAL_RCC_GetSysClockFreq+0x40>
 80031ba:	2b08      	cmp	r3, #8
 80031bc:	d003      	beq.n	80031c6 <HAL_RCC_GetSysClockFreq+0x46>
 80031be:	e02d      	b.n	800321c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80031c0:	4b1e      	ldr	r3, [pc, #120]	; (800323c <HAL_RCC_GetSysClockFreq+0xbc>)
 80031c2:	623b      	str	r3, [r7, #32]
      break;
 80031c4:	e02d      	b.n	8003222 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	0c9b      	lsrs	r3, r3, #18
 80031ca:	f003 030f 	and.w	r3, r3, #15
 80031ce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80031d2:	4413      	add	r3, r2
 80031d4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80031d8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d013      	beq.n	800320c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80031e4:	4b14      	ldr	r3, [pc, #80]	; (8003238 <HAL_RCC_GetSysClockFreq+0xb8>)
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	0c5b      	lsrs	r3, r3, #17
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80031f2:	4413      	add	r3, r2
 80031f4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80031f8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	4a0f      	ldr	r2, [pc, #60]	; (800323c <HAL_RCC_GetSysClockFreq+0xbc>)
 80031fe:	fb02 f203 	mul.w	r2, r2, r3
 8003202:	69bb      	ldr	r3, [r7, #24]
 8003204:	fbb2 f3f3 	udiv	r3, r2, r3
 8003208:	627b      	str	r3, [r7, #36]	; 0x24
 800320a:	e004      	b.n	8003216 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	4a0c      	ldr	r2, [pc, #48]	; (8003240 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003210:	fb02 f303 	mul.w	r3, r2, r3
 8003214:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003218:	623b      	str	r3, [r7, #32]
      break;
 800321a:	e002      	b.n	8003222 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800321c:	4b07      	ldr	r3, [pc, #28]	; (800323c <HAL_RCC_GetSysClockFreq+0xbc>)
 800321e:	623b      	str	r3, [r7, #32]
      break;
 8003220:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003222:	6a3b      	ldr	r3, [r7, #32]
}
 8003224:	4618      	mov	r0, r3
 8003226:	3728      	adds	r7, #40	; 0x28
 8003228:	46bd      	mov	sp, r7
 800322a:	bc90      	pop	{r4, r7}
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	080055ac 	.word	0x080055ac
 8003234:	080055bc 	.word	0x080055bc
 8003238:	40021000 	.word	0x40021000
 800323c:	007a1200 	.word	0x007a1200
 8003240:	003d0900 	.word	0x003d0900

08003244 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003244:	b480      	push	{r7}
 8003246:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003248:	4b02      	ldr	r3, [pc, #8]	; (8003254 <HAL_RCC_GetHCLKFreq+0x10>)
 800324a:	681b      	ldr	r3, [r3, #0]
}
 800324c:	4618      	mov	r0, r3
 800324e:	46bd      	mov	sp, r7
 8003250:	bc80      	pop	{r7}
 8003252:	4770      	bx	lr
 8003254:	20000008 	.word	0x20000008

08003258 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800325c:	f7ff fff2 	bl	8003244 <HAL_RCC_GetHCLKFreq>
 8003260:	4601      	mov	r1, r0
 8003262:	4b05      	ldr	r3, [pc, #20]	; (8003278 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	0a1b      	lsrs	r3, r3, #8
 8003268:	f003 0307 	and.w	r3, r3, #7
 800326c:	4a03      	ldr	r2, [pc, #12]	; (800327c <HAL_RCC_GetPCLK1Freq+0x24>)
 800326e:	5cd3      	ldrb	r3, [r2, r3]
 8003270:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003274:	4618      	mov	r0, r3
 8003276:	bd80      	pop	{r7, pc}
 8003278:	40021000 	.word	0x40021000
 800327c:	080055e4 	.word	0x080055e4

08003280 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003284:	f7ff ffde 	bl	8003244 <HAL_RCC_GetHCLKFreq>
 8003288:	4601      	mov	r1, r0
 800328a:	4b05      	ldr	r3, [pc, #20]	; (80032a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	0adb      	lsrs	r3, r3, #11
 8003290:	f003 0307 	and.w	r3, r3, #7
 8003294:	4a03      	ldr	r2, [pc, #12]	; (80032a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003296:	5cd3      	ldrb	r3, [r2, r3]
 8003298:	fa21 f303 	lsr.w	r3, r1, r3
}
 800329c:	4618      	mov	r0, r3
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	40021000 	.word	0x40021000
 80032a4:	080055e4 	.word	0x080055e4

080032a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b085      	sub	sp, #20
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80032b0:	4b0a      	ldr	r3, [pc, #40]	; (80032dc <RCC_Delay+0x34>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a0a      	ldr	r2, [pc, #40]	; (80032e0 <RCC_Delay+0x38>)
 80032b6:	fba2 2303 	umull	r2, r3, r2, r3
 80032ba:	0a5b      	lsrs	r3, r3, #9
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	fb02 f303 	mul.w	r3, r2, r3
 80032c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80032c4:	bf00      	nop
  }
  while (Delay --);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	1e5a      	subs	r2, r3, #1
 80032ca:	60fa      	str	r2, [r7, #12]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d1f9      	bne.n	80032c4 <RCC_Delay+0x1c>
}
 80032d0:	bf00      	nop
 80032d2:	3714      	adds	r7, #20
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bc80      	pop	{r7}
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	20000008 	.word	0x20000008
 80032e0:	10624dd3 	.word	0x10624dd3

080032e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b086      	sub	sp, #24
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80032ec:	2300      	movs	r3, #0
 80032ee:	613b      	str	r3, [r7, #16]
 80032f0:	2300      	movs	r3, #0
 80032f2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0301 	and.w	r3, r3, #1
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d07d      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003300:	2300      	movs	r3, #0
 8003302:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003304:	4b4f      	ldr	r3, [pc, #316]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003306:	69db      	ldr	r3, [r3, #28]
 8003308:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d10d      	bne.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003310:	4b4c      	ldr	r3, [pc, #304]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003312:	69db      	ldr	r3, [r3, #28]
 8003314:	4a4b      	ldr	r2, [pc, #300]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003316:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800331a:	61d3      	str	r3, [r2, #28]
 800331c:	4b49      	ldr	r3, [pc, #292]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800331e:	69db      	ldr	r3, [r3, #28]
 8003320:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003324:	60bb      	str	r3, [r7, #8]
 8003326:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003328:	2301      	movs	r3, #1
 800332a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800332c:	4b46      	ldr	r3, [pc, #280]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003334:	2b00      	cmp	r3, #0
 8003336:	d118      	bne.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003338:	4b43      	ldr	r3, [pc, #268]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a42      	ldr	r2, [pc, #264]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800333e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003342:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003344:	f7fe f8b6 	bl	80014b4 <HAL_GetTick>
 8003348:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800334a:	e008      	b.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800334c:	f7fe f8b2 	bl	80014b4 <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	2b64      	cmp	r3, #100	; 0x64
 8003358:	d901      	bls.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e06d      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800335e:	4b3a      	ldr	r3, [pc, #232]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003366:	2b00      	cmp	r3, #0
 8003368:	d0f0      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800336a:	4b36      	ldr	r3, [pc, #216]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800336c:	6a1b      	ldr	r3, [r3, #32]
 800336e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003372:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d02e      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003382:	68fa      	ldr	r2, [r7, #12]
 8003384:	429a      	cmp	r2, r3
 8003386:	d027      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003388:	4b2e      	ldr	r3, [pc, #184]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800338a:	6a1b      	ldr	r3, [r3, #32]
 800338c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003390:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003392:	4b2e      	ldr	r3, [pc, #184]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003394:	2201      	movs	r2, #1
 8003396:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003398:	4b2c      	ldr	r3, [pc, #176]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800339a:	2200      	movs	r2, #0
 800339c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800339e:	4a29      	ldr	r2, [pc, #164]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f003 0301 	and.w	r3, r3, #1
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d014      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ae:	f7fe f881 	bl	80014b4 <HAL_GetTick>
 80033b2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033b4:	e00a      	b.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033b6:	f7fe f87d 	bl	80014b4 <HAL_GetTick>
 80033ba:	4602      	mov	r2, r0
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d901      	bls.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e036      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033cc:	4b1d      	ldr	r3, [pc, #116]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ce:	6a1b      	ldr	r3, [r3, #32]
 80033d0:	f003 0302 	and.w	r3, r3, #2
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d0ee      	beq.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033d8:	4b1a      	ldr	r3, [pc, #104]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033da:	6a1b      	ldr	r3, [r3, #32]
 80033dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	4917      	ldr	r1, [pc, #92]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80033ea:	7dfb      	ldrb	r3, [r7, #23]
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d105      	bne.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033f0:	4b14      	ldr	r3, [pc, #80]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033f2:	69db      	ldr	r3, [r3, #28]
 80033f4:	4a13      	ldr	r2, [pc, #76]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033fa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0302 	and.w	r3, r3, #2
 8003404:	2b00      	cmp	r3, #0
 8003406:	d008      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003408:	4b0e      	ldr	r3, [pc, #56]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	490b      	ldr	r1, [pc, #44]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003416:	4313      	orrs	r3, r2
 8003418:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0310 	and.w	r3, r3, #16
 8003422:	2b00      	cmp	r3, #0
 8003424:	d008      	beq.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003426:	4b07      	ldr	r3, [pc, #28]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	4904      	ldr	r1, [pc, #16]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003434:	4313      	orrs	r3, r2
 8003436:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3718      	adds	r7, #24
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	40021000 	.word	0x40021000
 8003448:	40007000 	.word	0x40007000
 800344c:	42420440 	.word	0x42420440

08003450 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003450:	b590      	push	{r4, r7, lr}
 8003452:	b08d      	sub	sp, #52	; 0x34
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003458:	4b55      	ldr	r3, [pc, #340]	; (80035b0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800345a:	f107 040c 	add.w	r4, r7, #12
 800345e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003460:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003464:	4b53      	ldr	r3, [pc, #332]	; (80035b4 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003466:	881b      	ldrh	r3, [r3, #0]
 8003468:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800346a:	2300      	movs	r3, #0
 800346c:	627b      	str	r3, [r7, #36]	; 0x24
 800346e:	2300      	movs	r3, #0
 8003470:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003472:	2300      	movs	r3, #0
 8003474:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003476:	2300      	movs	r3, #0
 8003478:	61fb      	str	r3, [r7, #28]
 800347a:	2300      	movs	r3, #0
 800347c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2b02      	cmp	r3, #2
 8003482:	d07f      	beq.n	8003584 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8003484:	2b10      	cmp	r3, #16
 8003486:	d002      	beq.n	800348e <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8003488:	2b01      	cmp	r3, #1
 800348a:	d048      	beq.n	800351e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800348c:	e08b      	b.n	80035a6 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 800348e:	4b4a      	ldr	r3, [pc, #296]	; (80035b8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003494:	4b48      	ldr	r3, [pc, #288]	; (80035b8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d07f      	beq.n	80035a0 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	0c9b      	lsrs	r3, r3, #18
 80034a4:	f003 030f 	and.w	r3, r3, #15
 80034a8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80034ac:	4413      	add	r3, r2
 80034ae:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80034b2:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d018      	beq.n	80034f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80034be:	4b3e      	ldr	r3, [pc, #248]	; (80035b8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	0c5b      	lsrs	r3, r3, #17
 80034c4:	f003 0301 	and.w	r3, r3, #1
 80034c8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80034cc:	4413      	add	r3, r2
 80034ce:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80034d2:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00d      	beq.n	80034fa <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80034de:	4a37      	ldr	r2, [pc, #220]	; (80035bc <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 80034e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e2:	fbb2 f2f3 	udiv	r2, r2, r3
 80034e6:	6a3b      	ldr	r3, [r7, #32]
 80034e8:	fb02 f303 	mul.w	r3, r2, r3
 80034ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034ee:	e004      	b.n	80034fa <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80034f0:	6a3b      	ldr	r3, [r7, #32]
 80034f2:	4a33      	ldr	r2, [pc, #204]	; (80035c0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80034f4:	fb02 f303 	mul.w	r3, r2, r3
 80034f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80034fa:	4b2f      	ldr	r3, [pc, #188]	; (80035b8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003502:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003506:	d102      	bne.n	800350e <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8003508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800350a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800350c:	e048      	b.n	80035a0 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 800350e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003510:	005b      	lsls	r3, r3, #1
 8003512:	4a2c      	ldr	r2, [pc, #176]	; (80035c4 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003514:	fba2 2303 	umull	r2, r3, r2, r3
 8003518:	085b      	lsrs	r3, r3, #1
 800351a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800351c:	e040      	b.n	80035a0 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 800351e:	4b26      	ldr	r3, [pc, #152]	; (80035b8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003520:	6a1b      	ldr	r3, [r3, #32]
 8003522:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800352a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800352e:	d108      	bne.n	8003542 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	f003 0302 	and.w	r3, r3, #2
 8003536:	2b00      	cmp	r3, #0
 8003538:	d003      	beq.n	8003542 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 800353a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800353e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003540:	e01f      	b.n	8003582 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003548:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800354c:	d109      	bne.n	8003562 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 800354e:	4b1a      	ldr	r3, [pc, #104]	; (80035b8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003552:	f003 0302 	and.w	r3, r3, #2
 8003556:	2b00      	cmp	r3, #0
 8003558:	d003      	beq.n	8003562 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 800355a:	f649 4340 	movw	r3, #40000	; 0x9c40
 800355e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003560:	e00f      	b.n	8003582 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003568:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800356c:	d11a      	bne.n	80035a4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800356e:	4b12      	ldr	r3, [pc, #72]	; (80035b8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d014      	beq.n	80035a4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 800357a:	f24f 4324 	movw	r3, #62500	; 0xf424
 800357e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003580:	e010      	b.n	80035a4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8003582:	e00f      	b.n	80035a4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003584:	f7ff fe7c 	bl	8003280 <HAL_RCC_GetPCLK2Freq>
 8003588:	4602      	mov	r2, r0
 800358a:	4b0b      	ldr	r3, [pc, #44]	; (80035b8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	0b9b      	lsrs	r3, r3, #14
 8003590:	f003 0303 	and.w	r3, r3, #3
 8003594:	3301      	adds	r3, #1
 8003596:	005b      	lsls	r3, r3, #1
 8003598:	fbb2 f3f3 	udiv	r3, r2, r3
 800359c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800359e:	e002      	b.n	80035a6 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80035a0:	bf00      	nop
 80035a2:	e000      	b.n	80035a6 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80035a4:	bf00      	nop
    }
  }
  return (frequency);
 80035a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3734      	adds	r7, #52	; 0x34
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd90      	pop	{r4, r7, pc}
 80035b0:	080055c0 	.word	0x080055c0
 80035b4:	080055d0 	.word	0x080055d0
 80035b8:	40021000 	.word	0x40021000
 80035bc:	007a1200 	.word	0x007a1200
 80035c0:	003d0900 	.word	0x003d0900
 80035c4:	aaaaaaab 	.word	0xaaaaaaab

080035c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b082      	sub	sp, #8
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d101      	bne.n	80035da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e01d      	b.n	8003616 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d106      	bne.n	80035f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f7fd fc42 	bl	8000e78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2202      	movs	r2, #2
 80035f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	3304      	adds	r3, #4
 8003604:	4619      	mov	r1, r3
 8003606:	4610      	mov	r0, r2
 8003608:	f000 fb3c 	bl	8003c84 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3708      	adds	r7, #8
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}

0800361e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800361e:	b480      	push	{r7}
 8003620:	b085      	sub	sp, #20
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	68da      	ldr	r2, [r3, #12]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f042 0201 	orr.w	r2, r2, #1
 8003634:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	f003 0307 	and.w	r3, r3, #7
 8003640:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2b06      	cmp	r3, #6
 8003646:	d007      	beq.n	8003658 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f042 0201 	orr.w	r2, r2, #1
 8003656:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003658:	2300      	movs	r3, #0
}
 800365a:	4618      	mov	r0, r3
 800365c:	3714      	adds	r7, #20
 800365e:	46bd      	mov	sp, r7
 8003660:	bc80      	pop	{r7}
 8003662:	4770      	bx	lr

08003664 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d101      	bne.n	8003676 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e01d      	b.n	80036b2 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800367c:	b2db      	uxtb	r3, r3
 800367e:	2b00      	cmp	r3, #0
 8003680:	d106      	bne.n	8003690 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 f815 	bl	80036ba <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2202      	movs	r2, #2
 8003694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	3304      	adds	r3, #4
 80036a0:	4619      	mov	r1, r3
 80036a2:	4610      	mov	r0, r2
 80036a4:	f000 faee 	bl	8003c84 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3708      	adds	r7, #8
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80036ba:	b480      	push	{r7}
 80036bc:	b083      	sub	sp, #12
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80036c2:	bf00      	nop
 80036c4:	370c      	adds	r7, #12
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bc80      	pop	{r7}
 80036ca:	4770      	bx	lr

080036cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2201      	movs	r2, #1
 80036dc:	6839      	ldr	r1, [r7, #0]
 80036de:	4618      	mov	r0, r3
 80036e0:	f000 fd50 	bl	8004184 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a10      	ldr	r2, [pc, #64]	; (800372c <HAL_TIM_PWM_Start+0x60>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d107      	bne.n	80036fe <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036fc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f003 0307 	and.w	r3, r3, #7
 8003708:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2b06      	cmp	r3, #6
 800370e:	d007      	beq.n	8003720 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f042 0201 	orr.w	r2, r2, #1
 800371e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3710      	adds	r7, #16
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	40012c00 	.word	0x40012c00

08003730 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	f003 0302 	and.w	r3, r3, #2
 8003742:	2b02      	cmp	r3, #2
 8003744:	d122      	bne.n	800378c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	f003 0302 	and.w	r3, r3, #2
 8003750:	2b02      	cmp	r3, #2
 8003752:	d11b      	bne.n	800378c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f06f 0202 	mvn.w	r2, #2
 800375c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2201      	movs	r2, #1
 8003762:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	699b      	ldr	r3, [r3, #24]
 800376a:	f003 0303 	and.w	r3, r3, #3
 800376e:	2b00      	cmp	r3, #0
 8003770:	d003      	beq.n	800377a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 fa6a 	bl	8003c4c <HAL_TIM_IC_CaptureCallback>
 8003778:	e005      	b.n	8003786 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 fa5d 	bl	8003c3a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f000 fa6c 	bl	8003c5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	691b      	ldr	r3, [r3, #16]
 8003792:	f003 0304 	and.w	r3, r3, #4
 8003796:	2b04      	cmp	r3, #4
 8003798:	d122      	bne.n	80037e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	f003 0304 	and.w	r3, r3, #4
 80037a4:	2b04      	cmp	r3, #4
 80037a6:	d11b      	bne.n	80037e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f06f 0204 	mvn.w	r2, #4
 80037b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2202      	movs	r2, #2
 80037b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	699b      	ldr	r3, [r3, #24]
 80037be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d003      	beq.n	80037ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 fa40 	bl	8003c4c <HAL_TIM_IC_CaptureCallback>
 80037cc:	e005      	b.n	80037da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 fa33 	bl	8003c3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f000 fa42 	bl	8003c5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	f003 0308 	and.w	r3, r3, #8
 80037ea:	2b08      	cmp	r3, #8
 80037ec:	d122      	bne.n	8003834 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	f003 0308 	and.w	r3, r3, #8
 80037f8:	2b08      	cmp	r3, #8
 80037fa:	d11b      	bne.n	8003834 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f06f 0208 	mvn.w	r2, #8
 8003804:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2204      	movs	r2, #4
 800380a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	69db      	ldr	r3, [r3, #28]
 8003812:	f003 0303 	and.w	r3, r3, #3
 8003816:	2b00      	cmp	r3, #0
 8003818:	d003      	beq.n	8003822 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 fa16 	bl	8003c4c <HAL_TIM_IC_CaptureCallback>
 8003820:	e005      	b.n	800382e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 fa09 	bl	8003c3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f000 fa18 	bl	8003c5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	f003 0310 	and.w	r3, r3, #16
 800383e:	2b10      	cmp	r3, #16
 8003840:	d122      	bne.n	8003888 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	f003 0310 	and.w	r3, r3, #16
 800384c:	2b10      	cmp	r3, #16
 800384e:	d11b      	bne.n	8003888 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f06f 0210 	mvn.w	r2, #16
 8003858:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2208      	movs	r2, #8
 800385e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	69db      	ldr	r3, [r3, #28]
 8003866:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800386a:	2b00      	cmp	r3, #0
 800386c:	d003      	beq.n	8003876 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 f9ec 	bl	8003c4c <HAL_TIM_IC_CaptureCallback>
 8003874:	e005      	b.n	8003882 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 f9df 	bl	8003c3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f000 f9ee 	bl	8003c5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	f003 0301 	and.w	r3, r3, #1
 8003892:	2b01      	cmp	r3, #1
 8003894:	d10e      	bne.n	80038b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	f003 0301 	and.w	r3, r3, #1
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d107      	bne.n	80038b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f06f 0201 	mvn.w	r2, #1
 80038ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f7fd f94c 	bl	8000b4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	691b      	ldr	r3, [r3, #16]
 80038ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038be:	2b80      	cmp	r3, #128	; 0x80
 80038c0:	d10e      	bne.n	80038e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038cc:	2b80      	cmp	r3, #128	; 0x80
 80038ce:	d107      	bne.n	80038e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80038d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f000 fcc3 	bl	8004266 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ea:	2b40      	cmp	r3, #64	; 0x40
 80038ec:	d10e      	bne.n	800390c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038f8:	2b40      	cmp	r3, #64	; 0x40
 80038fa:	d107      	bne.n	800390c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003904:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f000 f9b2 	bl	8003c70 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	f003 0320 	and.w	r3, r3, #32
 8003916:	2b20      	cmp	r3, #32
 8003918:	d10e      	bne.n	8003938 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	f003 0320 	and.w	r3, r3, #32
 8003924:	2b20      	cmp	r3, #32
 8003926:	d107      	bne.n	8003938 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f06f 0220 	mvn.w	r2, #32
 8003930:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f000 fc8e 	bl	8004254 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003938:	bf00      	nop
 800393a:	3708      	adds	r7, #8
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003952:	2b01      	cmp	r3, #1
 8003954:	d101      	bne.n	800395a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003956:	2302      	movs	r3, #2
 8003958:	e0b4      	b.n	8003ac4 <HAL_TIM_PWM_ConfigChannel+0x184>
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2201      	movs	r2, #1
 800395e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2202      	movs	r2, #2
 8003966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2b0c      	cmp	r3, #12
 800396e:	f200 809f 	bhi.w	8003ab0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003972:	a201      	add	r2, pc, #4	; (adr r2, 8003978 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003978:	080039ad 	.word	0x080039ad
 800397c:	08003ab1 	.word	0x08003ab1
 8003980:	08003ab1 	.word	0x08003ab1
 8003984:	08003ab1 	.word	0x08003ab1
 8003988:	080039ed 	.word	0x080039ed
 800398c:	08003ab1 	.word	0x08003ab1
 8003990:	08003ab1 	.word	0x08003ab1
 8003994:	08003ab1 	.word	0x08003ab1
 8003998:	08003a2f 	.word	0x08003a2f
 800399c:	08003ab1 	.word	0x08003ab1
 80039a0:	08003ab1 	.word	0x08003ab1
 80039a4:	08003ab1 	.word	0x08003ab1
 80039a8:	08003a6f 	.word	0x08003a6f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	68b9      	ldr	r1, [r7, #8]
 80039b2:	4618      	mov	r0, r3
 80039b4:	f000 f9c8 	bl	8003d48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	699a      	ldr	r2, [r3, #24]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f042 0208 	orr.w	r2, r2, #8
 80039c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	699a      	ldr	r2, [r3, #24]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f022 0204 	bic.w	r2, r2, #4
 80039d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	6999      	ldr	r1, [r3, #24]
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	691a      	ldr	r2, [r3, #16]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	430a      	orrs	r2, r1
 80039e8:	619a      	str	r2, [r3, #24]
      break;
 80039ea:	e062      	b.n	8003ab2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68b9      	ldr	r1, [r7, #8]
 80039f2:	4618      	mov	r0, r3
 80039f4:	f000 fa0e 	bl	8003e14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	699a      	ldr	r2, [r3, #24]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	699a      	ldr	r2, [r3, #24]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	6999      	ldr	r1, [r3, #24]
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	021a      	lsls	r2, r3, #8
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	430a      	orrs	r2, r1
 8003a2a:	619a      	str	r2, [r3, #24]
      break;
 8003a2c:	e041      	b.n	8003ab2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68b9      	ldr	r1, [r7, #8]
 8003a34:	4618      	mov	r0, r3
 8003a36:	f000 fa57 	bl	8003ee8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	69da      	ldr	r2, [r3, #28]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f042 0208 	orr.w	r2, r2, #8
 8003a48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	69da      	ldr	r2, [r3, #28]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f022 0204 	bic.w	r2, r2, #4
 8003a58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	69d9      	ldr	r1, [r3, #28]
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	691a      	ldr	r2, [r3, #16]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	430a      	orrs	r2, r1
 8003a6a:	61da      	str	r2, [r3, #28]
      break;
 8003a6c:	e021      	b.n	8003ab2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	68b9      	ldr	r1, [r7, #8]
 8003a74:	4618      	mov	r0, r3
 8003a76:	f000 faa1 	bl	8003fbc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	69da      	ldr	r2, [r3, #28]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	69da      	ldr	r2, [r3, #28]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	69d9      	ldr	r1, [r3, #28]
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	691b      	ldr	r3, [r3, #16]
 8003aa4:	021a      	lsls	r2, r3, #8
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	430a      	orrs	r2, r1
 8003aac:	61da      	str	r2, [r3, #28]
      break;
 8003aae:	e000      	b.n	8003ab2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003ab0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ac2:	2300      	movs	r3, #0
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3710      	adds	r7, #16
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d101      	bne.n	8003ae4 <HAL_TIM_ConfigClockSource+0x18>
 8003ae0:	2302      	movs	r3, #2
 8003ae2:	e0a6      	b.n	8003c32 <HAL_TIM_ConfigClockSource+0x166>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2202      	movs	r2, #2
 8003af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b02:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b0a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	68fa      	ldr	r2, [r7, #12]
 8003b12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2b40      	cmp	r3, #64	; 0x40
 8003b1a:	d067      	beq.n	8003bec <HAL_TIM_ConfigClockSource+0x120>
 8003b1c:	2b40      	cmp	r3, #64	; 0x40
 8003b1e:	d80b      	bhi.n	8003b38 <HAL_TIM_ConfigClockSource+0x6c>
 8003b20:	2b10      	cmp	r3, #16
 8003b22:	d073      	beq.n	8003c0c <HAL_TIM_ConfigClockSource+0x140>
 8003b24:	2b10      	cmp	r3, #16
 8003b26:	d802      	bhi.n	8003b2e <HAL_TIM_ConfigClockSource+0x62>
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d06f      	beq.n	8003c0c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003b2c:	e078      	b.n	8003c20 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003b2e:	2b20      	cmp	r3, #32
 8003b30:	d06c      	beq.n	8003c0c <HAL_TIM_ConfigClockSource+0x140>
 8003b32:	2b30      	cmp	r3, #48	; 0x30
 8003b34:	d06a      	beq.n	8003c0c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003b36:	e073      	b.n	8003c20 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003b38:	2b70      	cmp	r3, #112	; 0x70
 8003b3a:	d00d      	beq.n	8003b58 <HAL_TIM_ConfigClockSource+0x8c>
 8003b3c:	2b70      	cmp	r3, #112	; 0x70
 8003b3e:	d804      	bhi.n	8003b4a <HAL_TIM_ConfigClockSource+0x7e>
 8003b40:	2b50      	cmp	r3, #80	; 0x50
 8003b42:	d033      	beq.n	8003bac <HAL_TIM_ConfigClockSource+0xe0>
 8003b44:	2b60      	cmp	r3, #96	; 0x60
 8003b46:	d041      	beq.n	8003bcc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003b48:	e06a      	b.n	8003c20 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003b4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b4e:	d066      	beq.n	8003c1e <HAL_TIM_ConfigClockSource+0x152>
 8003b50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b54:	d017      	beq.n	8003b86 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003b56:	e063      	b.n	8003c20 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6818      	ldr	r0, [r3, #0]
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	6899      	ldr	r1, [r3, #8]
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	685a      	ldr	r2, [r3, #4]
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	f000 faed 	bl	8004146 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b7a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	68fa      	ldr	r2, [r7, #12]
 8003b82:	609a      	str	r2, [r3, #8]
      break;
 8003b84:	e04c      	b.n	8003c20 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6818      	ldr	r0, [r3, #0]
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	6899      	ldr	r1, [r3, #8]
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	685a      	ldr	r2, [r3, #4]
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	f000 fad6 	bl	8004146 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	689a      	ldr	r2, [r3, #8]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ba8:	609a      	str	r2, [r3, #8]
      break;
 8003baa:	e039      	b.n	8003c20 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6818      	ldr	r0, [r3, #0]
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	6859      	ldr	r1, [r3, #4]
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	461a      	mov	r2, r3
 8003bba:	f000 fa4d 	bl	8004058 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	2150      	movs	r1, #80	; 0x50
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f000 faa4 	bl	8004112 <TIM_ITRx_SetConfig>
      break;
 8003bca:	e029      	b.n	8003c20 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6818      	ldr	r0, [r3, #0]
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	6859      	ldr	r1, [r3, #4]
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	461a      	mov	r2, r3
 8003bda:	f000 fa6b 	bl	80040b4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	2160      	movs	r1, #96	; 0x60
 8003be4:	4618      	mov	r0, r3
 8003be6:	f000 fa94 	bl	8004112 <TIM_ITRx_SetConfig>
      break;
 8003bea:	e019      	b.n	8003c20 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6818      	ldr	r0, [r3, #0]
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	6859      	ldr	r1, [r3, #4]
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	f000 fa2d 	bl	8004058 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2140      	movs	r1, #64	; 0x40
 8003c04:	4618      	mov	r0, r3
 8003c06:	f000 fa84 	bl	8004112 <TIM_ITRx_SetConfig>
      break;
 8003c0a:	e009      	b.n	8003c20 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4619      	mov	r1, r3
 8003c16:	4610      	mov	r0, r2
 8003c18:	f000 fa7b 	bl	8004112 <TIM_ITRx_SetConfig>
      break;
 8003c1c:	e000      	b.n	8003c20 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003c1e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c30:	2300      	movs	r3, #0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3710      	adds	r7, #16
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}

08003c3a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c3a:	b480      	push	{r7}
 8003c3c:	b083      	sub	sp, #12
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c42:	bf00      	nop
 8003c44:	370c      	adds	r7, #12
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bc80      	pop	{r7}
 8003c4a:	4770      	bx	lr

08003c4c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c54:	bf00      	nop
 8003c56:	370c      	adds	r7, #12
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bc80      	pop	{r7}
 8003c5c:	4770      	bx	lr

08003c5e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c5e:	b480      	push	{r7}
 8003c60:	b083      	sub	sp, #12
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c66:	bf00      	nop
 8003c68:	370c      	adds	r7, #12
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bc80      	pop	{r7}
 8003c6e:	4770      	bx	lr

08003c70 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c78:	bf00      	nop
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bc80      	pop	{r7}
 8003c80:	4770      	bx	lr
	...

08003c84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b085      	sub	sp, #20
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4a29      	ldr	r2, [pc, #164]	; (8003d3c <TIM_Base_SetConfig+0xb8>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d00b      	beq.n	8003cb4 <TIM_Base_SetConfig+0x30>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ca2:	d007      	beq.n	8003cb4 <TIM_Base_SetConfig+0x30>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	4a26      	ldr	r2, [pc, #152]	; (8003d40 <TIM_Base_SetConfig+0xbc>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d003      	beq.n	8003cb4 <TIM_Base_SetConfig+0x30>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	4a25      	ldr	r2, [pc, #148]	; (8003d44 <TIM_Base_SetConfig+0xc0>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d108      	bne.n	8003cc6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	68fa      	ldr	r2, [r7, #12]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a1c      	ldr	r2, [pc, #112]	; (8003d3c <TIM_Base_SetConfig+0xb8>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d00b      	beq.n	8003ce6 <TIM_Base_SetConfig+0x62>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cd4:	d007      	beq.n	8003ce6 <TIM_Base_SetConfig+0x62>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a19      	ldr	r2, [pc, #100]	; (8003d40 <TIM_Base_SetConfig+0xbc>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d003      	beq.n	8003ce6 <TIM_Base_SetConfig+0x62>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a18      	ldr	r2, [pc, #96]	; (8003d44 <TIM_Base_SetConfig+0xc0>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d108      	bne.n	8003cf8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	68db      	ldr	r3, [r3, #12]
 8003cf2:	68fa      	ldr	r2, [r7, #12]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	695b      	ldr	r3, [r3, #20]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	68fa      	ldr	r2, [r7, #12]
 8003d0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	689a      	ldr	r2, [r3, #8]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4a07      	ldr	r2, [pc, #28]	; (8003d3c <TIM_Base_SetConfig+0xb8>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d103      	bne.n	8003d2c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	691a      	ldr	r2, [r3, #16]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	615a      	str	r2, [r3, #20]
}
 8003d32:	bf00      	nop
 8003d34:	3714      	adds	r7, #20
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bc80      	pop	{r7}
 8003d3a:	4770      	bx	lr
 8003d3c:	40012c00 	.word	0x40012c00
 8003d40:	40000400 	.word	0x40000400
 8003d44:	40000800 	.word	0x40000800

08003d48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b087      	sub	sp, #28
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a1b      	ldr	r3, [r3, #32]
 8003d56:	f023 0201 	bic.w	r2, r3, #1
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a1b      	ldr	r3, [r3, #32]
 8003d62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f023 0303 	bic.w	r3, r3, #3
 8003d7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68fa      	ldr	r2, [r7, #12]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	f023 0302 	bic.w	r3, r3, #2
 8003d90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	697a      	ldr	r2, [r7, #20]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4a1c      	ldr	r2, [pc, #112]	; (8003e10 <TIM_OC1_SetConfig+0xc8>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d10c      	bne.n	8003dbe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	f023 0308 	bic.w	r3, r3, #8
 8003daa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	697a      	ldr	r2, [r7, #20]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	f023 0304 	bic.w	r3, r3, #4
 8003dbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a13      	ldr	r2, [pc, #76]	; (8003e10 <TIM_OC1_SetConfig+0xc8>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d111      	bne.n	8003dea <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003dcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003dd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	695b      	ldr	r3, [r3, #20]
 8003dda:	693a      	ldr	r2, [r7, #16]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	699b      	ldr	r3, [r3, #24]
 8003de4:	693a      	ldr	r2, [r7, #16]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	693a      	ldr	r2, [r7, #16]
 8003dee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	68fa      	ldr	r2, [r7, #12]
 8003df4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	685a      	ldr	r2, [r3, #4]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	697a      	ldr	r2, [r7, #20]
 8003e02:	621a      	str	r2, [r3, #32]
}
 8003e04:	bf00      	nop
 8003e06:	371c      	adds	r7, #28
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bc80      	pop	{r7}
 8003e0c:	4770      	bx	lr
 8003e0e:	bf00      	nop
 8003e10:	40012c00 	.word	0x40012c00

08003e14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b087      	sub	sp, #28
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a1b      	ldr	r3, [r3, #32]
 8003e22:	f023 0210 	bic.w	r2, r3, #16
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a1b      	ldr	r3, [r3, #32]
 8003e2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	699b      	ldr	r3, [r3, #24]
 8003e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	021b      	lsls	r3, r3, #8
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	f023 0320 	bic.w	r3, r3, #32
 8003e5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	011b      	lsls	r3, r3, #4
 8003e66:	697a      	ldr	r2, [r7, #20]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4a1d      	ldr	r2, [pc, #116]	; (8003ee4 <TIM_OC2_SetConfig+0xd0>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d10d      	bne.n	8003e90 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	011b      	lsls	r3, r3, #4
 8003e82:	697a      	ldr	r2, [r7, #20]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e8e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	4a14      	ldr	r2, [pc, #80]	; (8003ee4 <TIM_OC2_SetConfig+0xd0>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d113      	bne.n	8003ec0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e9e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ea6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	695b      	ldr	r3, [r3, #20]
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	693a      	ldr	r2, [r7, #16]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	699b      	ldr	r3, [r3, #24]
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	693a      	ldr	r2, [r7, #16]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	693a      	ldr	r2, [r7, #16]
 8003ec4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	68fa      	ldr	r2, [r7, #12]
 8003eca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	685a      	ldr	r2, [r3, #4]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	697a      	ldr	r2, [r7, #20]
 8003ed8:	621a      	str	r2, [r3, #32]
}
 8003eda:	bf00      	nop
 8003edc:	371c      	adds	r7, #28
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bc80      	pop	{r7}
 8003ee2:	4770      	bx	lr
 8003ee4:	40012c00 	.word	0x40012c00

08003ee8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b087      	sub	sp, #28
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a1b      	ldr	r3, [r3, #32]
 8003ef6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a1b      	ldr	r3, [r3, #32]
 8003f02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	69db      	ldr	r3, [r3, #28]
 8003f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f023 0303 	bic.w	r3, r3, #3
 8003f1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	68fa      	ldr	r2, [r7, #12]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	021b      	lsls	r3, r3, #8
 8003f38:	697a      	ldr	r2, [r7, #20]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a1d      	ldr	r2, [pc, #116]	; (8003fb8 <TIM_OC3_SetConfig+0xd0>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d10d      	bne.n	8003f62 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	021b      	lsls	r3, r3, #8
 8003f54:	697a      	ldr	r2, [r7, #20]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a14      	ldr	r2, [pc, #80]	; (8003fb8 <TIM_OC3_SetConfig+0xd0>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d113      	bne.n	8003f92 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	695b      	ldr	r3, [r3, #20]
 8003f7e:	011b      	lsls	r3, r3, #4
 8003f80:	693a      	ldr	r2, [r7, #16]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	699b      	ldr	r3, [r3, #24]
 8003f8a:	011b      	lsls	r3, r3, #4
 8003f8c:	693a      	ldr	r2, [r7, #16]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	693a      	ldr	r2, [r7, #16]
 8003f96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	68fa      	ldr	r2, [r7, #12]
 8003f9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	685a      	ldr	r2, [r3, #4]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	697a      	ldr	r2, [r7, #20]
 8003faa:	621a      	str	r2, [r3, #32]
}
 8003fac:	bf00      	nop
 8003fae:	371c      	adds	r7, #28
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bc80      	pop	{r7}
 8003fb4:	4770      	bx	lr
 8003fb6:	bf00      	nop
 8003fb8:	40012c00 	.word	0x40012c00

08003fbc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b087      	sub	sp, #28
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a1b      	ldr	r3, [r3, #32]
 8003fca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a1b      	ldr	r3, [r3, #32]
 8003fd6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	69db      	ldr	r3, [r3, #28]
 8003fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ff2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	021b      	lsls	r3, r3, #8
 8003ffa:	68fa      	ldr	r2, [r7, #12]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004006:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	031b      	lsls	r3, r3, #12
 800400e:	693a      	ldr	r2, [r7, #16]
 8004010:	4313      	orrs	r3, r2
 8004012:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4a0f      	ldr	r2, [pc, #60]	; (8004054 <TIM_OC4_SetConfig+0x98>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d109      	bne.n	8004030 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004022:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	695b      	ldr	r3, [r3, #20]
 8004028:	019b      	lsls	r3, r3, #6
 800402a:	697a      	ldr	r2, [r7, #20]
 800402c:	4313      	orrs	r3, r2
 800402e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	697a      	ldr	r2, [r7, #20]
 8004034:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	68fa      	ldr	r2, [r7, #12]
 800403a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	685a      	ldr	r2, [r3, #4]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	693a      	ldr	r2, [r7, #16]
 8004048:	621a      	str	r2, [r3, #32]
}
 800404a:	bf00      	nop
 800404c:	371c      	adds	r7, #28
 800404e:	46bd      	mov	sp, r7
 8004050:	bc80      	pop	{r7}
 8004052:	4770      	bx	lr
 8004054:	40012c00 	.word	0x40012c00

08004058 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004058:	b480      	push	{r7}
 800405a:	b087      	sub	sp, #28
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6a1b      	ldr	r3, [r3, #32]
 8004068:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6a1b      	ldr	r3, [r3, #32]
 800406e:	f023 0201 	bic.w	r2, r3, #1
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	699b      	ldr	r3, [r3, #24]
 800407a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004082:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	011b      	lsls	r3, r3, #4
 8004088:	693a      	ldr	r2, [r7, #16]
 800408a:	4313      	orrs	r3, r2
 800408c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	f023 030a 	bic.w	r3, r3, #10
 8004094:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004096:	697a      	ldr	r2, [r7, #20]
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	4313      	orrs	r3, r2
 800409c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	693a      	ldr	r2, [r7, #16]
 80040a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	697a      	ldr	r2, [r7, #20]
 80040a8:	621a      	str	r2, [r3, #32]
}
 80040aa:	bf00      	nop
 80040ac:	371c      	adds	r7, #28
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bc80      	pop	{r7}
 80040b2:	4770      	bx	lr

080040b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b087      	sub	sp, #28
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6a1b      	ldr	r3, [r3, #32]
 80040c4:	f023 0210 	bic.w	r2, r3, #16
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	699b      	ldr	r3, [r3, #24]
 80040d0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6a1b      	ldr	r3, [r3, #32]
 80040d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040de:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	031b      	lsls	r3, r3, #12
 80040e4:	697a      	ldr	r2, [r7, #20]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80040f0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	011b      	lsls	r3, r3, #4
 80040f6:	693a      	ldr	r2, [r7, #16]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	697a      	ldr	r2, [r7, #20]
 8004100:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	693a      	ldr	r2, [r7, #16]
 8004106:	621a      	str	r2, [r3, #32]
}
 8004108:	bf00      	nop
 800410a:	371c      	adds	r7, #28
 800410c:	46bd      	mov	sp, r7
 800410e:	bc80      	pop	{r7}
 8004110:	4770      	bx	lr

08004112 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004112:	b480      	push	{r7}
 8004114:	b085      	sub	sp, #20
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
 800411a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004128:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800412a:	683a      	ldr	r2, [r7, #0]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	4313      	orrs	r3, r2
 8004130:	f043 0307 	orr.w	r3, r3, #7
 8004134:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	68fa      	ldr	r2, [r7, #12]
 800413a:	609a      	str	r2, [r3, #8]
}
 800413c:	bf00      	nop
 800413e:	3714      	adds	r7, #20
 8004140:	46bd      	mov	sp, r7
 8004142:	bc80      	pop	{r7}
 8004144:	4770      	bx	lr

08004146 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004146:	b480      	push	{r7}
 8004148:	b087      	sub	sp, #28
 800414a:	af00      	add	r7, sp, #0
 800414c:	60f8      	str	r0, [r7, #12]
 800414e:	60b9      	str	r1, [r7, #8]
 8004150:	607a      	str	r2, [r7, #4]
 8004152:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004160:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	021a      	lsls	r2, r3, #8
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	431a      	orrs	r2, r3
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	4313      	orrs	r3, r2
 800416e:	697a      	ldr	r2, [r7, #20]
 8004170:	4313      	orrs	r3, r2
 8004172:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	697a      	ldr	r2, [r7, #20]
 8004178:	609a      	str	r2, [r3, #8]
}
 800417a:	bf00      	nop
 800417c:	371c      	adds	r7, #28
 800417e:	46bd      	mov	sp, r7
 8004180:	bc80      	pop	{r7}
 8004182:	4770      	bx	lr

08004184 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004184:	b480      	push	{r7}
 8004186:	b087      	sub	sp, #28
 8004188:	af00      	add	r7, sp, #0
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	f003 031f 	and.w	r3, r3, #31
 8004196:	2201      	movs	r2, #1
 8004198:	fa02 f303 	lsl.w	r3, r2, r3
 800419c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6a1a      	ldr	r2, [r3, #32]
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	43db      	mvns	r3, r3
 80041a6:	401a      	ands	r2, r3
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6a1a      	ldr	r2, [r3, #32]
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	f003 031f 	and.w	r3, r3, #31
 80041b6:	6879      	ldr	r1, [r7, #4]
 80041b8:	fa01 f303 	lsl.w	r3, r1, r3
 80041bc:	431a      	orrs	r2, r3
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	621a      	str	r2, [r3, #32]
}
 80041c2:	bf00      	nop
 80041c4:	371c      	adds	r7, #28
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bc80      	pop	{r7}
 80041ca:	4770      	bx	lr

080041cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b085      	sub	sp, #20
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d101      	bne.n	80041e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041e0:	2302      	movs	r3, #2
 80041e2:	e032      	b.n	800424a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2202      	movs	r2, #2
 80041f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800420a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68fa      	ldr	r2, [r7, #12]
 8004212:	4313      	orrs	r3, r2
 8004214:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800421c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	68ba      	ldr	r2, [r7, #8]
 8004224:	4313      	orrs	r3, r2
 8004226:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68fa      	ldr	r2, [r7, #12]
 800422e:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	68ba      	ldr	r2, [r7, #8]
 8004236:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004248:	2300      	movs	r3, #0
}
 800424a:	4618      	mov	r0, r3
 800424c:	3714      	adds	r7, #20
 800424e:	46bd      	mov	sp, r7
 8004250:	bc80      	pop	{r7}
 8004252:	4770      	bx	lr

08004254 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800425c:	bf00      	nop
 800425e:	370c      	adds	r7, #12
 8004260:	46bd      	mov	sp, r7
 8004262:	bc80      	pop	{r7}
 8004264:	4770      	bx	lr

08004266 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004266:	b480      	push	{r7}
 8004268:	b083      	sub	sp, #12
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800426e:	bf00      	nop
 8004270:	370c      	adds	r7, #12
 8004272:	46bd      	mov	sp, r7
 8004274:	bc80      	pop	{r7}
 8004276:	4770      	bx	lr

08004278 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d101      	bne.n	800428a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e03f      	b.n	800430a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004290:	b2db      	uxtb	r3, r3
 8004292:	2b00      	cmp	r3, #0
 8004294:	d106      	bne.n	80042a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f7fc fe5c 	bl	8000f5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2224      	movs	r2, #36	; 0x24
 80042a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	68da      	ldr	r2, [r3, #12]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f000 fc2d 	bl	8004b1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	691a      	ldr	r2, [r3, #16]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	695a      	ldr	r2, [r3, #20]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	68da      	ldr	r2, [r3, #12]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2220      	movs	r2, #32
 80042fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2220      	movs	r2, #32
 8004304:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004308:	2300      	movs	r3, #0
}
 800430a:	4618      	mov	r0, r3
 800430c:	3708      	adds	r7, #8
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
	...

08004314 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b086      	sub	sp, #24
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	4613      	mov	r3, r2
 8004320:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004328:	b2db      	uxtb	r3, r3
 800432a:	2b20      	cmp	r3, #32
 800432c:	d153      	bne.n	80043d6 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d002      	beq.n	800433a <HAL_UART_Transmit_DMA+0x26>
 8004334:	88fb      	ldrh	r3, [r7, #6]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d101      	bne.n	800433e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e04c      	b.n	80043d8 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004344:	2b01      	cmp	r3, #1
 8004346:	d101      	bne.n	800434c <HAL_UART_Transmit_DMA+0x38>
 8004348:	2302      	movs	r3, #2
 800434a:	e045      	b.n	80043d8 <HAL_UART_Transmit_DMA+0xc4>
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8004354:	68ba      	ldr	r2, [r7, #8]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	88fa      	ldrh	r2, [r7, #6]
 800435e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	88fa      	ldrh	r2, [r7, #6]
 8004364:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2200      	movs	r2, #0
 800436a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2221      	movs	r2, #33	; 0x21
 8004370:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004378:	4a19      	ldr	r2, [pc, #100]	; (80043e0 <HAL_UART_Transmit_DMA+0xcc>)
 800437a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004380:	4a18      	ldr	r2, [pc, #96]	; (80043e4 <HAL_UART_Transmit_DMA+0xd0>)
 8004382:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004388:	4a17      	ldr	r2, [pc, #92]	; (80043e8 <HAL_UART_Transmit_DMA+0xd4>)
 800438a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004390:	2200      	movs	r2, #0
 8004392:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8004394:	f107 0308 	add.w	r3, r7, #8
 8004398:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	6819      	ldr	r1, [r3, #0]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	3304      	adds	r3, #4
 80043a8:	461a      	mov	r2, r3
 80043aa:	88fb      	ldrh	r3, [r7, #6]
 80043ac:	f7fd ff80 	bl	80022b0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80043b8:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2200      	movs	r2, #0
 80043be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	695a      	ldr	r2, [r3, #20]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80043d0:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80043d2:	2300      	movs	r3, #0
 80043d4:	e000      	b.n	80043d8 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80043d6:	2302      	movs	r3, #2
  }
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3718      	adds	r7, #24
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	0800472d 	.word	0x0800472d
 80043e4:	0800477f 	.word	0x0800477f
 80043e8:	0800481f 	.word	0x0800481f

080043ec <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b086      	sub	sp, #24
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	4613      	mov	r3, r2
 80043f8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004400:	b2db      	uxtb	r3, r3
 8004402:	2b20      	cmp	r3, #32
 8004404:	d166      	bne.n	80044d4 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d002      	beq.n	8004412 <HAL_UART_Receive_DMA+0x26>
 800440c:	88fb      	ldrh	r3, [r7, #6]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d101      	bne.n	8004416 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e05f      	b.n	80044d6 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800441c:	2b01      	cmp	r3, #1
 800441e:	d101      	bne.n	8004424 <HAL_UART_Receive_DMA+0x38>
 8004420:	2302      	movs	r3, #2
 8004422:	e058      	b.n	80044d6 <HAL_UART_Receive_DMA+0xea>
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800442c:	68ba      	ldr	r2, [r7, #8]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	88fa      	ldrh	r2, [r7, #6]
 8004436:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2200      	movs	r2, #0
 800443c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2222      	movs	r2, #34	; 0x22
 8004442:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800444a:	4a25      	ldr	r2, [pc, #148]	; (80044e0 <HAL_UART_Receive_DMA+0xf4>)
 800444c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004452:	4a24      	ldr	r2, [pc, #144]	; (80044e4 <HAL_UART_Receive_DMA+0xf8>)
 8004454:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800445a:	4a23      	ldr	r2, [pc, #140]	; (80044e8 <HAL_UART_Receive_DMA+0xfc>)
 800445c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004462:	2200      	movs	r2, #0
 8004464:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 8004466:	f107 0308 	add.w	r3, r7, #8
 800446a:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	3304      	adds	r3, #4
 8004476:	4619      	mov	r1, r3
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	88fb      	ldrh	r3, [r7, #6]
 800447e:	f7fd ff17 	bl	80022b0 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8004482:	2300      	movs	r3, #0
 8004484:	613b      	str	r3, [r7, #16]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	613b      	str	r3, [r7, #16]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	613b      	str	r3, [r7, #16]
 8004496:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2200      	movs	r2, #0
 800449c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	68da      	ldr	r2, [r3, #12]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044ae:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	695a      	ldr	r2, [r3, #20]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f042 0201 	orr.w	r2, r2, #1
 80044be:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	695a      	ldr	r2, [r3, #20]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044ce:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80044d0:	2300      	movs	r3, #0
 80044d2:	e000      	b.n	80044d6 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80044d4:	2302      	movs	r3, #2
  }
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3718      	adds	r7, #24
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	0800479b 	.word	0x0800479b
 80044e4:	08004803 	.word	0x08004803
 80044e8:	0800481f 	.word	0x0800481f

080044ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b088      	sub	sp, #32
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	695b      	ldr	r3, [r3, #20]
 800450a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800450c:	2300      	movs	r3, #0
 800450e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004510:	2300      	movs	r3, #0
 8004512:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	f003 030f 	and.w	r3, r3, #15
 800451a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d10d      	bne.n	800453e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	f003 0320 	and.w	r3, r3, #32
 8004528:	2b00      	cmp	r3, #0
 800452a:	d008      	beq.n	800453e <HAL_UART_IRQHandler+0x52>
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	f003 0320 	and.w	r3, r3, #32
 8004532:	2b00      	cmp	r3, #0
 8004534:	d003      	beq.n	800453e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 fa6e 	bl	8004a18 <UART_Receive_IT>
      return;
 800453c:	e0cc      	b.n	80046d8 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	2b00      	cmp	r3, #0
 8004542:	f000 80ab 	beq.w	800469c <HAL_UART_IRQHandler+0x1b0>
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	f003 0301 	and.w	r3, r3, #1
 800454c:	2b00      	cmp	r3, #0
 800454e:	d105      	bne.n	800455c <HAL_UART_IRQHandler+0x70>
 8004550:	69bb      	ldr	r3, [r7, #24]
 8004552:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004556:	2b00      	cmp	r3, #0
 8004558:	f000 80a0 	beq.w	800469c <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	f003 0301 	and.w	r3, r3, #1
 8004562:	2b00      	cmp	r3, #0
 8004564:	d00a      	beq.n	800457c <HAL_UART_IRQHandler+0x90>
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800456c:	2b00      	cmp	r3, #0
 800456e:	d005      	beq.n	800457c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004574:	f043 0201 	orr.w	r2, r3, #1
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	f003 0304 	and.w	r3, r3, #4
 8004582:	2b00      	cmp	r3, #0
 8004584:	d00a      	beq.n	800459c <HAL_UART_IRQHandler+0xb0>
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	f003 0301 	and.w	r3, r3, #1
 800458c:	2b00      	cmp	r3, #0
 800458e:	d005      	beq.n	800459c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004594:	f043 0202 	orr.w	r2, r3, #2
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	f003 0302 	and.w	r3, r3, #2
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d00a      	beq.n	80045bc <HAL_UART_IRQHandler+0xd0>
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	f003 0301 	and.w	r3, r3, #1
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d005      	beq.n	80045bc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045b4:	f043 0204 	orr.w	r2, r3, #4
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	f003 0308 	and.w	r3, r3, #8
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00a      	beq.n	80045dc <HAL_UART_IRQHandler+0xf0>
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	f003 0301 	and.w	r3, r3, #1
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d005      	beq.n	80045dc <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045d4:	f043 0208 	orr.w	r2, r3, #8
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d078      	beq.n	80046d6 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	f003 0320 	and.w	r3, r3, #32
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d007      	beq.n	80045fe <HAL_UART_IRQHandler+0x112>
 80045ee:	69bb      	ldr	r3, [r7, #24]
 80045f0:	f003 0320 	and.w	r3, r3, #32
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d002      	beq.n	80045fe <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f000 fa0d 	bl	8004a18 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	695b      	ldr	r3, [r3, #20]
 8004604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004608:	2b00      	cmp	r3, #0
 800460a:	bf14      	ite	ne
 800460c:	2301      	movne	r3, #1
 800460e:	2300      	moveq	r3, #0
 8004610:	b2db      	uxtb	r3, r3
 8004612:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004618:	f003 0308 	and.w	r3, r3, #8
 800461c:	2b00      	cmp	r3, #0
 800461e:	d102      	bne.n	8004626 <HAL_UART_IRQHandler+0x13a>
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d031      	beq.n	800468a <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 f958 	bl	80048dc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	695b      	ldr	r3, [r3, #20]
 8004632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004636:	2b00      	cmp	r3, #0
 8004638:	d023      	beq.n	8004682 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	695a      	ldr	r2, [r3, #20]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004648:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800464e:	2b00      	cmp	r3, #0
 8004650:	d013      	beq.n	800467a <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004656:	4a22      	ldr	r2, [pc, #136]	; (80046e0 <HAL_UART_IRQHandler+0x1f4>)
 8004658:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800465e:	4618      	mov	r0, r3
 8004660:	f7fd fec0 	bl	80023e4 <HAL_DMA_Abort_IT>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d016      	beq.n	8004698 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800466e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004674:	4610      	mov	r0, r2
 8004676:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004678:	e00e      	b.n	8004698 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f000 f84d 	bl	800471a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004680:	e00a      	b.n	8004698 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f000 f849 	bl	800471a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004688:	e006      	b.n	8004698 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 f845 	bl	800471a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004696:	e01e      	b.n	80046d6 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004698:	bf00      	nop
    return;
 800469a:	e01c      	b.n	80046d6 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d008      	beq.n	80046b8 <HAL_UART_IRQHandler+0x1cc>
 80046a6:	69bb      	ldr	r3, [r7, #24]
 80046a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d003      	beq.n	80046b8 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f000 f944 	bl	800493e <UART_Transmit_IT>
    return;
 80046b6:	e00f      	b.n	80046d8 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d00a      	beq.n	80046d8 <HAL_UART_IRQHandler+0x1ec>
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d005      	beq.n	80046d8 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f000 f98b 	bl	80049e8 <UART_EndTransmit_IT>
    return;
 80046d2:	bf00      	nop
 80046d4:	e000      	b.n	80046d8 <HAL_UART_IRQHandler+0x1ec>
    return;
 80046d6:	bf00      	nop
  }
}
 80046d8:	3720      	adds	r7, #32
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	08004917 	.word	0x08004917

080046e4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80046ec:	bf00      	nop
 80046ee:	370c      	adds	r7, #12
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bc80      	pop	{r7}
 80046f4:	4770      	bx	lr

080046f6 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80046f6:	b480      	push	{r7}
 80046f8:	b083      	sub	sp, #12
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80046fe:	bf00      	nop
 8004700:	370c      	adds	r7, #12
 8004702:	46bd      	mov	sp, r7
 8004704:	bc80      	pop	{r7}
 8004706:	4770      	bx	lr

08004708 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004710:	bf00      	nop
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	bc80      	pop	{r7}
 8004718:	4770      	bx	lr

0800471a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800471a:	b480      	push	{r7}
 800471c:	b083      	sub	sp, #12
 800471e:	af00      	add	r7, sp, #0
 8004720:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004722:	bf00      	nop
 8004724:	370c      	adds	r7, #12
 8004726:	46bd      	mov	sp, r7
 8004728:	bc80      	pop	{r7}
 800472a:	4770      	bx	lr

0800472c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004738:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0320 	and.w	r3, r3, #32
 8004744:	2b00      	cmp	r3, #0
 8004746:	d113      	bne.n	8004770 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2200      	movs	r2, #0
 800474c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	695a      	ldr	r2, [r3, #20]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800475c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	68da      	ldr	r2, [r3, #12]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800476c:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800476e:	e002      	b.n	8004776 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8004770:	68f8      	ldr	r0, [r7, #12]
 8004772:	f7ff ffb7 	bl	80046e4 <HAL_UART_TxCpltCallback>
}
 8004776:	bf00      	nop
 8004778:	3710      	adds	r7, #16
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}

0800477e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800477e:	b580      	push	{r7, lr}
 8004780:	b084      	sub	sp, #16
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800478c:	68f8      	ldr	r0, [r7, #12]
 800478e:	f7ff ffb2 	bl	80046f6 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004792:	bf00      	nop
 8004794:	3710      	adds	r7, #16
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}

0800479a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800479a:	b580      	push	{r7, lr}
 800479c:	b084      	sub	sp, #16
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a6:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 0320 	and.w	r3, r3, #32
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d11e      	bne.n	80047f4 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2200      	movs	r2, #0
 80047ba:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	68da      	ldr	r2, [r3, #12]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80047ca:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	695a      	ldr	r2, [r3, #20]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f022 0201 	bic.w	r2, r2, #1
 80047da:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	695a      	ldr	r2, [r3, #20]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047ea:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2220      	movs	r2, #32
 80047f0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80047f4:	68f8      	ldr	r0, [r7, #12]
 80047f6:	f7fc fa7b 	bl	8000cf0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047fa:	bf00      	nop
 80047fc:	3710      	adds	r7, #16
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}

08004802 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004802:	b580      	push	{r7, lr}
 8004804:	b084      	sub	sp, #16
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8004810:	68f8      	ldr	r0, [r7, #12]
 8004812:	f7ff ff79 	bl	8004708 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004816:	bf00      	nop
 8004818:	3710      	adds	r7, #16
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}

0800481e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800481e:	b580      	push	{r7, lr}
 8004820:	b084      	sub	sp, #16
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004826:	2300      	movs	r3, #0
 8004828:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	695b      	ldr	r3, [r3, #20]
 8004836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800483a:	2b00      	cmp	r3, #0
 800483c:	bf14      	ite	ne
 800483e:	2301      	movne	r3, #1
 8004840:	2300      	moveq	r3, #0
 8004842:	b2db      	uxtb	r3, r3
 8004844:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800484c:	b2db      	uxtb	r3, r3
 800484e:	2b21      	cmp	r3, #33	; 0x21
 8004850:	d108      	bne.n	8004864 <UART_DMAError+0x46>
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d005      	beq.n	8004864 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	2200      	movs	r2, #0
 800485c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800485e:	68b8      	ldr	r0, [r7, #8]
 8004860:	f000 f827 	bl	80048b2 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	695b      	ldr	r3, [r3, #20]
 800486a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800486e:	2b00      	cmp	r3, #0
 8004870:	bf14      	ite	ne
 8004872:	2301      	movne	r3, #1
 8004874:	2300      	moveq	r3, #0
 8004876:	b2db      	uxtb	r3, r3
 8004878:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004880:	b2db      	uxtb	r3, r3
 8004882:	2b22      	cmp	r3, #34	; 0x22
 8004884:	d108      	bne.n	8004898 <UART_DMAError+0x7a>
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d005      	beq.n	8004898 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	2200      	movs	r2, #0
 8004890:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004892:	68b8      	ldr	r0, [r7, #8]
 8004894:	f000 f822 	bl	80048dc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800489c:	f043 0210 	orr.w	r2, r3, #16
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80048a4:	68b8      	ldr	r0, [r7, #8]
 80048a6:	f7ff ff38 	bl	800471a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048aa:	bf00      	nop
 80048ac:	3710      	adds	r7, #16
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}

080048b2 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80048b2:	b480      	push	{r7}
 80048b4:	b083      	sub	sp, #12
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	68da      	ldr	r2, [r3, #12]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80048c8:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2220      	movs	r2, #32
 80048ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80048d2:	bf00      	nop
 80048d4:	370c      	adds	r7, #12
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bc80      	pop	{r7}
 80048da:	4770      	bx	lr

080048dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68da      	ldr	r2, [r3, #12]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80048f2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	695a      	ldr	r2, [r3, #20]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f022 0201 	bic.w	r2, r2, #1
 8004902:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2220      	movs	r2, #32
 8004908:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800490c:	bf00      	nop
 800490e:	370c      	adds	r7, #12
 8004910:	46bd      	mov	sp, r7
 8004912:	bc80      	pop	{r7}
 8004914:	4770      	bx	lr

08004916 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004916:	b580      	push	{r7, lr}
 8004918:	b084      	sub	sp, #16
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004922:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2200      	movs	r2, #0
 8004928:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2200      	movs	r2, #0
 800492e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004930:	68f8      	ldr	r0, [r7, #12]
 8004932:	f7ff fef2 	bl	800471a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004936:	bf00      	nop
 8004938:	3710      	adds	r7, #16
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}

0800493e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800493e:	b480      	push	{r7}
 8004940:	b085      	sub	sp, #20
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800494c:	b2db      	uxtb	r3, r3
 800494e:	2b21      	cmp	r3, #33	; 0x21
 8004950:	d144      	bne.n	80049dc <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800495a:	d11a      	bne.n	8004992 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6a1b      	ldr	r3, [r3, #32]
 8004960:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	881b      	ldrh	r3, [r3, #0]
 8004966:	461a      	mov	r2, r3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004970:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	691b      	ldr	r3, [r3, #16]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d105      	bne.n	8004986 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a1b      	ldr	r3, [r3, #32]
 800497e:	1c9a      	adds	r2, r3, #2
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	621a      	str	r2, [r3, #32]
 8004984:	e00e      	b.n	80049a4 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a1b      	ldr	r3, [r3, #32]
 800498a:	1c5a      	adds	r2, r3, #1
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	621a      	str	r2, [r3, #32]
 8004990:	e008      	b.n	80049a4 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6a1b      	ldr	r3, [r3, #32]
 8004996:	1c59      	adds	r1, r3, #1
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	6211      	str	r1, [r2, #32]
 800499c:	781a      	ldrb	r2, [r3, #0]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	3b01      	subs	r3, #1
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	4619      	mov	r1, r3
 80049b2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d10f      	bne.n	80049d8 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	68da      	ldr	r2, [r3, #12]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049c6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	68da      	ldr	r2, [r3, #12]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049d6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80049d8:	2300      	movs	r3, #0
 80049da:	e000      	b.n	80049de <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80049dc:	2302      	movs	r3, #2
  }
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3714      	adds	r7, #20
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bc80      	pop	{r7}
 80049e6:	4770      	bx	lr

080049e8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b082      	sub	sp, #8
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68da      	ldr	r2, [r3, #12]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049fe:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2220      	movs	r2, #32
 8004a04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f7ff fe6b 	bl	80046e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004a0e:	2300      	movs	r3, #0
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3708      	adds	r7, #8
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	2b22      	cmp	r3, #34	; 0x22
 8004a2a:	d171      	bne.n	8004b10 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a34:	d123      	bne.n	8004a7e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a3a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	691b      	ldr	r3, [r3, #16]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d10e      	bne.n	8004a62 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a50:	b29a      	uxth	r2, r3
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a5a:	1c9a      	adds	r2, r3, #2
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	629a      	str	r2, [r3, #40]	; 0x28
 8004a60:	e029      	b.n	8004ab6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	b29a      	uxth	r2, r3
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a76:	1c5a      	adds	r2, r3, #1
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	629a      	str	r2, [r3, #40]	; 0x28
 8004a7c:	e01b      	b.n	8004ab6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	691b      	ldr	r3, [r3, #16]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d10a      	bne.n	8004a9c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	6858      	ldr	r0, [r3, #4]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a90:	1c59      	adds	r1, r3, #1
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	6291      	str	r1, [r2, #40]	; 0x28
 8004a96:	b2c2      	uxtb	r2, r0
 8004a98:	701a      	strb	r2, [r3, #0]
 8004a9a:	e00c      	b.n	8004ab6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	b2da      	uxtb	r2, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa8:	1c58      	adds	r0, r3, #1
 8004aaa:	6879      	ldr	r1, [r7, #4]
 8004aac:	6288      	str	r0, [r1, #40]	; 0x28
 8004aae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004ab2:	b2d2      	uxtb	r2, r2
 8004ab4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	3b01      	subs	r3, #1
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	4619      	mov	r1, r3
 8004ac4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d120      	bne.n	8004b0c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	68da      	ldr	r2, [r3, #12]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f022 0220 	bic.w	r2, r2, #32
 8004ad8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	68da      	ldr	r2, [r3, #12]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ae8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	695a      	ldr	r2, [r3, #20]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f022 0201 	bic.w	r2, r2, #1
 8004af8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2220      	movs	r2, #32
 8004afe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f7fc f8f4 	bl	8000cf0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	e002      	b.n	8004b12 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	e000      	b.n	8004b12 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004b10:	2302      	movs	r3, #2
  }
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3710      	adds	r7, #16
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
	...

08004b1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b084      	sub	sp, #16
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	691b      	ldr	r3, [r3, #16]
 8004b2a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	68da      	ldr	r2, [r3, #12]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	430a      	orrs	r2, r1
 8004b38:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	689a      	ldr	r2, [r3, #8]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	691b      	ldr	r3, [r3, #16]
 8004b42:	431a      	orrs	r2, r3
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	695b      	ldr	r3, [r3, #20]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004b56:	f023 030c 	bic.w	r3, r3, #12
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	6812      	ldr	r2, [r2, #0]
 8004b5e:	68f9      	ldr	r1, [r7, #12]
 8004b60:	430b      	orrs	r3, r1
 8004b62:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	695b      	ldr	r3, [r3, #20]
 8004b6a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	699a      	ldr	r2, [r3, #24]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	430a      	orrs	r2, r1
 8004b78:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a52      	ldr	r2, [pc, #328]	; (8004cc8 <UART_SetConfig+0x1ac>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d14e      	bne.n	8004c22 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004b84:	f7fe fb7c 	bl	8003280 <HAL_RCC_GetPCLK2Freq>
 8004b88:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b8a:	68ba      	ldr	r2, [r7, #8]
 8004b8c:	4613      	mov	r3, r2
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	4413      	add	r3, r2
 8004b92:	009a      	lsls	r2, r3, #2
 8004b94:	441a      	add	r2, r3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ba0:	4a4a      	ldr	r2, [pc, #296]	; (8004ccc <UART_SetConfig+0x1b0>)
 8004ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ba6:	095b      	lsrs	r3, r3, #5
 8004ba8:	0119      	lsls	r1, r3, #4
 8004baa:	68ba      	ldr	r2, [r7, #8]
 8004bac:	4613      	mov	r3, r2
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	4413      	add	r3, r2
 8004bb2:	009a      	lsls	r2, r3, #2
 8004bb4:	441a      	add	r2, r3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004bc0:	4b42      	ldr	r3, [pc, #264]	; (8004ccc <UART_SetConfig+0x1b0>)
 8004bc2:	fba3 0302 	umull	r0, r3, r3, r2
 8004bc6:	095b      	lsrs	r3, r3, #5
 8004bc8:	2064      	movs	r0, #100	; 0x64
 8004bca:	fb00 f303 	mul.w	r3, r0, r3
 8004bce:	1ad3      	subs	r3, r2, r3
 8004bd0:	011b      	lsls	r3, r3, #4
 8004bd2:	3332      	adds	r3, #50	; 0x32
 8004bd4:	4a3d      	ldr	r2, [pc, #244]	; (8004ccc <UART_SetConfig+0x1b0>)
 8004bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bda:	095b      	lsrs	r3, r3, #5
 8004bdc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004be0:	4419      	add	r1, r3
 8004be2:	68ba      	ldr	r2, [r7, #8]
 8004be4:	4613      	mov	r3, r2
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	4413      	add	r3, r2
 8004bea:	009a      	lsls	r2, r3, #2
 8004bec:	441a      	add	r2, r3
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004bf8:	4b34      	ldr	r3, [pc, #208]	; (8004ccc <UART_SetConfig+0x1b0>)
 8004bfa:	fba3 0302 	umull	r0, r3, r3, r2
 8004bfe:	095b      	lsrs	r3, r3, #5
 8004c00:	2064      	movs	r0, #100	; 0x64
 8004c02:	fb00 f303 	mul.w	r3, r0, r3
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	011b      	lsls	r3, r3, #4
 8004c0a:	3332      	adds	r3, #50	; 0x32
 8004c0c:	4a2f      	ldr	r2, [pc, #188]	; (8004ccc <UART_SetConfig+0x1b0>)
 8004c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c12:	095b      	lsrs	r3, r3, #5
 8004c14:	f003 020f 	and.w	r2, r3, #15
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	440a      	add	r2, r1
 8004c1e:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8004c20:	e04d      	b.n	8004cbe <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8004c22:	f7fe fb19 	bl	8003258 <HAL_RCC_GetPCLK1Freq>
 8004c26:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c28:	68ba      	ldr	r2, [r7, #8]
 8004c2a:	4613      	mov	r3, r2
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	4413      	add	r3, r2
 8004c30:	009a      	lsls	r2, r3, #2
 8004c32:	441a      	add	r2, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c3e:	4a23      	ldr	r2, [pc, #140]	; (8004ccc <UART_SetConfig+0x1b0>)
 8004c40:	fba2 2303 	umull	r2, r3, r2, r3
 8004c44:	095b      	lsrs	r3, r3, #5
 8004c46:	0119      	lsls	r1, r3, #4
 8004c48:	68ba      	ldr	r2, [r7, #8]
 8004c4a:	4613      	mov	r3, r2
 8004c4c:	009b      	lsls	r3, r3, #2
 8004c4e:	4413      	add	r3, r2
 8004c50:	009a      	lsls	r2, r3, #2
 8004c52:	441a      	add	r2, r3
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c5e:	4b1b      	ldr	r3, [pc, #108]	; (8004ccc <UART_SetConfig+0x1b0>)
 8004c60:	fba3 0302 	umull	r0, r3, r3, r2
 8004c64:	095b      	lsrs	r3, r3, #5
 8004c66:	2064      	movs	r0, #100	; 0x64
 8004c68:	fb00 f303 	mul.w	r3, r0, r3
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	011b      	lsls	r3, r3, #4
 8004c70:	3332      	adds	r3, #50	; 0x32
 8004c72:	4a16      	ldr	r2, [pc, #88]	; (8004ccc <UART_SetConfig+0x1b0>)
 8004c74:	fba2 2303 	umull	r2, r3, r2, r3
 8004c78:	095b      	lsrs	r3, r3, #5
 8004c7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c7e:	4419      	add	r1, r3
 8004c80:	68ba      	ldr	r2, [r7, #8]
 8004c82:	4613      	mov	r3, r2
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	4413      	add	r3, r2
 8004c88:	009a      	lsls	r2, r3, #2
 8004c8a:	441a      	add	r2, r3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c96:	4b0d      	ldr	r3, [pc, #52]	; (8004ccc <UART_SetConfig+0x1b0>)
 8004c98:	fba3 0302 	umull	r0, r3, r3, r2
 8004c9c:	095b      	lsrs	r3, r3, #5
 8004c9e:	2064      	movs	r0, #100	; 0x64
 8004ca0:	fb00 f303 	mul.w	r3, r0, r3
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	011b      	lsls	r3, r3, #4
 8004ca8:	3332      	adds	r3, #50	; 0x32
 8004caa:	4a08      	ldr	r2, [pc, #32]	; (8004ccc <UART_SetConfig+0x1b0>)
 8004cac:	fba2 2303 	umull	r2, r3, r2, r3
 8004cb0:	095b      	lsrs	r3, r3, #5
 8004cb2:	f003 020f 	and.w	r2, r3, #15
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	440a      	add	r2, r1
 8004cbc:	609a      	str	r2, [r3, #8]
}
 8004cbe:	bf00      	nop
 8004cc0:	3710      	adds	r7, #16
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	bf00      	nop
 8004cc8:	40013800 	.word	0x40013800
 8004ccc:	51eb851f 	.word	0x51eb851f

08004cd0 <__errno>:
 8004cd0:	4b01      	ldr	r3, [pc, #4]	; (8004cd8 <__errno+0x8>)
 8004cd2:	6818      	ldr	r0, [r3, #0]
 8004cd4:	4770      	bx	lr
 8004cd6:	bf00      	nop
 8004cd8:	20000014 	.word	0x20000014

08004cdc <__libc_init_array>:
 8004cdc:	b570      	push	{r4, r5, r6, lr}
 8004cde:	2500      	movs	r5, #0
 8004ce0:	4e0c      	ldr	r6, [pc, #48]	; (8004d14 <__libc_init_array+0x38>)
 8004ce2:	4c0d      	ldr	r4, [pc, #52]	; (8004d18 <__libc_init_array+0x3c>)
 8004ce4:	1ba4      	subs	r4, r4, r6
 8004ce6:	10a4      	asrs	r4, r4, #2
 8004ce8:	42a5      	cmp	r5, r4
 8004cea:	d109      	bne.n	8004d00 <__libc_init_array+0x24>
 8004cec:	f000 fc34 	bl	8005558 <_init>
 8004cf0:	2500      	movs	r5, #0
 8004cf2:	4e0a      	ldr	r6, [pc, #40]	; (8004d1c <__libc_init_array+0x40>)
 8004cf4:	4c0a      	ldr	r4, [pc, #40]	; (8004d20 <__libc_init_array+0x44>)
 8004cf6:	1ba4      	subs	r4, r4, r6
 8004cf8:	10a4      	asrs	r4, r4, #2
 8004cfa:	42a5      	cmp	r5, r4
 8004cfc:	d105      	bne.n	8004d0a <__libc_init_array+0x2e>
 8004cfe:	bd70      	pop	{r4, r5, r6, pc}
 8004d00:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004d04:	4798      	blx	r3
 8004d06:	3501      	adds	r5, #1
 8004d08:	e7ee      	b.n	8004ce8 <__libc_init_array+0xc>
 8004d0a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004d0e:	4798      	blx	r3
 8004d10:	3501      	adds	r5, #1
 8004d12:	e7f2      	b.n	8004cfa <__libc_init_array+0x1e>
 8004d14:	08005620 	.word	0x08005620
 8004d18:	08005620 	.word	0x08005620
 8004d1c:	08005620 	.word	0x08005620
 8004d20:	08005624 	.word	0x08005624

08004d24 <memset>:
 8004d24:	4603      	mov	r3, r0
 8004d26:	4402      	add	r2, r0
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d100      	bne.n	8004d2e <memset+0xa>
 8004d2c:	4770      	bx	lr
 8004d2e:	f803 1b01 	strb.w	r1, [r3], #1
 8004d32:	e7f9      	b.n	8004d28 <memset+0x4>

08004d34 <siprintf>:
 8004d34:	b40e      	push	{r1, r2, r3}
 8004d36:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004d3a:	b500      	push	{lr}
 8004d3c:	b09c      	sub	sp, #112	; 0x70
 8004d3e:	ab1d      	add	r3, sp, #116	; 0x74
 8004d40:	9002      	str	r0, [sp, #8]
 8004d42:	9006      	str	r0, [sp, #24]
 8004d44:	9107      	str	r1, [sp, #28]
 8004d46:	9104      	str	r1, [sp, #16]
 8004d48:	4808      	ldr	r0, [pc, #32]	; (8004d6c <siprintf+0x38>)
 8004d4a:	4909      	ldr	r1, [pc, #36]	; (8004d70 <siprintf+0x3c>)
 8004d4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d50:	9105      	str	r1, [sp, #20]
 8004d52:	6800      	ldr	r0, [r0, #0]
 8004d54:	a902      	add	r1, sp, #8
 8004d56:	9301      	str	r3, [sp, #4]
 8004d58:	f000 f866 	bl	8004e28 <_svfiprintf_r>
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	9b02      	ldr	r3, [sp, #8]
 8004d60:	701a      	strb	r2, [r3, #0]
 8004d62:	b01c      	add	sp, #112	; 0x70
 8004d64:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d68:	b003      	add	sp, #12
 8004d6a:	4770      	bx	lr
 8004d6c:	20000014 	.word	0x20000014
 8004d70:	ffff0208 	.word	0xffff0208

08004d74 <__ssputs_r>:
 8004d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d78:	688e      	ldr	r6, [r1, #8]
 8004d7a:	4682      	mov	sl, r0
 8004d7c:	429e      	cmp	r6, r3
 8004d7e:	460c      	mov	r4, r1
 8004d80:	4690      	mov	r8, r2
 8004d82:	4699      	mov	r9, r3
 8004d84:	d837      	bhi.n	8004df6 <__ssputs_r+0x82>
 8004d86:	898a      	ldrh	r2, [r1, #12]
 8004d88:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004d8c:	d031      	beq.n	8004df2 <__ssputs_r+0x7e>
 8004d8e:	2302      	movs	r3, #2
 8004d90:	6825      	ldr	r5, [r4, #0]
 8004d92:	6909      	ldr	r1, [r1, #16]
 8004d94:	1a6f      	subs	r7, r5, r1
 8004d96:	6965      	ldr	r5, [r4, #20]
 8004d98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004d9c:	fb95 f5f3 	sdiv	r5, r5, r3
 8004da0:	f109 0301 	add.w	r3, r9, #1
 8004da4:	443b      	add	r3, r7
 8004da6:	429d      	cmp	r5, r3
 8004da8:	bf38      	it	cc
 8004daa:	461d      	movcc	r5, r3
 8004dac:	0553      	lsls	r3, r2, #21
 8004dae:	d530      	bpl.n	8004e12 <__ssputs_r+0x9e>
 8004db0:	4629      	mov	r1, r5
 8004db2:	f000 fb37 	bl	8005424 <_malloc_r>
 8004db6:	4606      	mov	r6, r0
 8004db8:	b950      	cbnz	r0, 8004dd0 <__ssputs_r+0x5c>
 8004dba:	230c      	movs	r3, #12
 8004dbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004dc0:	f8ca 3000 	str.w	r3, [sl]
 8004dc4:	89a3      	ldrh	r3, [r4, #12]
 8004dc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004dca:	81a3      	strh	r3, [r4, #12]
 8004dcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dd0:	463a      	mov	r2, r7
 8004dd2:	6921      	ldr	r1, [r4, #16]
 8004dd4:	f000 fab6 	bl	8005344 <memcpy>
 8004dd8:	89a3      	ldrh	r3, [r4, #12]
 8004dda:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004dde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004de2:	81a3      	strh	r3, [r4, #12]
 8004de4:	6126      	str	r6, [r4, #16]
 8004de6:	443e      	add	r6, r7
 8004de8:	6026      	str	r6, [r4, #0]
 8004dea:	464e      	mov	r6, r9
 8004dec:	6165      	str	r5, [r4, #20]
 8004dee:	1bed      	subs	r5, r5, r7
 8004df0:	60a5      	str	r5, [r4, #8]
 8004df2:	454e      	cmp	r6, r9
 8004df4:	d900      	bls.n	8004df8 <__ssputs_r+0x84>
 8004df6:	464e      	mov	r6, r9
 8004df8:	4632      	mov	r2, r6
 8004dfa:	4641      	mov	r1, r8
 8004dfc:	6820      	ldr	r0, [r4, #0]
 8004dfe:	f000 faac 	bl	800535a <memmove>
 8004e02:	68a3      	ldr	r3, [r4, #8]
 8004e04:	2000      	movs	r0, #0
 8004e06:	1b9b      	subs	r3, r3, r6
 8004e08:	60a3      	str	r3, [r4, #8]
 8004e0a:	6823      	ldr	r3, [r4, #0]
 8004e0c:	441e      	add	r6, r3
 8004e0e:	6026      	str	r6, [r4, #0]
 8004e10:	e7dc      	b.n	8004dcc <__ssputs_r+0x58>
 8004e12:	462a      	mov	r2, r5
 8004e14:	f000 fb60 	bl	80054d8 <_realloc_r>
 8004e18:	4606      	mov	r6, r0
 8004e1a:	2800      	cmp	r0, #0
 8004e1c:	d1e2      	bne.n	8004de4 <__ssputs_r+0x70>
 8004e1e:	6921      	ldr	r1, [r4, #16]
 8004e20:	4650      	mov	r0, sl
 8004e22:	f000 fab3 	bl	800538c <_free_r>
 8004e26:	e7c8      	b.n	8004dba <__ssputs_r+0x46>

08004e28 <_svfiprintf_r>:
 8004e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e2c:	461d      	mov	r5, r3
 8004e2e:	898b      	ldrh	r3, [r1, #12]
 8004e30:	b09d      	sub	sp, #116	; 0x74
 8004e32:	061f      	lsls	r7, r3, #24
 8004e34:	4680      	mov	r8, r0
 8004e36:	460c      	mov	r4, r1
 8004e38:	4616      	mov	r6, r2
 8004e3a:	d50f      	bpl.n	8004e5c <_svfiprintf_r+0x34>
 8004e3c:	690b      	ldr	r3, [r1, #16]
 8004e3e:	b96b      	cbnz	r3, 8004e5c <_svfiprintf_r+0x34>
 8004e40:	2140      	movs	r1, #64	; 0x40
 8004e42:	f000 faef 	bl	8005424 <_malloc_r>
 8004e46:	6020      	str	r0, [r4, #0]
 8004e48:	6120      	str	r0, [r4, #16]
 8004e4a:	b928      	cbnz	r0, 8004e58 <_svfiprintf_r+0x30>
 8004e4c:	230c      	movs	r3, #12
 8004e4e:	f8c8 3000 	str.w	r3, [r8]
 8004e52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e56:	e0c8      	b.n	8004fea <_svfiprintf_r+0x1c2>
 8004e58:	2340      	movs	r3, #64	; 0x40
 8004e5a:	6163      	str	r3, [r4, #20]
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	9309      	str	r3, [sp, #36]	; 0x24
 8004e60:	2320      	movs	r3, #32
 8004e62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004e66:	2330      	movs	r3, #48	; 0x30
 8004e68:	f04f 0b01 	mov.w	fp, #1
 8004e6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004e70:	9503      	str	r5, [sp, #12]
 8004e72:	4637      	mov	r7, r6
 8004e74:	463d      	mov	r5, r7
 8004e76:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004e7a:	b10b      	cbz	r3, 8004e80 <_svfiprintf_r+0x58>
 8004e7c:	2b25      	cmp	r3, #37	; 0x25
 8004e7e:	d13e      	bne.n	8004efe <_svfiprintf_r+0xd6>
 8004e80:	ebb7 0a06 	subs.w	sl, r7, r6
 8004e84:	d00b      	beq.n	8004e9e <_svfiprintf_r+0x76>
 8004e86:	4653      	mov	r3, sl
 8004e88:	4632      	mov	r2, r6
 8004e8a:	4621      	mov	r1, r4
 8004e8c:	4640      	mov	r0, r8
 8004e8e:	f7ff ff71 	bl	8004d74 <__ssputs_r>
 8004e92:	3001      	adds	r0, #1
 8004e94:	f000 80a4 	beq.w	8004fe0 <_svfiprintf_r+0x1b8>
 8004e98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e9a:	4453      	add	r3, sl
 8004e9c:	9309      	str	r3, [sp, #36]	; 0x24
 8004e9e:	783b      	ldrb	r3, [r7, #0]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	f000 809d 	beq.w	8004fe0 <_svfiprintf_r+0x1b8>
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004eac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004eb0:	9304      	str	r3, [sp, #16]
 8004eb2:	9307      	str	r3, [sp, #28]
 8004eb4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004eb8:	931a      	str	r3, [sp, #104]	; 0x68
 8004eba:	462f      	mov	r7, r5
 8004ebc:	2205      	movs	r2, #5
 8004ebe:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004ec2:	4850      	ldr	r0, [pc, #320]	; (8005004 <_svfiprintf_r+0x1dc>)
 8004ec4:	f000 fa30 	bl	8005328 <memchr>
 8004ec8:	9b04      	ldr	r3, [sp, #16]
 8004eca:	b9d0      	cbnz	r0, 8004f02 <_svfiprintf_r+0xda>
 8004ecc:	06d9      	lsls	r1, r3, #27
 8004ece:	bf44      	itt	mi
 8004ed0:	2220      	movmi	r2, #32
 8004ed2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004ed6:	071a      	lsls	r2, r3, #28
 8004ed8:	bf44      	itt	mi
 8004eda:	222b      	movmi	r2, #43	; 0x2b
 8004edc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004ee0:	782a      	ldrb	r2, [r5, #0]
 8004ee2:	2a2a      	cmp	r2, #42	; 0x2a
 8004ee4:	d015      	beq.n	8004f12 <_svfiprintf_r+0xea>
 8004ee6:	462f      	mov	r7, r5
 8004ee8:	2000      	movs	r0, #0
 8004eea:	250a      	movs	r5, #10
 8004eec:	9a07      	ldr	r2, [sp, #28]
 8004eee:	4639      	mov	r1, r7
 8004ef0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ef4:	3b30      	subs	r3, #48	; 0x30
 8004ef6:	2b09      	cmp	r3, #9
 8004ef8:	d94d      	bls.n	8004f96 <_svfiprintf_r+0x16e>
 8004efa:	b1b8      	cbz	r0, 8004f2c <_svfiprintf_r+0x104>
 8004efc:	e00f      	b.n	8004f1e <_svfiprintf_r+0xf6>
 8004efe:	462f      	mov	r7, r5
 8004f00:	e7b8      	b.n	8004e74 <_svfiprintf_r+0x4c>
 8004f02:	4a40      	ldr	r2, [pc, #256]	; (8005004 <_svfiprintf_r+0x1dc>)
 8004f04:	463d      	mov	r5, r7
 8004f06:	1a80      	subs	r0, r0, r2
 8004f08:	fa0b f000 	lsl.w	r0, fp, r0
 8004f0c:	4318      	orrs	r0, r3
 8004f0e:	9004      	str	r0, [sp, #16]
 8004f10:	e7d3      	b.n	8004eba <_svfiprintf_r+0x92>
 8004f12:	9a03      	ldr	r2, [sp, #12]
 8004f14:	1d11      	adds	r1, r2, #4
 8004f16:	6812      	ldr	r2, [r2, #0]
 8004f18:	9103      	str	r1, [sp, #12]
 8004f1a:	2a00      	cmp	r2, #0
 8004f1c:	db01      	blt.n	8004f22 <_svfiprintf_r+0xfa>
 8004f1e:	9207      	str	r2, [sp, #28]
 8004f20:	e004      	b.n	8004f2c <_svfiprintf_r+0x104>
 8004f22:	4252      	negs	r2, r2
 8004f24:	f043 0302 	orr.w	r3, r3, #2
 8004f28:	9207      	str	r2, [sp, #28]
 8004f2a:	9304      	str	r3, [sp, #16]
 8004f2c:	783b      	ldrb	r3, [r7, #0]
 8004f2e:	2b2e      	cmp	r3, #46	; 0x2e
 8004f30:	d10c      	bne.n	8004f4c <_svfiprintf_r+0x124>
 8004f32:	787b      	ldrb	r3, [r7, #1]
 8004f34:	2b2a      	cmp	r3, #42	; 0x2a
 8004f36:	d133      	bne.n	8004fa0 <_svfiprintf_r+0x178>
 8004f38:	9b03      	ldr	r3, [sp, #12]
 8004f3a:	3702      	adds	r7, #2
 8004f3c:	1d1a      	adds	r2, r3, #4
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	9203      	str	r2, [sp, #12]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	bfb8      	it	lt
 8004f46:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004f4a:	9305      	str	r3, [sp, #20]
 8004f4c:	4d2e      	ldr	r5, [pc, #184]	; (8005008 <_svfiprintf_r+0x1e0>)
 8004f4e:	2203      	movs	r2, #3
 8004f50:	7839      	ldrb	r1, [r7, #0]
 8004f52:	4628      	mov	r0, r5
 8004f54:	f000 f9e8 	bl	8005328 <memchr>
 8004f58:	b138      	cbz	r0, 8004f6a <_svfiprintf_r+0x142>
 8004f5a:	2340      	movs	r3, #64	; 0x40
 8004f5c:	1b40      	subs	r0, r0, r5
 8004f5e:	fa03 f000 	lsl.w	r0, r3, r0
 8004f62:	9b04      	ldr	r3, [sp, #16]
 8004f64:	3701      	adds	r7, #1
 8004f66:	4303      	orrs	r3, r0
 8004f68:	9304      	str	r3, [sp, #16]
 8004f6a:	7839      	ldrb	r1, [r7, #0]
 8004f6c:	2206      	movs	r2, #6
 8004f6e:	4827      	ldr	r0, [pc, #156]	; (800500c <_svfiprintf_r+0x1e4>)
 8004f70:	1c7e      	adds	r6, r7, #1
 8004f72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004f76:	f000 f9d7 	bl	8005328 <memchr>
 8004f7a:	2800      	cmp	r0, #0
 8004f7c:	d038      	beq.n	8004ff0 <_svfiprintf_r+0x1c8>
 8004f7e:	4b24      	ldr	r3, [pc, #144]	; (8005010 <_svfiprintf_r+0x1e8>)
 8004f80:	bb13      	cbnz	r3, 8004fc8 <_svfiprintf_r+0x1a0>
 8004f82:	9b03      	ldr	r3, [sp, #12]
 8004f84:	3307      	adds	r3, #7
 8004f86:	f023 0307 	bic.w	r3, r3, #7
 8004f8a:	3308      	adds	r3, #8
 8004f8c:	9303      	str	r3, [sp, #12]
 8004f8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f90:	444b      	add	r3, r9
 8004f92:	9309      	str	r3, [sp, #36]	; 0x24
 8004f94:	e76d      	b.n	8004e72 <_svfiprintf_r+0x4a>
 8004f96:	fb05 3202 	mla	r2, r5, r2, r3
 8004f9a:	2001      	movs	r0, #1
 8004f9c:	460f      	mov	r7, r1
 8004f9e:	e7a6      	b.n	8004eee <_svfiprintf_r+0xc6>
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	250a      	movs	r5, #10
 8004fa4:	4619      	mov	r1, r3
 8004fa6:	3701      	adds	r7, #1
 8004fa8:	9305      	str	r3, [sp, #20]
 8004faa:	4638      	mov	r0, r7
 8004fac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004fb0:	3a30      	subs	r2, #48	; 0x30
 8004fb2:	2a09      	cmp	r2, #9
 8004fb4:	d903      	bls.n	8004fbe <_svfiprintf_r+0x196>
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d0c8      	beq.n	8004f4c <_svfiprintf_r+0x124>
 8004fba:	9105      	str	r1, [sp, #20]
 8004fbc:	e7c6      	b.n	8004f4c <_svfiprintf_r+0x124>
 8004fbe:	fb05 2101 	mla	r1, r5, r1, r2
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	4607      	mov	r7, r0
 8004fc6:	e7f0      	b.n	8004faa <_svfiprintf_r+0x182>
 8004fc8:	ab03      	add	r3, sp, #12
 8004fca:	9300      	str	r3, [sp, #0]
 8004fcc:	4622      	mov	r2, r4
 8004fce:	4b11      	ldr	r3, [pc, #68]	; (8005014 <_svfiprintf_r+0x1ec>)
 8004fd0:	a904      	add	r1, sp, #16
 8004fd2:	4640      	mov	r0, r8
 8004fd4:	f3af 8000 	nop.w
 8004fd8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8004fdc:	4681      	mov	r9, r0
 8004fde:	d1d6      	bne.n	8004f8e <_svfiprintf_r+0x166>
 8004fe0:	89a3      	ldrh	r3, [r4, #12]
 8004fe2:	065b      	lsls	r3, r3, #25
 8004fe4:	f53f af35 	bmi.w	8004e52 <_svfiprintf_r+0x2a>
 8004fe8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004fea:	b01d      	add	sp, #116	; 0x74
 8004fec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ff0:	ab03      	add	r3, sp, #12
 8004ff2:	9300      	str	r3, [sp, #0]
 8004ff4:	4622      	mov	r2, r4
 8004ff6:	4b07      	ldr	r3, [pc, #28]	; (8005014 <_svfiprintf_r+0x1ec>)
 8004ff8:	a904      	add	r1, sp, #16
 8004ffa:	4640      	mov	r0, r8
 8004ffc:	f000 f882 	bl	8005104 <_printf_i>
 8005000:	e7ea      	b.n	8004fd8 <_svfiprintf_r+0x1b0>
 8005002:	bf00      	nop
 8005004:	080055ec 	.word	0x080055ec
 8005008:	080055f2 	.word	0x080055f2
 800500c:	080055f6 	.word	0x080055f6
 8005010:	00000000 	.word	0x00000000
 8005014:	08004d75 	.word	0x08004d75

08005018 <_printf_common>:
 8005018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800501c:	4691      	mov	r9, r2
 800501e:	461f      	mov	r7, r3
 8005020:	688a      	ldr	r2, [r1, #8]
 8005022:	690b      	ldr	r3, [r1, #16]
 8005024:	4606      	mov	r6, r0
 8005026:	4293      	cmp	r3, r2
 8005028:	bfb8      	it	lt
 800502a:	4613      	movlt	r3, r2
 800502c:	f8c9 3000 	str.w	r3, [r9]
 8005030:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005034:	460c      	mov	r4, r1
 8005036:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800503a:	b112      	cbz	r2, 8005042 <_printf_common+0x2a>
 800503c:	3301      	adds	r3, #1
 800503e:	f8c9 3000 	str.w	r3, [r9]
 8005042:	6823      	ldr	r3, [r4, #0]
 8005044:	0699      	lsls	r1, r3, #26
 8005046:	bf42      	ittt	mi
 8005048:	f8d9 3000 	ldrmi.w	r3, [r9]
 800504c:	3302      	addmi	r3, #2
 800504e:	f8c9 3000 	strmi.w	r3, [r9]
 8005052:	6825      	ldr	r5, [r4, #0]
 8005054:	f015 0506 	ands.w	r5, r5, #6
 8005058:	d107      	bne.n	800506a <_printf_common+0x52>
 800505a:	f104 0a19 	add.w	sl, r4, #25
 800505e:	68e3      	ldr	r3, [r4, #12]
 8005060:	f8d9 2000 	ldr.w	r2, [r9]
 8005064:	1a9b      	subs	r3, r3, r2
 8005066:	42ab      	cmp	r3, r5
 8005068:	dc29      	bgt.n	80050be <_printf_common+0xa6>
 800506a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800506e:	6822      	ldr	r2, [r4, #0]
 8005070:	3300      	adds	r3, #0
 8005072:	bf18      	it	ne
 8005074:	2301      	movne	r3, #1
 8005076:	0692      	lsls	r2, r2, #26
 8005078:	d42e      	bmi.n	80050d8 <_printf_common+0xc0>
 800507a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800507e:	4639      	mov	r1, r7
 8005080:	4630      	mov	r0, r6
 8005082:	47c0      	blx	r8
 8005084:	3001      	adds	r0, #1
 8005086:	d021      	beq.n	80050cc <_printf_common+0xb4>
 8005088:	6823      	ldr	r3, [r4, #0]
 800508a:	68e5      	ldr	r5, [r4, #12]
 800508c:	f003 0306 	and.w	r3, r3, #6
 8005090:	2b04      	cmp	r3, #4
 8005092:	bf18      	it	ne
 8005094:	2500      	movne	r5, #0
 8005096:	f8d9 2000 	ldr.w	r2, [r9]
 800509a:	f04f 0900 	mov.w	r9, #0
 800509e:	bf08      	it	eq
 80050a0:	1aad      	subeq	r5, r5, r2
 80050a2:	68a3      	ldr	r3, [r4, #8]
 80050a4:	6922      	ldr	r2, [r4, #16]
 80050a6:	bf08      	it	eq
 80050a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050ac:	4293      	cmp	r3, r2
 80050ae:	bfc4      	itt	gt
 80050b0:	1a9b      	subgt	r3, r3, r2
 80050b2:	18ed      	addgt	r5, r5, r3
 80050b4:	341a      	adds	r4, #26
 80050b6:	454d      	cmp	r5, r9
 80050b8:	d11a      	bne.n	80050f0 <_printf_common+0xd8>
 80050ba:	2000      	movs	r0, #0
 80050bc:	e008      	b.n	80050d0 <_printf_common+0xb8>
 80050be:	2301      	movs	r3, #1
 80050c0:	4652      	mov	r2, sl
 80050c2:	4639      	mov	r1, r7
 80050c4:	4630      	mov	r0, r6
 80050c6:	47c0      	blx	r8
 80050c8:	3001      	adds	r0, #1
 80050ca:	d103      	bne.n	80050d4 <_printf_common+0xbc>
 80050cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80050d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050d4:	3501      	adds	r5, #1
 80050d6:	e7c2      	b.n	800505e <_printf_common+0x46>
 80050d8:	2030      	movs	r0, #48	; 0x30
 80050da:	18e1      	adds	r1, r4, r3
 80050dc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80050e0:	1c5a      	adds	r2, r3, #1
 80050e2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80050e6:	4422      	add	r2, r4
 80050e8:	3302      	adds	r3, #2
 80050ea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80050ee:	e7c4      	b.n	800507a <_printf_common+0x62>
 80050f0:	2301      	movs	r3, #1
 80050f2:	4622      	mov	r2, r4
 80050f4:	4639      	mov	r1, r7
 80050f6:	4630      	mov	r0, r6
 80050f8:	47c0      	blx	r8
 80050fa:	3001      	adds	r0, #1
 80050fc:	d0e6      	beq.n	80050cc <_printf_common+0xb4>
 80050fe:	f109 0901 	add.w	r9, r9, #1
 8005102:	e7d8      	b.n	80050b6 <_printf_common+0x9e>

08005104 <_printf_i>:
 8005104:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005108:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800510c:	460c      	mov	r4, r1
 800510e:	7e09      	ldrb	r1, [r1, #24]
 8005110:	b085      	sub	sp, #20
 8005112:	296e      	cmp	r1, #110	; 0x6e
 8005114:	4617      	mov	r7, r2
 8005116:	4606      	mov	r6, r0
 8005118:	4698      	mov	r8, r3
 800511a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800511c:	f000 80b3 	beq.w	8005286 <_printf_i+0x182>
 8005120:	d822      	bhi.n	8005168 <_printf_i+0x64>
 8005122:	2963      	cmp	r1, #99	; 0x63
 8005124:	d036      	beq.n	8005194 <_printf_i+0x90>
 8005126:	d80a      	bhi.n	800513e <_printf_i+0x3a>
 8005128:	2900      	cmp	r1, #0
 800512a:	f000 80b9 	beq.w	80052a0 <_printf_i+0x19c>
 800512e:	2958      	cmp	r1, #88	; 0x58
 8005130:	f000 8083 	beq.w	800523a <_printf_i+0x136>
 8005134:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005138:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800513c:	e032      	b.n	80051a4 <_printf_i+0xa0>
 800513e:	2964      	cmp	r1, #100	; 0x64
 8005140:	d001      	beq.n	8005146 <_printf_i+0x42>
 8005142:	2969      	cmp	r1, #105	; 0x69
 8005144:	d1f6      	bne.n	8005134 <_printf_i+0x30>
 8005146:	6820      	ldr	r0, [r4, #0]
 8005148:	6813      	ldr	r3, [r2, #0]
 800514a:	0605      	lsls	r5, r0, #24
 800514c:	f103 0104 	add.w	r1, r3, #4
 8005150:	d52a      	bpl.n	80051a8 <_printf_i+0xa4>
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	6011      	str	r1, [r2, #0]
 8005156:	2b00      	cmp	r3, #0
 8005158:	da03      	bge.n	8005162 <_printf_i+0x5e>
 800515a:	222d      	movs	r2, #45	; 0x2d
 800515c:	425b      	negs	r3, r3
 800515e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005162:	486f      	ldr	r0, [pc, #444]	; (8005320 <_printf_i+0x21c>)
 8005164:	220a      	movs	r2, #10
 8005166:	e039      	b.n	80051dc <_printf_i+0xd8>
 8005168:	2973      	cmp	r1, #115	; 0x73
 800516a:	f000 809d 	beq.w	80052a8 <_printf_i+0x1a4>
 800516e:	d808      	bhi.n	8005182 <_printf_i+0x7e>
 8005170:	296f      	cmp	r1, #111	; 0x6f
 8005172:	d020      	beq.n	80051b6 <_printf_i+0xb2>
 8005174:	2970      	cmp	r1, #112	; 0x70
 8005176:	d1dd      	bne.n	8005134 <_printf_i+0x30>
 8005178:	6823      	ldr	r3, [r4, #0]
 800517a:	f043 0320 	orr.w	r3, r3, #32
 800517e:	6023      	str	r3, [r4, #0]
 8005180:	e003      	b.n	800518a <_printf_i+0x86>
 8005182:	2975      	cmp	r1, #117	; 0x75
 8005184:	d017      	beq.n	80051b6 <_printf_i+0xb2>
 8005186:	2978      	cmp	r1, #120	; 0x78
 8005188:	d1d4      	bne.n	8005134 <_printf_i+0x30>
 800518a:	2378      	movs	r3, #120	; 0x78
 800518c:	4865      	ldr	r0, [pc, #404]	; (8005324 <_printf_i+0x220>)
 800518e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005192:	e055      	b.n	8005240 <_printf_i+0x13c>
 8005194:	6813      	ldr	r3, [r2, #0]
 8005196:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800519a:	1d19      	adds	r1, r3, #4
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	6011      	str	r1, [r2, #0]
 80051a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80051a4:	2301      	movs	r3, #1
 80051a6:	e08c      	b.n	80052c2 <_printf_i+0x1be>
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80051ae:	6011      	str	r1, [r2, #0]
 80051b0:	bf18      	it	ne
 80051b2:	b21b      	sxthne	r3, r3
 80051b4:	e7cf      	b.n	8005156 <_printf_i+0x52>
 80051b6:	6813      	ldr	r3, [r2, #0]
 80051b8:	6825      	ldr	r5, [r4, #0]
 80051ba:	1d18      	adds	r0, r3, #4
 80051bc:	6010      	str	r0, [r2, #0]
 80051be:	0628      	lsls	r0, r5, #24
 80051c0:	d501      	bpl.n	80051c6 <_printf_i+0xc2>
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	e002      	b.n	80051cc <_printf_i+0xc8>
 80051c6:	0668      	lsls	r0, r5, #25
 80051c8:	d5fb      	bpl.n	80051c2 <_printf_i+0xbe>
 80051ca:	881b      	ldrh	r3, [r3, #0]
 80051cc:	296f      	cmp	r1, #111	; 0x6f
 80051ce:	bf14      	ite	ne
 80051d0:	220a      	movne	r2, #10
 80051d2:	2208      	moveq	r2, #8
 80051d4:	4852      	ldr	r0, [pc, #328]	; (8005320 <_printf_i+0x21c>)
 80051d6:	2100      	movs	r1, #0
 80051d8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80051dc:	6865      	ldr	r5, [r4, #4]
 80051de:	2d00      	cmp	r5, #0
 80051e0:	60a5      	str	r5, [r4, #8]
 80051e2:	f2c0 8095 	blt.w	8005310 <_printf_i+0x20c>
 80051e6:	6821      	ldr	r1, [r4, #0]
 80051e8:	f021 0104 	bic.w	r1, r1, #4
 80051ec:	6021      	str	r1, [r4, #0]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d13d      	bne.n	800526e <_printf_i+0x16a>
 80051f2:	2d00      	cmp	r5, #0
 80051f4:	f040 808e 	bne.w	8005314 <_printf_i+0x210>
 80051f8:	4665      	mov	r5, ip
 80051fa:	2a08      	cmp	r2, #8
 80051fc:	d10b      	bne.n	8005216 <_printf_i+0x112>
 80051fe:	6823      	ldr	r3, [r4, #0]
 8005200:	07db      	lsls	r3, r3, #31
 8005202:	d508      	bpl.n	8005216 <_printf_i+0x112>
 8005204:	6923      	ldr	r3, [r4, #16]
 8005206:	6862      	ldr	r2, [r4, #4]
 8005208:	429a      	cmp	r2, r3
 800520a:	bfde      	ittt	le
 800520c:	2330      	movle	r3, #48	; 0x30
 800520e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005212:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005216:	ebac 0305 	sub.w	r3, ip, r5
 800521a:	6123      	str	r3, [r4, #16]
 800521c:	f8cd 8000 	str.w	r8, [sp]
 8005220:	463b      	mov	r3, r7
 8005222:	aa03      	add	r2, sp, #12
 8005224:	4621      	mov	r1, r4
 8005226:	4630      	mov	r0, r6
 8005228:	f7ff fef6 	bl	8005018 <_printf_common>
 800522c:	3001      	adds	r0, #1
 800522e:	d14d      	bne.n	80052cc <_printf_i+0x1c8>
 8005230:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005234:	b005      	add	sp, #20
 8005236:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800523a:	4839      	ldr	r0, [pc, #228]	; (8005320 <_printf_i+0x21c>)
 800523c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005240:	6813      	ldr	r3, [r2, #0]
 8005242:	6821      	ldr	r1, [r4, #0]
 8005244:	1d1d      	adds	r5, r3, #4
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	6015      	str	r5, [r2, #0]
 800524a:	060a      	lsls	r2, r1, #24
 800524c:	d50b      	bpl.n	8005266 <_printf_i+0x162>
 800524e:	07ca      	lsls	r2, r1, #31
 8005250:	bf44      	itt	mi
 8005252:	f041 0120 	orrmi.w	r1, r1, #32
 8005256:	6021      	strmi	r1, [r4, #0]
 8005258:	b91b      	cbnz	r3, 8005262 <_printf_i+0x15e>
 800525a:	6822      	ldr	r2, [r4, #0]
 800525c:	f022 0220 	bic.w	r2, r2, #32
 8005260:	6022      	str	r2, [r4, #0]
 8005262:	2210      	movs	r2, #16
 8005264:	e7b7      	b.n	80051d6 <_printf_i+0xd2>
 8005266:	064d      	lsls	r5, r1, #25
 8005268:	bf48      	it	mi
 800526a:	b29b      	uxthmi	r3, r3
 800526c:	e7ef      	b.n	800524e <_printf_i+0x14a>
 800526e:	4665      	mov	r5, ip
 8005270:	fbb3 f1f2 	udiv	r1, r3, r2
 8005274:	fb02 3311 	mls	r3, r2, r1, r3
 8005278:	5cc3      	ldrb	r3, [r0, r3]
 800527a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800527e:	460b      	mov	r3, r1
 8005280:	2900      	cmp	r1, #0
 8005282:	d1f5      	bne.n	8005270 <_printf_i+0x16c>
 8005284:	e7b9      	b.n	80051fa <_printf_i+0xf6>
 8005286:	6813      	ldr	r3, [r2, #0]
 8005288:	6825      	ldr	r5, [r4, #0]
 800528a:	1d18      	adds	r0, r3, #4
 800528c:	6961      	ldr	r1, [r4, #20]
 800528e:	6010      	str	r0, [r2, #0]
 8005290:	0628      	lsls	r0, r5, #24
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	d501      	bpl.n	800529a <_printf_i+0x196>
 8005296:	6019      	str	r1, [r3, #0]
 8005298:	e002      	b.n	80052a0 <_printf_i+0x19c>
 800529a:	066a      	lsls	r2, r5, #25
 800529c:	d5fb      	bpl.n	8005296 <_printf_i+0x192>
 800529e:	8019      	strh	r1, [r3, #0]
 80052a0:	2300      	movs	r3, #0
 80052a2:	4665      	mov	r5, ip
 80052a4:	6123      	str	r3, [r4, #16]
 80052a6:	e7b9      	b.n	800521c <_printf_i+0x118>
 80052a8:	6813      	ldr	r3, [r2, #0]
 80052aa:	1d19      	adds	r1, r3, #4
 80052ac:	6011      	str	r1, [r2, #0]
 80052ae:	681d      	ldr	r5, [r3, #0]
 80052b0:	6862      	ldr	r2, [r4, #4]
 80052b2:	2100      	movs	r1, #0
 80052b4:	4628      	mov	r0, r5
 80052b6:	f000 f837 	bl	8005328 <memchr>
 80052ba:	b108      	cbz	r0, 80052c0 <_printf_i+0x1bc>
 80052bc:	1b40      	subs	r0, r0, r5
 80052be:	6060      	str	r0, [r4, #4]
 80052c0:	6863      	ldr	r3, [r4, #4]
 80052c2:	6123      	str	r3, [r4, #16]
 80052c4:	2300      	movs	r3, #0
 80052c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052ca:	e7a7      	b.n	800521c <_printf_i+0x118>
 80052cc:	6923      	ldr	r3, [r4, #16]
 80052ce:	462a      	mov	r2, r5
 80052d0:	4639      	mov	r1, r7
 80052d2:	4630      	mov	r0, r6
 80052d4:	47c0      	blx	r8
 80052d6:	3001      	adds	r0, #1
 80052d8:	d0aa      	beq.n	8005230 <_printf_i+0x12c>
 80052da:	6823      	ldr	r3, [r4, #0]
 80052dc:	079b      	lsls	r3, r3, #30
 80052de:	d413      	bmi.n	8005308 <_printf_i+0x204>
 80052e0:	68e0      	ldr	r0, [r4, #12]
 80052e2:	9b03      	ldr	r3, [sp, #12]
 80052e4:	4298      	cmp	r0, r3
 80052e6:	bfb8      	it	lt
 80052e8:	4618      	movlt	r0, r3
 80052ea:	e7a3      	b.n	8005234 <_printf_i+0x130>
 80052ec:	2301      	movs	r3, #1
 80052ee:	464a      	mov	r2, r9
 80052f0:	4639      	mov	r1, r7
 80052f2:	4630      	mov	r0, r6
 80052f4:	47c0      	blx	r8
 80052f6:	3001      	adds	r0, #1
 80052f8:	d09a      	beq.n	8005230 <_printf_i+0x12c>
 80052fa:	3501      	adds	r5, #1
 80052fc:	68e3      	ldr	r3, [r4, #12]
 80052fe:	9a03      	ldr	r2, [sp, #12]
 8005300:	1a9b      	subs	r3, r3, r2
 8005302:	42ab      	cmp	r3, r5
 8005304:	dcf2      	bgt.n	80052ec <_printf_i+0x1e8>
 8005306:	e7eb      	b.n	80052e0 <_printf_i+0x1dc>
 8005308:	2500      	movs	r5, #0
 800530a:	f104 0919 	add.w	r9, r4, #25
 800530e:	e7f5      	b.n	80052fc <_printf_i+0x1f8>
 8005310:	2b00      	cmp	r3, #0
 8005312:	d1ac      	bne.n	800526e <_printf_i+0x16a>
 8005314:	7803      	ldrb	r3, [r0, #0]
 8005316:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800531a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800531e:	e76c      	b.n	80051fa <_printf_i+0xf6>
 8005320:	080055fd 	.word	0x080055fd
 8005324:	0800560e 	.word	0x0800560e

08005328 <memchr>:
 8005328:	b510      	push	{r4, lr}
 800532a:	b2c9      	uxtb	r1, r1
 800532c:	4402      	add	r2, r0
 800532e:	4290      	cmp	r0, r2
 8005330:	4603      	mov	r3, r0
 8005332:	d101      	bne.n	8005338 <memchr+0x10>
 8005334:	2300      	movs	r3, #0
 8005336:	e003      	b.n	8005340 <memchr+0x18>
 8005338:	781c      	ldrb	r4, [r3, #0]
 800533a:	3001      	adds	r0, #1
 800533c:	428c      	cmp	r4, r1
 800533e:	d1f6      	bne.n	800532e <memchr+0x6>
 8005340:	4618      	mov	r0, r3
 8005342:	bd10      	pop	{r4, pc}

08005344 <memcpy>:
 8005344:	b510      	push	{r4, lr}
 8005346:	1e43      	subs	r3, r0, #1
 8005348:	440a      	add	r2, r1
 800534a:	4291      	cmp	r1, r2
 800534c:	d100      	bne.n	8005350 <memcpy+0xc>
 800534e:	bd10      	pop	{r4, pc}
 8005350:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005354:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005358:	e7f7      	b.n	800534a <memcpy+0x6>

0800535a <memmove>:
 800535a:	4288      	cmp	r0, r1
 800535c:	b510      	push	{r4, lr}
 800535e:	eb01 0302 	add.w	r3, r1, r2
 8005362:	d807      	bhi.n	8005374 <memmove+0x1a>
 8005364:	1e42      	subs	r2, r0, #1
 8005366:	4299      	cmp	r1, r3
 8005368:	d00a      	beq.n	8005380 <memmove+0x26>
 800536a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800536e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005372:	e7f8      	b.n	8005366 <memmove+0xc>
 8005374:	4283      	cmp	r3, r0
 8005376:	d9f5      	bls.n	8005364 <memmove+0xa>
 8005378:	1881      	adds	r1, r0, r2
 800537a:	1ad2      	subs	r2, r2, r3
 800537c:	42d3      	cmn	r3, r2
 800537e:	d100      	bne.n	8005382 <memmove+0x28>
 8005380:	bd10      	pop	{r4, pc}
 8005382:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005386:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800538a:	e7f7      	b.n	800537c <memmove+0x22>

0800538c <_free_r>:
 800538c:	b538      	push	{r3, r4, r5, lr}
 800538e:	4605      	mov	r5, r0
 8005390:	2900      	cmp	r1, #0
 8005392:	d043      	beq.n	800541c <_free_r+0x90>
 8005394:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005398:	1f0c      	subs	r4, r1, #4
 800539a:	2b00      	cmp	r3, #0
 800539c:	bfb8      	it	lt
 800539e:	18e4      	addlt	r4, r4, r3
 80053a0:	f000 f8d0 	bl	8005544 <__malloc_lock>
 80053a4:	4a1e      	ldr	r2, [pc, #120]	; (8005420 <_free_r+0x94>)
 80053a6:	6813      	ldr	r3, [r2, #0]
 80053a8:	4610      	mov	r0, r2
 80053aa:	b933      	cbnz	r3, 80053ba <_free_r+0x2e>
 80053ac:	6063      	str	r3, [r4, #4]
 80053ae:	6014      	str	r4, [r2, #0]
 80053b0:	4628      	mov	r0, r5
 80053b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80053b6:	f000 b8c6 	b.w	8005546 <__malloc_unlock>
 80053ba:	42a3      	cmp	r3, r4
 80053bc:	d90b      	bls.n	80053d6 <_free_r+0x4a>
 80053be:	6821      	ldr	r1, [r4, #0]
 80053c0:	1862      	adds	r2, r4, r1
 80053c2:	4293      	cmp	r3, r2
 80053c4:	bf01      	itttt	eq
 80053c6:	681a      	ldreq	r2, [r3, #0]
 80053c8:	685b      	ldreq	r3, [r3, #4]
 80053ca:	1852      	addeq	r2, r2, r1
 80053cc:	6022      	streq	r2, [r4, #0]
 80053ce:	6063      	str	r3, [r4, #4]
 80053d0:	6004      	str	r4, [r0, #0]
 80053d2:	e7ed      	b.n	80053b0 <_free_r+0x24>
 80053d4:	4613      	mov	r3, r2
 80053d6:	685a      	ldr	r2, [r3, #4]
 80053d8:	b10a      	cbz	r2, 80053de <_free_r+0x52>
 80053da:	42a2      	cmp	r2, r4
 80053dc:	d9fa      	bls.n	80053d4 <_free_r+0x48>
 80053de:	6819      	ldr	r1, [r3, #0]
 80053e0:	1858      	adds	r0, r3, r1
 80053e2:	42a0      	cmp	r0, r4
 80053e4:	d10b      	bne.n	80053fe <_free_r+0x72>
 80053e6:	6820      	ldr	r0, [r4, #0]
 80053e8:	4401      	add	r1, r0
 80053ea:	1858      	adds	r0, r3, r1
 80053ec:	4282      	cmp	r2, r0
 80053ee:	6019      	str	r1, [r3, #0]
 80053f0:	d1de      	bne.n	80053b0 <_free_r+0x24>
 80053f2:	6810      	ldr	r0, [r2, #0]
 80053f4:	6852      	ldr	r2, [r2, #4]
 80053f6:	4401      	add	r1, r0
 80053f8:	6019      	str	r1, [r3, #0]
 80053fa:	605a      	str	r2, [r3, #4]
 80053fc:	e7d8      	b.n	80053b0 <_free_r+0x24>
 80053fe:	d902      	bls.n	8005406 <_free_r+0x7a>
 8005400:	230c      	movs	r3, #12
 8005402:	602b      	str	r3, [r5, #0]
 8005404:	e7d4      	b.n	80053b0 <_free_r+0x24>
 8005406:	6820      	ldr	r0, [r4, #0]
 8005408:	1821      	adds	r1, r4, r0
 800540a:	428a      	cmp	r2, r1
 800540c:	bf01      	itttt	eq
 800540e:	6811      	ldreq	r1, [r2, #0]
 8005410:	6852      	ldreq	r2, [r2, #4]
 8005412:	1809      	addeq	r1, r1, r0
 8005414:	6021      	streq	r1, [r4, #0]
 8005416:	6062      	str	r2, [r4, #4]
 8005418:	605c      	str	r4, [r3, #4]
 800541a:	e7c9      	b.n	80053b0 <_free_r+0x24>
 800541c:	bd38      	pop	{r3, r4, r5, pc}
 800541e:	bf00      	nop
 8005420:	20000174 	.word	0x20000174

08005424 <_malloc_r>:
 8005424:	b570      	push	{r4, r5, r6, lr}
 8005426:	1ccd      	adds	r5, r1, #3
 8005428:	f025 0503 	bic.w	r5, r5, #3
 800542c:	3508      	adds	r5, #8
 800542e:	2d0c      	cmp	r5, #12
 8005430:	bf38      	it	cc
 8005432:	250c      	movcc	r5, #12
 8005434:	2d00      	cmp	r5, #0
 8005436:	4606      	mov	r6, r0
 8005438:	db01      	blt.n	800543e <_malloc_r+0x1a>
 800543a:	42a9      	cmp	r1, r5
 800543c:	d903      	bls.n	8005446 <_malloc_r+0x22>
 800543e:	230c      	movs	r3, #12
 8005440:	6033      	str	r3, [r6, #0]
 8005442:	2000      	movs	r0, #0
 8005444:	bd70      	pop	{r4, r5, r6, pc}
 8005446:	f000 f87d 	bl	8005544 <__malloc_lock>
 800544a:	4a21      	ldr	r2, [pc, #132]	; (80054d0 <_malloc_r+0xac>)
 800544c:	6814      	ldr	r4, [r2, #0]
 800544e:	4621      	mov	r1, r4
 8005450:	b991      	cbnz	r1, 8005478 <_malloc_r+0x54>
 8005452:	4c20      	ldr	r4, [pc, #128]	; (80054d4 <_malloc_r+0xb0>)
 8005454:	6823      	ldr	r3, [r4, #0]
 8005456:	b91b      	cbnz	r3, 8005460 <_malloc_r+0x3c>
 8005458:	4630      	mov	r0, r6
 800545a:	f000 f863 	bl	8005524 <_sbrk_r>
 800545e:	6020      	str	r0, [r4, #0]
 8005460:	4629      	mov	r1, r5
 8005462:	4630      	mov	r0, r6
 8005464:	f000 f85e 	bl	8005524 <_sbrk_r>
 8005468:	1c43      	adds	r3, r0, #1
 800546a:	d124      	bne.n	80054b6 <_malloc_r+0x92>
 800546c:	230c      	movs	r3, #12
 800546e:	4630      	mov	r0, r6
 8005470:	6033      	str	r3, [r6, #0]
 8005472:	f000 f868 	bl	8005546 <__malloc_unlock>
 8005476:	e7e4      	b.n	8005442 <_malloc_r+0x1e>
 8005478:	680b      	ldr	r3, [r1, #0]
 800547a:	1b5b      	subs	r3, r3, r5
 800547c:	d418      	bmi.n	80054b0 <_malloc_r+0x8c>
 800547e:	2b0b      	cmp	r3, #11
 8005480:	d90f      	bls.n	80054a2 <_malloc_r+0x7e>
 8005482:	600b      	str	r3, [r1, #0]
 8005484:	18cc      	adds	r4, r1, r3
 8005486:	50cd      	str	r5, [r1, r3]
 8005488:	4630      	mov	r0, r6
 800548a:	f000 f85c 	bl	8005546 <__malloc_unlock>
 800548e:	f104 000b 	add.w	r0, r4, #11
 8005492:	1d23      	adds	r3, r4, #4
 8005494:	f020 0007 	bic.w	r0, r0, #7
 8005498:	1ac3      	subs	r3, r0, r3
 800549a:	d0d3      	beq.n	8005444 <_malloc_r+0x20>
 800549c:	425a      	negs	r2, r3
 800549e:	50e2      	str	r2, [r4, r3]
 80054a0:	e7d0      	b.n	8005444 <_malloc_r+0x20>
 80054a2:	684b      	ldr	r3, [r1, #4]
 80054a4:	428c      	cmp	r4, r1
 80054a6:	bf16      	itet	ne
 80054a8:	6063      	strne	r3, [r4, #4]
 80054aa:	6013      	streq	r3, [r2, #0]
 80054ac:	460c      	movne	r4, r1
 80054ae:	e7eb      	b.n	8005488 <_malloc_r+0x64>
 80054b0:	460c      	mov	r4, r1
 80054b2:	6849      	ldr	r1, [r1, #4]
 80054b4:	e7cc      	b.n	8005450 <_malloc_r+0x2c>
 80054b6:	1cc4      	adds	r4, r0, #3
 80054b8:	f024 0403 	bic.w	r4, r4, #3
 80054bc:	42a0      	cmp	r0, r4
 80054be:	d005      	beq.n	80054cc <_malloc_r+0xa8>
 80054c0:	1a21      	subs	r1, r4, r0
 80054c2:	4630      	mov	r0, r6
 80054c4:	f000 f82e 	bl	8005524 <_sbrk_r>
 80054c8:	3001      	adds	r0, #1
 80054ca:	d0cf      	beq.n	800546c <_malloc_r+0x48>
 80054cc:	6025      	str	r5, [r4, #0]
 80054ce:	e7db      	b.n	8005488 <_malloc_r+0x64>
 80054d0:	20000174 	.word	0x20000174
 80054d4:	20000178 	.word	0x20000178

080054d8 <_realloc_r>:
 80054d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054da:	4607      	mov	r7, r0
 80054dc:	4614      	mov	r4, r2
 80054de:	460e      	mov	r6, r1
 80054e0:	b921      	cbnz	r1, 80054ec <_realloc_r+0x14>
 80054e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80054e6:	4611      	mov	r1, r2
 80054e8:	f7ff bf9c 	b.w	8005424 <_malloc_r>
 80054ec:	b922      	cbnz	r2, 80054f8 <_realloc_r+0x20>
 80054ee:	f7ff ff4d 	bl	800538c <_free_r>
 80054f2:	4625      	mov	r5, r4
 80054f4:	4628      	mov	r0, r5
 80054f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054f8:	f000 f826 	bl	8005548 <_malloc_usable_size_r>
 80054fc:	42a0      	cmp	r0, r4
 80054fe:	d20f      	bcs.n	8005520 <_realloc_r+0x48>
 8005500:	4621      	mov	r1, r4
 8005502:	4638      	mov	r0, r7
 8005504:	f7ff ff8e 	bl	8005424 <_malloc_r>
 8005508:	4605      	mov	r5, r0
 800550a:	2800      	cmp	r0, #0
 800550c:	d0f2      	beq.n	80054f4 <_realloc_r+0x1c>
 800550e:	4631      	mov	r1, r6
 8005510:	4622      	mov	r2, r4
 8005512:	f7ff ff17 	bl	8005344 <memcpy>
 8005516:	4631      	mov	r1, r6
 8005518:	4638      	mov	r0, r7
 800551a:	f7ff ff37 	bl	800538c <_free_r>
 800551e:	e7e9      	b.n	80054f4 <_realloc_r+0x1c>
 8005520:	4635      	mov	r5, r6
 8005522:	e7e7      	b.n	80054f4 <_realloc_r+0x1c>

08005524 <_sbrk_r>:
 8005524:	b538      	push	{r3, r4, r5, lr}
 8005526:	2300      	movs	r3, #0
 8005528:	4c05      	ldr	r4, [pc, #20]	; (8005540 <_sbrk_r+0x1c>)
 800552a:	4605      	mov	r5, r0
 800552c:	4608      	mov	r0, r1
 800552e:	6023      	str	r3, [r4, #0]
 8005530:	f7fb fee2 	bl	80012f8 <_sbrk>
 8005534:	1c43      	adds	r3, r0, #1
 8005536:	d102      	bne.n	800553e <_sbrk_r+0x1a>
 8005538:	6823      	ldr	r3, [r4, #0]
 800553a:	b103      	cbz	r3, 800553e <_sbrk_r+0x1a>
 800553c:	602b      	str	r3, [r5, #0]
 800553e:	bd38      	pop	{r3, r4, r5, pc}
 8005540:	2000046c 	.word	0x2000046c

08005544 <__malloc_lock>:
 8005544:	4770      	bx	lr

08005546 <__malloc_unlock>:
 8005546:	4770      	bx	lr

08005548 <_malloc_usable_size_r>:
 8005548:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800554c:	1f18      	subs	r0, r3, #4
 800554e:	2b00      	cmp	r3, #0
 8005550:	bfbc      	itt	lt
 8005552:	580b      	ldrlt	r3, [r1, r0]
 8005554:	18c0      	addlt	r0, r0, r3
 8005556:	4770      	bx	lr

08005558 <_init>:
 8005558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800555a:	bf00      	nop
 800555c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800555e:	bc08      	pop	{r3}
 8005560:	469e      	mov	lr, r3
 8005562:	4770      	bx	lr

08005564 <_fini>:
 8005564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005566:	bf00      	nop
 8005568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800556a:	bc08      	pop	{r3}
 800556c:	469e      	mov	lr, r3
 800556e:	4770      	bx	lr
