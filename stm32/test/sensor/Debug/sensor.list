
sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042c0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  080043cc  080043cc  000143cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004450  08004450  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004450  08004450  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004450  08004450  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004450  08004450  00014450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004454  08004454  00014454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004458  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f8  20000070  080044c8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000368  080044c8  00020368  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cc16  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f7f  00000000  00000000  0002ccaf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d90  00000000  00000000  0002ec30  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c88  00000000  00000000  0002f9c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001521d  00000000  00000000  00030648  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009efb  00000000  00000000  00045865  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00077305  00000000  00000000  0004f760  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c6a65  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b38  00000000  00000000  000c6ae0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080043b4 	.word	0x080043b4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080043b4 	.word	0x080043b4

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fd78 	bl	8000c44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f840 	bl	80001d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f9ba 	bl	80004d0 <MX_GPIO_Init>
  MX_DMA_Init();
 800015c:	f000 f97a 	bl	8000454 <MX_DMA_Init>
  MX_ADC1_Init();
 8000160:	f000 f88a 	bl	8000278 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000164:	f000 f922 	bl	80003ac <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000168:	f000 f94a 	bl	8000400 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 800016c:	f000 f8d2 	bl	8000314 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  logSendIT("1of");
 8000170:	4b12      	ldr	r3, [pc, #72]	; (80001bc <main+0x70>)
 8000172:	4a13      	ldr	r2, [pc, #76]	; (80001c0 <main+0x74>)
 8000174:	6810      	ldr	r0, [r2, #0]
 8000176:	6018      	str	r0, [r3, #0]
 8000178:	2303      	movs	r3, #3
 800017a:	b29b      	uxth	r3, r3
 800017c:	461a      	mov	r2, r3
 800017e:	490f      	ldr	r1, [pc, #60]	; (80001bc <main+0x70>)
 8000180:	4810      	ldr	r0, [pc, #64]	; (80001c4 <main+0x78>)
 8000182:	f003 f97e 	bl	8003482 <HAL_UART_Transmit_IT>
  HAL_Delay(20);
 8000186:	2014      	movs	r0, #20
 8000188:	f000 fdbe 	bl	8000d08 <HAL_Delay>
  // HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, 2);

  HAL_ADCEx_Calibration_Start(&hadc1);
 800018c:	480e      	ldr	r0, [pc, #56]	; (80001c8 <main+0x7c>)
 800018e:	f001 fa5b 	bl	8001648 <HAL_ADCEx_Calibration_Start>
  HAL_TIM_Base_Start(&htim3);
 8000192:	480e      	ldr	r0, [pc, #56]	; (80001cc <main+0x80>)
 8000194:	f002 fdcb 	bl	8002d2e <HAL_TIM_Base_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, 4);
 8000198:	2204      	movs	r2, #4
 800019a:	490d      	ldr	r1, [pc, #52]	; (80001d0 <main+0x84>)
 800019c:	480a      	ldr	r0, [pc, #40]	; (80001c8 <main+0x7c>)
 800019e:	f000 fead 	bl	8000efc <HAL_ADC_Start_DMA>

  logSendIT("2ob");
 80001a2:	4b06      	ldr	r3, [pc, #24]	; (80001bc <main+0x70>)
 80001a4:	4a0b      	ldr	r2, [pc, #44]	; (80001d4 <main+0x88>)
 80001a6:	6810      	ldr	r0, [r2, #0]
 80001a8:	6018      	str	r0, [r3, #0]
 80001aa:	2303      	movs	r3, #3
 80001ac:	b29b      	uxth	r3, r3
 80001ae:	461a      	mov	r2, r3
 80001b0:	4902      	ldr	r1, [pc, #8]	; (80001bc <main+0x70>)
 80001b2:	4804      	ldr	r0, [pc, #16]	; (80001c4 <main+0x78>)
 80001b4:	f003 f965 	bl	8003482 <HAL_UART_Transmit_IT>
 
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001b8:	e7fe      	b.n	80001b8 <main+0x6c>
 80001ba:	bf00      	nop
 80001bc:	200002e0 	.word	0x200002e0
 80001c0:	080043cc 	.word	0x080043cc
 80001c4:	20000258 	.word	0x20000258
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	20000160 	.word	0x20000160
 80001d0:	200002dc 	.word	0x200002dc
 80001d4:	080043d0 	.word	0x080043d0

080001d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b094      	sub	sp, #80	; 0x50
 80001dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001e2:	2228      	movs	r2, #40	; 0x28
 80001e4:	2100      	movs	r1, #0
 80001e6:	4618      	mov	r0, r3
 80001e8:	f003 fcca 	bl	8003b80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001ec:	f107 0314 	add.w	r3, r7, #20
 80001f0:	2200      	movs	r2, #0
 80001f2:	601a      	str	r2, [r3, #0]
 80001f4:	605a      	str	r2, [r3, #4]
 80001f6:	609a      	str	r2, [r3, #8]
 80001f8:	60da      	str	r2, [r3, #12]
 80001fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001fc:	1d3b      	adds	r3, r7, #4
 80001fe:	2200      	movs	r2, #0
 8000200:	601a      	str	r2, [r3, #0]
 8000202:	605a      	str	r2, [r3, #4]
 8000204:	609a      	str	r2, [r3, #8]
 8000206:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000208:	2302      	movs	r3, #2
 800020a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800020c:	2301      	movs	r3, #1
 800020e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000210:	2310      	movs	r3, #16
 8000212:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000214:	2300      	movs	r3, #0
 8000216:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000218:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800021c:	4618      	mov	r0, r3
 800021e:	f001 ffcd 	bl	80021bc <HAL_RCC_OscConfig>
 8000222:	4603      	mov	r3, r0
 8000224:	2b00      	cmp	r3, #0
 8000226:	d001      	beq.n	800022c <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000228:	f000 f9e8 	bl	80005fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800022c:	230f      	movs	r3, #15
 800022e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000230:	2300      	movs	r3, #0
 8000232:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000234:	2300      	movs	r3, #0
 8000236:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000238:	2300      	movs	r3, #0
 800023a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800023c:	2300      	movs	r3, #0
 800023e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000240:	f107 0314 	add.w	r3, r7, #20
 8000244:	2100      	movs	r1, #0
 8000246:	4618      	mov	r0, r3
 8000248:	f002 fa38 	bl	80026bc <HAL_RCC_ClockConfig>
 800024c:	4603      	mov	r3, r0
 800024e:	2b00      	cmp	r3, #0
 8000250:	d001      	beq.n	8000256 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000252:	f000 f9d3 	bl	80005fc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000256:	2302      	movs	r3, #2
 8000258:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800025a:	2300      	movs	r3, #0
 800025c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800025e:	1d3b      	adds	r3, r7, #4
 8000260:	4618      	mov	r0, r3
 8000262:	f002 fbc7 	bl	80029f4 <HAL_RCCEx_PeriphCLKConfig>
 8000266:	4603      	mov	r3, r0
 8000268:	2b00      	cmp	r3, #0
 800026a:	d001      	beq.n	8000270 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800026c:	f000 f9c6 	bl	80005fc <Error_Handler>
  }
}
 8000270:	bf00      	nop
 8000272:	3750      	adds	r7, #80	; 0x50
 8000274:	46bd      	mov	sp, r7
 8000276:	bd80      	pop	{r7, pc}

08000278 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b084      	sub	sp, #16
 800027c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800027e:	1d3b      	adds	r3, r7, #4
 8000280:	2200      	movs	r2, #0
 8000282:	601a      	str	r2, [r3, #0]
 8000284:	605a      	str	r2, [r3, #4]
 8000286:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000288:	4b20      	ldr	r3, [pc, #128]	; (800030c <MX_ADC1_Init+0x94>)
 800028a:	4a21      	ldr	r2, [pc, #132]	; (8000310 <MX_ADC1_Init+0x98>)
 800028c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800028e:	4b1f      	ldr	r3, [pc, #124]	; (800030c <MX_ADC1_Init+0x94>)
 8000290:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000294:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000296:	4b1d      	ldr	r3, [pc, #116]	; (800030c <MX_ADC1_Init+0x94>)
 8000298:	2201      	movs	r2, #1
 800029a:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800029c:	4b1b      	ldr	r3, [pc, #108]	; (800030c <MX_ADC1_Init+0x94>)
 800029e:	2200      	movs	r2, #0
 80002a0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80002a2:	4b1a      	ldr	r3, [pc, #104]	; (800030c <MX_ADC1_Init+0x94>)
 80002a4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80002a8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002aa:	4b18      	ldr	r3, [pc, #96]	; (800030c <MX_ADC1_Init+0x94>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 80002b0:	4b16      	ldr	r3, [pc, #88]	; (800030c <MX_ADC1_Init+0x94>)
 80002b2:	2202      	movs	r2, #2
 80002b4:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002b6:	4815      	ldr	r0, [pc, #84]	; (800030c <MX_ADC1_Init+0x94>)
 80002b8:	f000 fd48 	bl	8000d4c <HAL_ADC_Init>
 80002bc:	4603      	mov	r3, r0
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d001      	beq.n	80002c6 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80002c2:	f000 f99b 	bl	80005fc <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80002c6:	2301      	movs	r3, #1
 80002c8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002ca:	2301      	movs	r3, #1
 80002cc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80002ce:	2307      	movs	r3, #7
 80002d0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002d2:	1d3b      	adds	r3, r7, #4
 80002d4:	4619      	mov	r1, r3
 80002d6:	480d      	ldr	r0, [pc, #52]	; (800030c <MX_ADC1_Init+0x94>)
 80002d8:	f000 ffcc 	bl	8001274 <HAL_ADC_ConfigChannel>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d001      	beq.n	80002e6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80002e2:	f000 f98b 	bl	80005fc <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80002e6:	2302      	movs	r3, #2
 80002e8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80002ea:	2302      	movs	r3, #2
 80002ec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002ee:	1d3b      	adds	r3, r7, #4
 80002f0:	4619      	mov	r1, r3
 80002f2:	4806      	ldr	r0, [pc, #24]	; (800030c <MX_ADC1_Init+0x94>)
 80002f4:	f000 ffbe 	bl	8001274 <HAL_ADC_ConfigChannel>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d001      	beq.n	8000302 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80002fe:	f000 f97d 	bl	80005fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000302:	bf00      	nop
 8000304:	3710      	adds	r7, #16
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}
 800030a:	bf00      	nop
 800030c:	200001e4 	.word	0x200001e4
 8000310:	40012400 	.word	0x40012400

08000314 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b086      	sub	sp, #24
 8000318:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800031a:	f107 0308 	add.w	r3, r7, #8
 800031e:	2200      	movs	r2, #0
 8000320:	601a      	str	r2, [r3, #0]
 8000322:	605a      	str	r2, [r3, #4]
 8000324:	609a      	str	r2, [r3, #8]
 8000326:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000328:	463b      	mov	r3, r7
 800032a:	2200      	movs	r2, #0
 800032c:	601a      	str	r2, [r3, #0]
 800032e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000330:	4b1c      	ldr	r3, [pc, #112]	; (80003a4 <MX_TIM3_Init+0x90>)
 8000332:	4a1d      	ldr	r2, [pc, #116]	; (80003a8 <MX_TIM3_Init+0x94>)
 8000334:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9;
 8000336:	4b1b      	ldr	r3, [pc, #108]	; (80003a4 <MX_TIM3_Init+0x90>)
 8000338:	2209      	movs	r2, #9
 800033a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800033c:	4b19      	ldr	r3, [pc, #100]	; (80003a4 <MX_TIM3_Init+0x90>)
 800033e:	2200      	movs	r2, #0
 8000340:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19;
 8000342:	4b18      	ldr	r3, [pc, #96]	; (80003a4 <MX_TIM3_Init+0x90>)
 8000344:	2213      	movs	r2, #19
 8000346:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000348:	4b16      	ldr	r3, [pc, #88]	; (80003a4 <MX_TIM3_Init+0x90>)
 800034a:	2200      	movs	r2, #0
 800034c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800034e:	4b15      	ldr	r3, [pc, #84]	; (80003a4 <MX_TIM3_Init+0x90>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000354:	4813      	ldr	r0, [pc, #76]	; (80003a4 <MX_TIM3_Init+0x90>)
 8000356:	f002 fcbf 	bl	8002cd8 <HAL_TIM_Base_Init>
 800035a:	4603      	mov	r3, r0
 800035c:	2b00      	cmp	r3, #0
 800035e:	d001      	beq.n	8000364 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8000360:	f000 f94c 	bl	80005fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000364:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000368:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800036a:	f107 0308 	add.w	r3, r7, #8
 800036e:	4619      	mov	r1, r3
 8000370:	480c      	ldr	r0, [pc, #48]	; (80003a4 <MX_TIM3_Init+0x90>)
 8000372:	f002 fe07 	bl	8002f84 <HAL_TIM_ConfigClockSource>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d001      	beq.n	8000380 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 800037c:	f000 f93e 	bl	80005fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000380:	2320      	movs	r3, #32
 8000382:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000384:	2300      	movs	r3, #0
 8000386:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000388:	463b      	mov	r3, r7
 800038a:	4619      	mov	r1, r3
 800038c:	4805      	ldr	r0, [pc, #20]	; (80003a4 <MX_TIM3_Init+0x90>)
 800038e:	f002 ffd5 	bl	800333c <HAL_TIMEx_MasterConfigSynchronization>
 8000392:	4603      	mov	r3, r0
 8000394:	2b00      	cmp	r3, #0
 8000396:	d001      	beq.n	800039c <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8000398:	f000 f930 	bl	80005fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800039c:	bf00      	nop
 800039e:	3718      	adds	r7, #24
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	20000160 	.word	0x20000160
 80003a8:	40000400 	.word	0x40000400

080003ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003b0:	4b11      	ldr	r3, [pc, #68]	; (80003f8 <MX_USART1_UART_Init+0x4c>)
 80003b2:	4a12      	ldr	r2, [pc, #72]	; (80003fc <MX_USART1_UART_Init+0x50>)
 80003b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80003b6:	4b10      	ldr	r3, [pc, #64]	; (80003f8 <MX_USART1_UART_Init+0x4c>)
 80003b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003be:	4b0e      	ldr	r3, [pc, #56]	; (80003f8 <MX_USART1_UART_Init+0x4c>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003c4:	4b0c      	ldr	r3, [pc, #48]	; (80003f8 <MX_USART1_UART_Init+0x4c>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003ca:	4b0b      	ldr	r3, [pc, #44]	; (80003f8 <MX_USART1_UART_Init+0x4c>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003d0:	4b09      	ldr	r3, [pc, #36]	; (80003f8 <MX_USART1_UART_Init+0x4c>)
 80003d2:	220c      	movs	r2, #12
 80003d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003d6:	4b08      	ldr	r3, [pc, #32]	; (80003f8 <MX_USART1_UART_Init+0x4c>)
 80003d8:	2200      	movs	r2, #0
 80003da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003dc:	4b06      	ldr	r3, [pc, #24]	; (80003f8 <MX_USART1_UART_Init+0x4c>)
 80003de:	2200      	movs	r2, #0
 80003e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003e2:	4805      	ldr	r0, [pc, #20]	; (80003f8 <MX_USART1_UART_Init+0x4c>)
 80003e4:	f003 f800 	bl	80033e8 <HAL_UART_Init>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d001      	beq.n	80003f2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80003ee:	f000 f905 	bl	80005fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003f2:	bf00      	nop
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	bf00      	nop
 80003f8:	20000258 	.word	0x20000258
 80003fc:	40013800 	.word	0x40013800

08000400 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000404:	4b11      	ldr	r3, [pc, #68]	; (800044c <MX_USART3_UART_Init+0x4c>)
 8000406:	4a12      	ldr	r2, [pc, #72]	; (8000450 <MX_USART3_UART_Init+0x50>)
 8000408:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800040a:	4b10      	ldr	r3, [pc, #64]	; (800044c <MX_USART3_UART_Init+0x4c>)
 800040c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000410:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000412:	4b0e      	ldr	r3, [pc, #56]	; (800044c <MX_USART3_UART_Init+0x4c>)
 8000414:	2200      	movs	r2, #0
 8000416:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000418:	4b0c      	ldr	r3, [pc, #48]	; (800044c <MX_USART3_UART_Init+0x4c>)
 800041a:	2200      	movs	r2, #0
 800041c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800041e:	4b0b      	ldr	r3, [pc, #44]	; (800044c <MX_USART3_UART_Init+0x4c>)
 8000420:	2200      	movs	r2, #0
 8000422:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000424:	4b09      	ldr	r3, [pc, #36]	; (800044c <MX_USART3_UART_Init+0x4c>)
 8000426:	220c      	movs	r2, #12
 8000428:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800042a:	4b08      	ldr	r3, [pc, #32]	; (800044c <MX_USART3_UART_Init+0x4c>)
 800042c:	2200      	movs	r2, #0
 800042e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000430:	4b06      	ldr	r3, [pc, #24]	; (800044c <MX_USART3_UART_Init+0x4c>)
 8000432:	2200      	movs	r2, #0
 8000434:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000436:	4805      	ldr	r0, [pc, #20]	; (800044c <MX_USART3_UART_Init+0x4c>)
 8000438:	f002 ffd6 	bl	80033e8 <HAL_UART_Init>
 800043c:	4603      	mov	r3, r0
 800043e:	2b00      	cmp	r3, #0
 8000440:	d001      	beq.n	8000446 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000442:	f000 f8db 	bl	80005fc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000446:	bf00      	nop
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	200000dc 	.word	0x200000dc
 8000450:	40004800 	.word	0x40004800

08000454 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800045a:	4b1c      	ldr	r3, [pc, #112]	; (80004cc <MX_DMA_Init+0x78>)
 800045c:	695b      	ldr	r3, [r3, #20]
 800045e:	4a1b      	ldr	r2, [pc, #108]	; (80004cc <MX_DMA_Init+0x78>)
 8000460:	f043 0301 	orr.w	r3, r3, #1
 8000464:	6153      	str	r3, [r2, #20]
 8000466:	4b19      	ldr	r3, [pc, #100]	; (80004cc <MX_DMA_Init+0x78>)
 8000468:	695b      	ldr	r3, [r3, #20]
 800046a:	f003 0301 	and.w	r3, r3, #1
 800046e:	607b      	str	r3, [r7, #4]
 8000470:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000472:	2200      	movs	r2, #0
 8000474:	2100      	movs	r1, #0
 8000476:	200b      	movs	r0, #11
 8000478:	f001 fa63 	bl	8001942 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800047c:	200b      	movs	r0, #11
 800047e:	f001 fa7c 	bl	800197a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000482:	2200      	movs	r2, #0
 8000484:	2100      	movs	r1, #0
 8000486:	200c      	movs	r0, #12
 8000488:	f001 fa5b 	bl	8001942 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800048c:	200c      	movs	r0, #12
 800048e:	f001 fa74 	bl	800197a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000492:	2200      	movs	r2, #0
 8000494:	2100      	movs	r1, #0
 8000496:	200d      	movs	r0, #13
 8000498:	f001 fa53 	bl	8001942 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800049c:	200d      	movs	r0, #13
 800049e:	f001 fa6c 	bl	800197a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80004a2:	2200      	movs	r2, #0
 80004a4:	2100      	movs	r1, #0
 80004a6:	200e      	movs	r0, #14
 80004a8:	f001 fa4b 	bl	8001942 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80004ac:	200e      	movs	r0, #14
 80004ae:	f001 fa64 	bl	800197a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80004b2:	2200      	movs	r2, #0
 80004b4:	2100      	movs	r1, #0
 80004b6:	200f      	movs	r0, #15
 80004b8:	f001 fa43 	bl	8001942 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80004bc:	200f      	movs	r0, #15
 80004be:	f001 fa5c 	bl	800197a <HAL_NVIC_EnableIRQ>

}
 80004c2:	bf00      	nop
 80004c4:	3708      	adds	r7, #8
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	40021000 	.word	0x40021000

080004d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b088      	sub	sp, #32
 80004d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d6:	f107 0310 	add.w	r3, r7, #16
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	605a      	str	r2, [r3, #4]
 80004e0:	609a      	str	r2, [r3, #8]
 80004e2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004e4:	4b27      	ldr	r3, [pc, #156]	; (8000584 <MX_GPIO_Init+0xb4>)
 80004e6:	699b      	ldr	r3, [r3, #24]
 80004e8:	4a26      	ldr	r2, [pc, #152]	; (8000584 <MX_GPIO_Init+0xb4>)
 80004ea:	f043 0320 	orr.w	r3, r3, #32
 80004ee:	6193      	str	r3, [r2, #24]
 80004f0:	4b24      	ldr	r3, [pc, #144]	; (8000584 <MX_GPIO_Init+0xb4>)
 80004f2:	699b      	ldr	r3, [r3, #24]
 80004f4:	f003 0320 	and.w	r3, r3, #32
 80004f8:	60fb      	str	r3, [r7, #12]
 80004fa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fc:	4b21      	ldr	r3, [pc, #132]	; (8000584 <MX_GPIO_Init+0xb4>)
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	4a20      	ldr	r2, [pc, #128]	; (8000584 <MX_GPIO_Init+0xb4>)
 8000502:	f043 0304 	orr.w	r3, r3, #4
 8000506:	6193      	str	r3, [r2, #24]
 8000508:	4b1e      	ldr	r3, [pc, #120]	; (8000584 <MX_GPIO_Init+0xb4>)
 800050a:	699b      	ldr	r3, [r3, #24]
 800050c:	f003 0304 	and.w	r3, r3, #4
 8000510:	60bb      	str	r3, [r7, #8]
 8000512:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000514:	4b1b      	ldr	r3, [pc, #108]	; (8000584 <MX_GPIO_Init+0xb4>)
 8000516:	699b      	ldr	r3, [r3, #24]
 8000518:	4a1a      	ldr	r2, [pc, #104]	; (8000584 <MX_GPIO_Init+0xb4>)
 800051a:	f043 0308 	orr.w	r3, r3, #8
 800051e:	6193      	str	r3, [r2, #24]
 8000520:	4b18      	ldr	r3, [pc, #96]	; (8000584 <MX_GPIO_Init+0xb4>)
 8000522:	699b      	ldr	r3, [r3, #24]
 8000524:	f003 0308 	and.w	r3, r3, #8
 8000528:	607b      	str	r3, [r7, #4]
 800052a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800052c:	2200      	movs	r2, #0
 800052e:	2140      	movs	r1, #64	; 0x40
 8000530:	4815      	ldr	r0, [pc, #84]	; (8000588 <MX_GPIO_Init+0xb8>)
 8000532:	f001 fdfb 	bl	800212c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000536:	2320      	movs	r3, #32
 8000538:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800053a:	4b14      	ldr	r3, [pc, #80]	; (800058c <MX_GPIO_Init+0xbc>)
 800053c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053e:	2300      	movs	r3, #0
 8000540:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000542:	f107 0310 	add.w	r3, r7, #16
 8000546:	4619      	mov	r1, r3
 8000548:	480f      	ldr	r0, [pc, #60]	; (8000588 <MX_GPIO_Init+0xb8>)
 800054a:	f001 fc95 	bl	8001e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800054e:	2340      	movs	r3, #64	; 0x40
 8000550:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000552:	2301      	movs	r3, #1
 8000554:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000556:	2300      	movs	r3, #0
 8000558:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800055a:	2302      	movs	r3, #2
 800055c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800055e:	f107 0310 	add.w	r3, r7, #16
 8000562:	4619      	mov	r1, r3
 8000564:	4808      	ldr	r0, [pc, #32]	; (8000588 <MX_GPIO_Init+0xb8>)
 8000566:	f001 fc87 	bl	8001e78 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 800056a:	2200      	movs	r2, #0
 800056c:	2101      	movs	r1, #1
 800056e:	2017      	movs	r0, #23
 8000570:	f001 f9e7 	bl	8001942 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000574:	2017      	movs	r0, #23
 8000576:	f001 fa00 	bl	800197a <HAL_NVIC_EnableIRQ>

}
 800057a:	bf00      	nop
 800057c:	3720      	adds	r7, #32
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	40021000 	.word	0x40021000
 8000588:	40010c00 	.word	0x40010c00
 800058c:	10110000 	.word	0x10110000

08000590 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
// 触摸开关控制灯的亮灭
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	4603      	mov	r3, r0
 8000598:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_5){
 800059a:	88fb      	ldrh	r3, [r7, #6]
 800059c:	2b20      	cmp	r3, #32
 800059e:	d103      	bne.n	80005a8 <HAL_GPIO_EXTI_Callback+0x18>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6);
 80005a0:	2140      	movs	r1, #64	; 0x40
 80005a2:	4803      	ldr	r0, [pc, #12]	; (80005b0 <HAL_GPIO_EXTI_Callback+0x20>)
 80005a4:	f001 fdda 	bl	800215c <HAL_GPIO_TogglePin>
	}
}
 80005a8:	bf00      	nop
 80005aa:	3708      	adds	r7, #8
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	40010c00 	.word	0x40010c00

080005b4 <HAL_ADC_ConvCpltCallback>:

// 时钟控制adc读取
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
	logSendIT("%d, %d\n", adc_buf[0], adc_buf[1]);
 80005bc:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <HAL_ADC_ConvCpltCallback+0x38>)
 80005be:	881b      	ldrh	r3, [r3, #0]
 80005c0:	461a      	mov	r2, r3
 80005c2:	4b0a      	ldr	r3, [pc, #40]	; (80005ec <HAL_ADC_ConvCpltCallback+0x38>)
 80005c4:	885b      	ldrh	r3, [r3, #2]
 80005c6:	490a      	ldr	r1, [pc, #40]	; (80005f0 <HAL_ADC_ConvCpltCallback+0x3c>)
 80005c8:	480a      	ldr	r0, [pc, #40]	; (80005f4 <HAL_ADC_ConvCpltCallback+0x40>)
 80005ca:	f003 fae1 	bl	8003b90 <siprintf>
 80005ce:	4603      	mov	r3, r0
 80005d0:	b29b      	uxth	r3, r3
 80005d2:	461a      	mov	r2, r3
 80005d4:	4907      	ldr	r1, [pc, #28]	; (80005f4 <HAL_ADC_ConvCpltCallback+0x40>)
 80005d6:	4808      	ldr	r0, [pc, #32]	; (80005f8 <HAL_ADC_ConvCpltCallback+0x44>)
 80005d8:	f002 ff53 	bl	8003482 <HAL_UART_Transmit_IT>
	HAL_Delay(100);
 80005dc:	2064      	movs	r0, #100	; 0x64
 80005de:	f000 fb93 	bl	8000d08 <HAL_Delay>
	/*
	if(hadc == &hadc1){
		logSendIT("%d, %d\n", adc_buf[0], adc_buf[1]);
	}*/
}
 80005e2:	bf00      	nop
 80005e4:	3708      	adds	r7, #8
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	200002dc 	.word	0x200002dc
 80005f0:	080043d4 	.word	0x080043d4
 80005f4:	200002e0 	.word	0x200002e0
 80005f8:	20000258 	.word	0x20000258

080005fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000600:	bf00      	nop
 8000602:	46bd      	mov	sp, r7
 8000604:	bc80      	pop	{r7}
 8000606:	4770      	bx	lr

08000608 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000608:	b480      	push	{r7}
 800060a:	b085      	sub	sp, #20
 800060c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800060e:	4b15      	ldr	r3, [pc, #84]	; (8000664 <HAL_MspInit+0x5c>)
 8000610:	699b      	ldr	r3, [r3, #24]
 8000612:	4a14      	ldr	r2, [pc, #80]	; (8000664 <HAL_MspInit+0x5c>)
 8000614:	f043 0301 	orr.w	r3, r3, #1
 8000618:	6193      	str	r3, [r2, #24]
 800061a:	4b12      	ldr	r3, [pc, #72]	; (8000664 <HAL_MspInit+0x5c>)
 800061c:	699b      	ldr	r3, [r3, #24]
 800061e:	f003 0301 	and.w	r3, r3, #1
 8000622:	60bb      	str	r3, [r7, #8]
 8000624:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000626:	4b0f      	ldr	r3, [pc, #60]	; (8000664 <HAL_MspInit+0x5c>)
 8000628:	69db      	ldr	r3, [r3, #28]
 800062a:	4a0e      	ldr	r2, [pc, #56]	; (8000664 <HAL_MspInit+0x5c>)
 800062c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000630:	61d3      	str	r3, [r2, #28]
 8000632:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <HAL_MspInit+0x5c>)
 8000634:	69db      	ldr	r3, [r3, #28]
 8000636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800063e:	4b0a      	ldr	r3, [pc, #40]	; (8000668 <HAL_MspInit+0x60>)
 8000640:	685b      	ldr	r3, [r3, #4]
 8000642:	60fb      	str	r3, [r7, #12]
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800064a:	60fb      	str	r3, [r7, #12]
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000652:	60fb      	str	r3, [r7, #12]
 8000654:	4a04      	ldr	r2, [pc, #16]	; (8000668 <HAL_MspInit+0x60>)
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800065a:	bf00      	nop
 800065c:	3714      	adds	r7, #20
 800065e:	46bd      	mov	sp, r7
 8000660:	bc80      	pop	{r7}
 8000662:	4770      	bx	lr
 8000664:	40021000 	.word	0x40021000
 8000668:	40010000 	.word	0x40010000

0800066c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b088      	sub	sp, #32
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000674:	f107 0310 	add.w	r3, r7, #16
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4a2d      	ldr	r2, [pc, #180]	; (800073c <HAL_ADC_MspInit+0xd0>)
 8000688:	4293      	cmp	r3, r2
 800068a:	d152      	bne.n	8000732 <HAL_ADC_MspInit+0xc6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800068c:	4b2c      	ldr	r3, [pc, #176]	; (8000740 <HAL_ADC_MspInit+0xd4>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	4a2b      	ldr	r2, [pc, #172]	; (8000740 <HAL_ADC_MspInit+0xd4>)
 8000692:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000696:	6193      	str	r3, [r2, #24]
 8000698:	4b29      	ldr	r3, [pc, #164]	; (8000740 <HAL_ADC_MspInit+0xd4>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80006a0:	60fb      	str	r3, [r7, #12]
 80006a2:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a4:	4b26      	ldr	r3, [pc, #152]	; (8000740 <HAL_ADC_MspInit+0xd4>)
 80006a6:	699b      	ldr	r3, [r3, #24]
 80006a8:	4a25      	ldr	r2, [pc, #148]	; (8000740 <HAL_ADC_MspInit+0xd4>)
 80006aa:	f043 0304 	orr.w	r3, r3, #4
 80006ae:	6193      	str	r3, [r2, #24]
 80006b0:	4b23      	ldr	r3, [pc, #140]	; (8000740 <HAL_ADC_MspInit+0xd4>)
 80006b2:	699b      	ldr	r3, [r3, #24]
 80006b4:	f003 0304 	and.w	r3, r3, #4
 80006b8:	60bb      	str	r3, [r7, #8]
 80006ba:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80006bc:	2306      	movs	r3, #6
 80006be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006c0:	2303      	movs	r3, #3
 80006c2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c4:	f107 0310 	add.w	r3, r7, #16
 80006c8:	4619      	mov	r1, r3
 80006ca:	481e      	ldr	r0, [pc, #120]	; (8000744 <HAL_ADC_MspInit+0xd8>)
 80006cc:	f001 fbd4 	bl	8001e78 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80006d0:	4b1d      	ldr	r3, [pc, #116]	; (8000748 <HAL_ADC_MspInit+0xdc>)
 80006d2:	4a1e      	ldr	r2, [pc, #120]	; (800074c <HAL_ADC_MspInit+0xe0>)
 80006d4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006d6:	4b1c      	ldr	r3, [pc, #112]	; (8000748 <HAL_ADC_MspInit+0xdc>)
 80006d8:	2200      	movs	r2, #0
 80006da:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006dc:	4b1a      	ldr	r3, [pc, #104]	; (8000748 <HAL_ADC_MspInit+0xdc>)
 80006de:	2200      	movs	r2, #0
 80006e0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006e2:	4b19      	ldr	r3, [pc, #100]	; (8000748 <HAL_ADC_MspInit+0xdc>)
 80006e4:	2280      	movs	r2, #128	; 0x80
 80006e6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006e8:	4b17      	ldr	r3, [pc, #92]	; (8000748 <HAL_ADC_MspInit+0xdc>)
 80006ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006ee:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006f0:	4b15      	ldr	r3, [pc, #84]	; (8000748 <HAL_ADC_MspInit+0xdc>)
 80006f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006f6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80006f8:	4b13      	ldr	r3, [pc, #76]	; (8000748 <HAL_ADC_MspInit+0xdc>)
 80006fa:	2220      	movs	r2, #32
 80006fc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80006fe:	4b12      	ldr	r3, [pc, #72]	; (8000748 <HAL_ADC_MspInit+0xdc>)
 8000700:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000704:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000706:	4810      	ldr	r0, [pc, #64]	; (8000748 <HAL_ADC_MspInit+0xdc>)
 8000708:	f001 f952 	bl	80019b0 <HAL_DMA_Init>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 8000712:	f7ff ff73 	bl	80005fc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	4a0b      	ldr	r2, [pc, #44]	; (8000748 <HAL_ADC_MspInit+0xdc>)
 800071a:	621a      	str	r2, [r3, #32]
 800071c:	4a0a      	ldr	r2, [pc, #40]	; (8000748 <HAL_ADC_MspInit+0xdc>)
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000722:	2200      	movs	r2, #0
 8000724:	2100      	movs	r1, #0
 8000726:	2012      	movs	r0, #18
 8000728:	f001 f90b 	bl	8001942 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800072c:	2012      	movs	r0, #18
 800072e:	f001 f924 	bl	800197a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000732:	bf00      	nop
 8000734:	3720      	adds	r7, #32
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	40012400 	.word	0x40012400
 8000740:	40021000 	.word	0x40021000
 8000744:	40010800 	.word	0x40010800
 8000748:	20000298 	.word	0x20000298
 800074c:	40020008 	.word	0x40020008

08000750 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a0d      	ldr	r2, [pc, #52]	; (8000794 <HAL_TIM_Base_MspInit+0x44>)
 800075e:	4293      	cmp	r3, r2
 8000760:	d113      	bne.n	800078a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000762:	4b0d      	ldr	r3, [pc, #52]	; (8000798 <HAL_TIM_Base_MspInit+0x48>)
 8000764:	69db      	ldr	r3, [r3, #28]
 8000766:	4a0c      	ldr	r2, [pc, #48]	; (8000798 <HAL_TIM_Base_MspInit+0x48>)
 8000768:	f043 0302 	orr.w	r3, r3, #2
 800076c:	61d3      	str	r3, [r2, #28]
 800076e:	4b0a      	ldr	r3, [pc, #40]	; (8000798 <HAL_TIM_Base_MspInit+0x48>)
 8000770:	69db      	ldr	r3, [r3, #28]
 8000772:	f003 0302 	and.w	r3, r3, #2
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 800077a:	2200      	movs	r2, #0
 800077c:	2101      	movs	r1, #1
 800077e:	201d      	movs	r0, #29
 8000780:	f001 f8df 	bl	8001942 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000784:	201d      	movs	r0, #29
 8000786:	f001 f8f8 	bl	800197a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800078a:	bf00      	nop
 800078c:	3710      	adds	r7, #16
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40000400 	.word	0x40000400
 8000798:	40021000 	.word	0x40021000

0800079c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b08a      	sub	sp, #40	; 0x28
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a4:	f107 0318 	add.w	r3, r7, #24
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
 80007ac:	605a      	str	r2, [r3, #4]
 80007ae:	609a      	str	r2, [r3, #8]
 80007b0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4a8d      	ldr	r2, [pc, #564]	; (80009ec <HAL_UART_MspInit+0x250>)
 80007b8:	4293      	cmp	r3, r2
 80007ba:	f040 8087 	bne.w	80008cc <HAL_UART_MspInit+0x130>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007be:	4b8c      	ldr	r3, [pc, #560]	; (80009f0 <HAL_UART_MspInit+0x254>)
 80007c0:	699b      	ldr	r3, [r3, #24]
 80007c2:	4a8b      	ldr	r2, [pc, #556]	; (80009f0 <HAL_UART_MspInit+0x254>)
 80007c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007c8:	6193      	str	r3, [r2, #24]
 80007ca:	4b89      	ldr	r3, [pc, #548]	; (80009f0 <HAL_UART_MspInit+0x254>)
 80007cc:	699b      	ldr	r3, [r3, #24]
 80007ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007d2:	617b      	str	r3, [r7, #20]
 80007d4:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d6:	4b86      	ldr	r3, [pc, #536]	; (80009f0 <HAL_UART_MspInit+0x254>)
 80007d8:	699b      	ldr	r3, [r3, #24]
 80007da:	4a85      	ldr	r2, [pc, #532]	; (80009f0 <HAL_UART_MspInit+0x254>)
 80007dc:	f043 0304 	orr.w	r3, r3, #4
 80007e0:	6193      	str	r3, [r2, #24]
 80007e2:	4b83      	ldr	r3, [pc, #524]	; (80009f0 <HAL_UART_MspInit+0x254>)
 80007e4:	699b      	ldr	r3, [r3, #24]
 80007e6:	f003 0304 	and.w	r3, r3, #4
 80007ea:	613b      	str	r3, [r7, #16]
 80007ec:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80007ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f4:	2302      	movs	r3, #2
 80007f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007f8:	2303      	movs	r3, #3
 80007fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fc:	f107 0318 	add.w	r3, r7, #24
 8000800:	4619      	mov	r1, r3
 8000802:	487c      	ldr	r0, [pc, #496]	; (80009f4 <HAL_UART_MspInit+0x258>)
 8000804:	f001 fb38 	bl	8001e78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000808:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800080c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800080e:	2300      	movs	r3, #0
 8000810:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000816:	f107 0318 	add.w	r3, r7, #24
 800081a:	4619      	mov	r1, r3
 800081c:	4875      	ldr	r0, [pc, #468]	; (80009f4 <HAL_UART_MspInit+0x258>)
 800081e:	f001 fb2b 	bl	8001e78 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000822:	4b75      	ldr	r3, [pc, #468]	; (80009f8 <HAL_UART_MspInit+0x25c>)
 8000824:	4a75      	ldr	r2, [pc, #468]	; (80009fc <HAL_UART_MspInit+0x260>)
 8000826:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000828:	4b73      	ldr	r3, [pc, #460]	; (80009f8 <HAL_UART_MspInit+0x25c>)
 800082a:	2200      	movs	r2, #0
 800082c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800082e:	4b72      	ldr	r3, [pc, #456]	; (80009f8 <HAL_UART_MspInit+0x25c>)
 8000830:	2200      	movs	r2, #0
 8000832:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000834:	4b70      	ldr	r3, [pc, #448]	; (80009f8 <HAL_UART_MspInit+0x25c>)
 8000836:	2280      	movs	r2, #128	; 0x80
 8000838:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800083a:	4b6f      	ldr	r3, [pc, #444]	; (80009f8 <HAL_UART_MspInit+0x25c>)
 800083c:	2200      	movs	r2, #0
 800083e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000840:	4b6d      	ldr	r3, [pc, #436]	; (80009f8 <HAL_UART_MspInit+0x25c>)
 8000842:	2200      	movs	r2, #0
 8000844:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000846:	4b6c      	ldr	r3, [pc, #432]	; (80009f8 <HAL_UART_MspInit+0x25c>)
 8000848:	2200      	movs	r2, #0
 800084a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800084c:	4b6a      	ldr	r3, [pc, #424]	; (80009f8 <HAL_UART_MspInit+0x25c>)
 800084e:	2200      	movs	r2, #0
 8000850:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000852:	4869      	ldr	r0, [pc, #420]	; (80009f8 <HAL_UART_MspInit+0x25c>)
 8000854:	f001 f8ac 	bl	80019b0 <HAL_DMA_Init>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 800085e:	f7ff fecd 	bl	80005fc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	4a64      	ldr	r2, [pc, #400]	; (80009f8 <HAL_UART_MspInit+0x25c>)
 8000866:	635a      	str	r2, [r3, #52]	; 0x34
 8000868:	4a63      	ldr	r2, [pc, #396]	; (80009f8 <HAL_UART_MspInit+0x25c>)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800086e:	4b64      	ldr	r3, [pc, #400]	; (8000a00 <HAL_UART_MspInit+0x264>)
 8000870:	4a64      	ldr	r2, [pc, #400]	; (8000a04 <HAL_UART_MspInit+0x268>)
 8000872:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000874:	4b62      	ldr	r3, [pc, #392]	; (8000a00 <HAL_UART_MspInit+0x264>)
 8000876:	2210      	movs	r2, #16
 8000878:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800087a:	4b61      	ldr	r3, [pc, #388]	; (8000a00 <HAL_UART_MspInit+0x264>)
 800087c:	2200      	movs	r2, #0
 800087e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000880:	4b5f      	ldr	r3, [pc, #380]	; (8000a00 <HAL_UART_MspInit+0x264>)
 8000882:	2280      	movs	r2, #128	; 0x80
 8000884:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000886:	4b5e      	ldr	r3, [pc, #376]	; (8000a00 <HAL_UART_MspInit+0x264>)
 8000888:	2200      	movs	r2, #0
 800088a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800088c:	4b5c      	ldr	r3, [pc, #368]	; (8000a00 <HAL_UART_MspInit+0x264>)
 800088e:	2200      	movs	r2, #0
 8000890:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000892:	4b5b      	ldr	r3, [pc, #364]	; (8000a00 <HAL_UART_MspInit+0x264>)
 8000894:	2200      	movs	r2, #0
 8000896:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000898:	4b59      	ldr	r3, [pc, #356]	; (8000a00 <HAL_UART_MspInit+0x264>)
 800089a:	2200      	movs	r2, #0
 800089c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800089e:	4858      	ldr	r0, [pc, #352]	; (8000a00 <HAL_UART_MspInit+0x264>)
 80008a0:	f001 f886 	bl	80019b0 <HAL_DMA_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 80008aa:	f7ff fea7 	bl	80005fc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	4a53      	ldr	r2, [pc, #332]	; (8000a00 <HAL_UART_MspInit+0x264>)
 80008b2:	631a      	str	r2, [r3, #48]	; 0x30
 80008b4:	4a52      	ldr	r2, [pc, #328]	; (8000a00 <HAL_UART_MspInit+0x264>)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80008ba:	2200      	movs	r2, #0
 80008bc:	2101      	movs	r1, #1
 80008be:	2025      	movs	r0, #37	; 0x25
 80008c0:	f001 f83f 	bl	8001942 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80008c4:	2025      	movs	r0, #37	; 0x25
 80008c6:	f001 f858 	bl	800197a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80008ca:	e08b      	b.n	80009e4 <HAL_UART_MspInit+0x248>
  else if(huart->Instance==USART3)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a4d      	ldr	r2, [pc, #308]	; (8000a08 <HAL_UART_MspInit+0x26c>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	f040 8086 	bne.w	80009e4 <HAL_UART_MspInit+0x248>
    __HAL_RCC_USART3_CLK_ENABLE();
 80008d8:	4b45      	ldr	r3, [pc, #276]	; (80009f0 <HAL_UART_MspInit+0x254>)
 80008da:	69db      	ldr	r3, [r3, #28]
 80008dc:	4a44      	ldr	r2, [pc, #272]	; (80009f0 <HAL_UART_MspInit+0x254>)
 80008de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008e2:	61d3      	str	r3, [r2, #28]
 80008e4:	4b42      	ldr	r3, [pc, #264]	; (80009f0 <HAL_UART_MspInit+0x254>)
 80008e6:	69db      	ldr	r3, [r3, #28]
 80008e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80008ec:	60fb      	str	r3, [r7, #12]
 80008ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f0:	4b3f      	ldr	r3, [pc, #252]	; (80009f0 <HAL_UART_MspInit+0x254>)
 80008f2:	699b      	ldr	r3, [r3, #24]
 80008f4:	4a3e      	ldr	r2, [pc, #248]	; (80009f0 <HAL_UART_MspInit+0x254>)
 80008f6:	f043 0308 	orr.w	r3, r3, #8
 80008fa:	6193      	str	r3, [r2, #24]
 80008fc:	4b3c      	ldr	r3, [pc, #240]	; (80009f0 <HAL_UART_MspInit+0x254>)
 80008fe:	699b      	ldr	r3, [r3, #24]
 8000900:	f003 0308 	and.w	r3, r3, #8
 8000904:	60bb      	str	r3, [r7, #8]
 8000906:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000908:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800090c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090e:	2302      	movs	r3, #2
 8000910:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000912:	2303      	movs	r3, #3
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000916:	f107 0318 	add.w	r3, r7, #24
 800091a:	4619      	mov	r1, r3
 800091c:	483b      	ldr	r0, [pc, #236]	; (8000a0c <HAL_UART_MspInit+0x270>)
 800091e:	f001 faab 	bl	8001e78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000922:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000926:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000928:	2300      	movs	r3, #0
 800092a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000930:	f107 0318 	add.w	r3, r7, #24
 8000934:	4619      	mov	r1, r3
 8000936:	4835      	ldr	r0, [pc, #212]	; (8000a0c <HAL_UART_MspInit+0x270>)
 8000938:	f001 fa9e 	bl	8001e78 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 800093c:	4b34      	ldr	r3, [pc, #208]	; (8000a10 <HAL_UART_MspInit+0x274>)
 800093e:	4a35      	ldr	r2, [pc, #212]	; (8000a14 <HAL_UART_MspInit+0x278>)
 8000940:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000942:	4b33      	ldr	r3, [pc, #204]	; (8000a10 <HAL_UART_MspInit+0x274>)
 8000944:	2200      	movs	r2, #0
 8000946:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000948:	4b31      	ldr	r3, [pc, #196]	; (8000a10 <HAL_UART_MspInit+0x274>)
 800094a:	2200      	movs	r2, #0
 800094c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800094e:	4b30      	ldr	r3, [pc, #192]	; (8000a10 <HAL_UART_MspInit+0x274>)
 8000950:	2280      	movs	r2, #128	; 0x80
 8000952:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000954:	4b2e      	ldr	r3, [pc, #184]	; (8000a10 <HAL_UART_MspInit+0x274>)
 8000956:	2200      	movs	r2, #0
 8000958:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800095a:	4b2d      	ldr	r3, [pc, #180]	; (8000a10 <HAL_UART_MspInit+0x274>)
 800095c:	2200      	movs	r2, #0
 800095e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8000960:	4b2b      	ldr	r3, [pc, #172]	; (8000a10 <HAL_UART_MspInit+0x274>)
 8000962:	2200      	movs	r2, #0
 8000964:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000966:	4b2a      	ldr	r3, [pc, #168]	; (8000a10 <HAL_UART_MspInit+0x274>)
 8000968:	2200      	movs	r2, #0
 800096a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800096c:	4828      	ldr	r0, [pc, #160]	; (8000a10 <HAL_UART_MspInit+0x274>)
 800096e:	f001 f81f 	bl	80019b0 <HAL_DMA_Init>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <HAL_UART_MspInit+0x1e0>
      Error_Handler();
 8000978:	f7ff fe40 	bl	80005fc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	4a24      	ldr	r2, [pc, #144]	; (8000a10 <HAL_UART_MspInit+0x274>)
 8000980:	635a      	str	r2, [r3, #52]	; 0x34
 8000982:	4a23      	ldr	r2, [pc, #140]	; (8000a10 <HAL_UART_MspInit+0x274>)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8000988:	4b23      	ldr	r3, [pc, #140]	; (8000a18 <HAL_UART_MspInit+0x27c>)
 800098a:	4a24      	ldr	r2, [pc, #144]	; (8000a1c <HAL_UART_MspInit+0x280>)
 800098c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800098e:	4b22      	ldr	r3, [pc, #136]	; (8000a18 <HAL_UART_MspInit+0x27c>)
 8000990:	2210      	movs	r2, #16
 8000992:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000994:	4b20      	ldr	r3, [pc, #128]	; (8000a18 <HAL_UART_MspInit+0x27c>)
 8000996:	2200      	movs	r2, #0
 8000998:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800099a:	4b1f      	ldr	r3, [pc, #124]	; (8000a18 <HAL_UART_MspInit+0x27c>)
 800099c:	2280      	movs	r2, #128	; 0x80
 800099e:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009a0:	4b1d      	ldr	r3, [pc, #116]	; (8000a18 <HAL_UART_MspInit+0x27c>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009a6:	4b1c      	ldr	r3, [pc, #112]	; (8000a18 <HAL_UART_MspInit+0x27c>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80009ac:	4b1a      	ldr	r3, [pc, #104]	; (8000a18 <HAL_UART_MspInit+0x27c>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80009b2:	4b19      	ldr	r3, [pc, #100]	; (8000a18 <HAL_UART_MspInit+0x27c>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80009b8:	4817      	ldr	r0, [pc, #92]	; (8000a18 <HAL_UART_MspInit+0x27c>)
 80009ba:	f000 fff9 	bl	80019b0 <HAL_DMA_Init>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <HAL_UART_MspInit+0x22c>
      Error_Handler();
 80009c4:	f7ff fe1a 	bl	80005fc <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	4a13      	ldr	r2, [pc, #76]	; (8000a18 <HAL_UART_MspInit+0x27c>)
 80009cc:	631a      	str	r2, [r3, #48]	; 0x30
 80009ce:	4a12      	ldr	r2, [pc, #72]	; (8000a18 <HAL_UART_MspInit+0x27c>)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 2, 0);
 80009d4:	2200      	movs	r2, #0
 80009d6:	2102      	movs	r1, #2
 80009d8:	2027      	movs	r0, #39	; 0x27
 80009da:	f000 ffb2 	bl	8001942 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80009de:	2027      	movs	r0, #39	; 0x27
 80009e0:	f000 ffcb 	bl	800197a <HAL_NVIC_EnableIRQ>
}
 80009e4:	bf00      	nop
 80009e6:	3728      	adds	r7, #40	; 0x28
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	40013800 	.word	0x40013800
 80009f0:	40021000 	.word	0x40021000
 80009f4:	40010800 	.word	0x40010800
 80009f8:	20000214 	.word	0x20000214
 80009fc:	40020058 	.word	0x40020058
 8000a00:	200001a0 	.word	0x200001a0
 8000a04:	40020044 	.word	0x40020044
 8000a08:	40004800 	.word	0x40004800
 8000a0c:	40010c00 	.word	0x40010c00
 8000a10:	20000098 	.word	0x20000098
 8000a14:	40020030 	.word	0x40020030
 8000a18:	2000011c 	.word	0x2000011c
 8000a1c:	4002001c 	.word	0x4002001c

08000a20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bc80      	pop	{r7}
 8000a2a:	4770      	bx	lr

08000a2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a30:	e7fe      	b.n	8000a30 <HardFault_Handler+0x4>

08000a32 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a32:	b480      	push	{r7}
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a36:	e7fe      	b.n	8000a36 <MemManage_Handler+0x4>

08000a38 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a3c:	e7fe      	b.n	8000a3c <BusFault_Handler+0x4>

08000a3e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a42:	e7fe      	b.n	8000a42 <UsageFault_Handler+0x4>

08000a44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bc80      	pop	{r7}
 8000a4e:	4770      	bx	lr

08000a50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a54:	bf00      	nop
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bc80      	pop	{r7}
 8000a5a:	4770      	bx	lr

08000a5c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a60:	bf00      	nop
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bc80      	pop	{r7}
 8000a66:	4770      	bx	lr

08000a68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a6c:	f000 f930 	bl	8000cd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a70:	bf00      	nop
 8000a72:	bd80      	pop	{r7, pc}

08000a74 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000a78:	4802      	ldr	r0, [pc, #8]	; (8000a84 <DMA1_Channel1_IRQHandler+0x10>)
 8000a7a:	f001 f8c9 	bl	8001c10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	20000298 	.word	0x20000298

08000a88 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000a8c:	4802      	ldr	r0, [pc, #8]	; (8000a98 <DMA1_Channel2_IRQHandler+0x10>)
 8000a8e:	f001 f8bf 	bl	8001c10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	2000011c 	.word	0x2000011c

08000a9c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000aa0:	4802      	ldr	r0, [pc, #8]	; (8000aac <DMA1_Channel3_IRQHandler+0x10>)
 8000aa2:	f001 f8b5 	bl	8001c10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	20000098 	.word	0x20000098

08000ab0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000ab4:	4802      	ldr	r0, [pc, #8]	; (8000ac0 <DMA1_Channel4_IRQHandler+0x10>)
 8000ab6:	f001 f8ab 	bl	8001c10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000aba:	bf00      	nop
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	200001a0 	.word	0x200001a0

08000ac4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000ac8:	4802      	ldr	r0, [pc, #8]	; (8000ad4 <DMA1_Channel5_IRQHandler+0x10>)
 8000aca:	f001 f8a1 	bl	8001c10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	20000214 	.word	0x20000214

08000ad8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000adc:	4802      	ldr	r0, [pc, #8]	; (8000ae8 <ADC1_2_IRQHandler+0x10>)
 8000ade:	f000 faeb 	bl	80010b8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	200001e4 	.word	0x200001e4

08000aec <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000af0:	2020      	movs	r0, #32
 8000af2:	f001 fb4b 	bl	800218c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
	...

08000afc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000b00:	4802      	ldr	r0, [pc, #8]	; (8000b0c <TIM3_IRQHandler+0x10>)
 8000b02:	f002 f937 	bl	8002d74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	20000160 	.word	0x20000160

08000b10 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b14:	4802      	ldr	r0, [pc, #8]	; (8000b20 <USART1_IRQHandler+0x10>)
 8000b16:	f002 fcf9 	bl	800350c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	20000258 	.word	0x20000258

08000b24 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000b28:	4802      	ldr	r0, [pc, #8]	; (8000b34 <USART3_IRQHandler+0x10>)
 8000b2a:	f002 fcef 	bl	800350c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	200000dc 	.word	0x200000dc

08000b38 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000b40:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <_sbrk+0x50>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d102      	bne.n	8000b4e <_sbrk+0x16>
		heap_end = &end;
 8000b48:	4b0f      	ldr	r3, [pc, #60]	; (8000b88 <_sbrk+0x50>)
 8000b4a:	4a10      	ldr	r2, [pc, #64]	; (8000b8c <_sbrk+0x54>)
 8000b4c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000b4e:	4b0e      	ldr	r3, [pc, #56]	; (8000b88 <_sbrk+0x50>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000b54:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <_sbrk+0x50>)
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	4413      	add	r3, r2
 8000b5c:	466a      	mov	r2, sp
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d907      	bls.n	8000b72 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000b62:	f002 ffe3 	bl	8003b2c <__errno>
 8000b66:	4602      	mov	r2, r0
 8000b68:	230c      	movs	r3, #12
 8000b6a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000b6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b70:	e006      	b.n	8000b80 <_sbrk+0x48>
	}

	heap_end += incr;
 8000b72:	4b05      	ldr	r3, [pc, #20]	; (8000b88 <_sbrk+0x50>)
 8000b74:	681a      	ldr	r2, [r3, #0]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	4413      	add	r3, r2
 8000b7a:	4a03      	ldr	r2, [pc, #12]	; (8000b88 <_sbrk+0x50>)
 8000b7c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000b7e:	68fb      	ldr	r3, [r7, #12]
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3710      	adds	r7, #16
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	2000008c 	.word	0x2000008c
 8000b8c:	20000368 	.word	0x20000368

08000b90 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000b94:	4b15      	ldr	r3, [pc, #84]	; (8000bec <SystemInit+0x5c>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a14      	ldr	r2, [pc, #80]	; (8000bec <SystemInit+0x5c>)
 8000b9a:	f043 0301 	orr.w	r3, r3, #1
 8000b9e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000ba0:	4b12      	ldr	r3, [pc, #72]	; (8000bec <SystemInit+0x5c>)
 8000ba2:	685a      	ldr	r2, [r3, #4]
 8000ba4:	4911      	ldr	r1, [pc, #68]	; (8000bec <SystemInit+0x5c>)
 8000ba6:	4b12      	ldr	r3, [pc, #72]	; (8000bf0 <SystemInit+0x60>)
 8000ba8:	4013      	ands	r3, r2
 8000baa:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000bac:	4b0f      	ldr	r3, [pc, #60]	; (8000bec <SystemInit+0x5c>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a0e      	ldr	r2, [pc, #56]	; (8000bec <SystemInit+0x5c>)
 8000bb2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000bb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bba:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000bbc:	4b0b      	ldr	r3, [pc, #44]	; (8000bec <SystemInit+0x5c>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a0a      	ldr	r2, [pc, #40]	; (8000bec <SystemInit+0x5c>)
 8000bc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bc6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000bc8:	4b08      	ldr	r3, [pc, #32]	; (8000bec <SystemInit+0x5c>)
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	4a07      	ldr	r2, [pc, #28]	; (8000bec <SystemInit+0x5c>)
 8000bce:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000bd2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000bd4:	4b05      	ldr	r3, [pc, #20]	; (8000bec <SystemInit+0x5c>)
 8000bd6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000bda:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000bdc:	4b05      	ldr	r3, [pc, #20]	; (8000bf4 <SystemInit+0x64>)
 8000bde:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000be2:	609a      	str	r2, [r3, #8]
#endif 
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bc80      	pop	{r7}
 8000bea:	4770      	bx	lr
 8000bec:	40021000 	.word	0x40021000
 8000bf0:	f8ff0000 	.word	0xf8ff0000
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000bf8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000bfa:	e003      	b.n	8000c04 <LoopCopyDataInit>

08000bfc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000bfc:	4b0b      	ldr	r3, [pc, #44]	; (8000c2c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000bfe:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000c00:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000c02:	3104      	adds	r1, #4

08000c04 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000c04:	480a      	ldr	r0, [pc, #40]	; (8000c30 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000c06:	4b0b      	ldr	r3, [pc, #44]	; (8000c34 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000c08:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000c0a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000c0c:	d3f6      	bcc.n	8000bfc <CopyDataInit>
  ldr r2, =_sbss
 8000c0e:	4a0a      	ldr	r2, [pc, #40]	; (8000c38 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000c10:	e002      	b.n	8000c18 <LoopFillZerobss>

08000c12 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000c12:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000c14:	f842 3b04 	str.w	r3, [r2], #4

08000c18 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000c18:	4b08      	ldr	r3, [pc, #32]	; (8000c3c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000c1a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000c1c:	d3f9      	bcc.n	8000c12 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c1e:	f7ff ffb7 	bl	8000b90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c22:	f002 ff89 	bl	8003b38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c26:	f7ff fa91 	bl	800014c <main>
  bx lr
 8000c2a:	4770      	bx	lr
  ldr r3, =_sidata
 8000c2c:	08004458 	.word	0x08004458
  ldr r0, =_sdata
 8000c30:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000c34:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000c38:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000c3c:	20000368 	.word	0x20000368

08000c40 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c40:	e7fe      	b.n	8000c40 <CAN1_RX1_IRQHandler>
	...

08000c44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c48:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <HAL_Init+0x28>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a07      	ldr	r2, [pc, #28]	; (8000c6c <HAL_Init+0x28>)
 8000c4e:	f043 0310 	orr.w	r3, r3, #16
 8000c52:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c54:	2003      	movs	r0, #3
 8000c56:	f000 fe69 	bl	800192c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c5a:	2000      	movs	r0, #0
 8000c5c:	f000 f808 	bl	8000c70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c60:	f7ff fcd2 	bl	8000608 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c64:	2300      	movs	r3, #0
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40022000 	.word	0x40022000

08000c70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c78:	4b12      	ldr	r3, [pc, #72]	; (8000cc4 <HAL_InitTick+0x54>)
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	4b12      	ldr	r3, [pc, #72]	; (8000cc8 <HAL_InitTick+0x58>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	4619      	mov	r1, r3
 8000c82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f000 fe81 	bl	8001996 <HAL_SYSTICK_Config>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e00e      	b.n	8000cbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	2b0f      	cmp	r3, #15
 8000ca2:	d80a      	bhi.n	8000cba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	6879      	ldr	r1, [r7, #4]
 8000ca8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cac:	f000 fe49 	bl	8001942 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cb0:	4a06      	ldr	r2, [pc, #24]	; (8000ccc <HAL_InitTick+0x5c>)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e000      	b.n	8000cbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cba:	2301      	movs	r3, #1
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	20000000 	.word	0x20000000
 8000cc8:	20000008 	.word	0x20000008
 8000ccc:	20000004 	.word	0x20000004

08000cd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cd4:	4b05      	ldr	r3, [pc, #20]	; (8000cec <HAL_IncTick+0x1c>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	461a      	mov	r2, r3
 8000cda:	4b05      	ldr	r3, [pc, #20]	; (8000cf0 <HAL_IncTick+0x20>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4413      	add	r3, r2
 8000ce0:	4a03      	ldr	r2, [pc, #12]	; (8000cf0 <HAL_IncTick+0x20>)
 8000ce2:	6013      	str	r3, [r2, #0]
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bc80      	pop	{r7}
 8000cea:	4770      	bx	lr
 8000cec:	20000008 	.word	0x20000008
 8000cf0:	20000360 	.word	0x20000360

08000cf4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cf8:	4b02      	ldr	r3, [pc, #8]	; (8000d04 <HAL_GetTick+0x10>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bc80      	pop	{r7}
 8000d02:	4770      	bx	lr
 8000d04:	20000360 	.word	0x20000360

08000d08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d10:	f7ff fff0 	bl	8000cf4 <HAL_GetTick>
 8000d14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d20:	d005      	beq.n	8000d2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d22:	4b09      	ldr	r3, [pc, #36]	; (8000d48 <HAL_Delay+0x40>)
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	461a      	mov	r2, r3
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	4413      	add	r3, r2
 8000d2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d2e:	bf00      	nop
 8000d30:	f7ff ffe0 	bl	8000cf4 <HAL_GetTick>
 8000d34:	4602      	mov	r2, r0
 8000d36:	68bb      	ldr	r3, [r7, #8]
 8000d38:	1ad3      	subs	r3, r2, r3
 8000d3a:	68fa      	ldr	r2, [r7, #12]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	d8f7      	bhi.n	8000d30 <HAL_Delay+0x28>
  {
  }
}
 8000d40:	bf00      	nop
 8000d42:	3710      	adds	r7, #16
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	20000008 	.word	0x20000008

08000d4c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b086      	sub	sp, #24
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d54:	2300      	movs	r3, #0
 8000d56:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000d60:	2300      	movs	r3, #0
 8000d62:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d101      	bne.n	8000d6e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e0be      	b.n	8000eec <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	689b      	ldr	r3, [r3, #8]
 8000d72:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d109      	bne.n	8000d90 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2200      	movs	r2, #0
 8000d80:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2200      	movs	r2, #0
 8000d86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f7ff fc6e 	bl	800066c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000d90:	6878      	ldr	r0, [r7, #4]
 8000d92:	f000 fbb9 	bl	8001508 <ADC_ConversionStop_Disable>
 8000d96:	4603      	mov	r3, r0
 8000d98:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d9e:	f003 0310 	and.w	r3, r3, #16
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f040 8099 	bne.w	8000eda <HAL_ADC_Init+0x18e>
 8000da8:	7dfb      	ldrb	r3, [r7, #23]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	f040 8095 	bne.w	8000eda <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000db4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000db8:	f023 0302 	bic.w	r3, r3, #2
 8000dbc:	f043 0202 	orr.w	r2, r3, #2
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000dcc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	7b1b      	ldrb	r3, [r3, #12]
 8000dd2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000dd4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000dd6:	68ba      	ldr	r2, [r7, #8]
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	689b      	ldr	r3, [r3, #8]
 8000de0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000de4:	d003      	beq.n	8000dee <HAL_ADC_Init+0xa2>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	689b      	ldr	r3, [r3, #8]
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d102      	bne.n	8000df4 <HAL_ADC_Init+0xa8>
 8000dee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000df2:	e000      	b.n	8000df6 <HAL_ADC_Init+0xaa>
 8000df4:	2300      	movs	r3, #0
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	7d1b      	ldrb	r3, [r3, #20]
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d119      	bne.n	8000e38 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	7b1b      	ldrb	r3, [r3, #12]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d109      	bne.n	8000e20 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	699b      	ldr	r3, [r3, #24]
 8000e10:	3b01      	subs	r3, #1
 8000e12:	035a      	lsls	r2, r3, #13
 8000e14:	693b      	ldr	r3, [r7, #16]
 8000e16:	4313      	orrs	r3, r2
 8000e18:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e1c:	613b      	str	r3, [r7, #16]
 8000e1e:	e00b      	b.n	8000e38 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e24:	f043 0220 	orr.w	r2, r3, #32
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e30:	f043 0201 	orr.w	r2, r3, #1
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	430a      	orrs	r2, r1
 8000e4a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	689a      	ldr	r2, [r3, #8]
 8000e52:	4b28      	ldr	r3, [pc, #160]	; (8000ef4 <HAL_ADC_Init+0x1a8>)
 8000e54:	4013      	ands	r3, r2
 8000e56:	687a      	ldr	r2, [r7, #4]
 8000e58:	6812      	ldr	r2, [r2, #0]
 8000e5a:	68b9      	ldr	r1, [r7, #8]
 8000e5c:	430b      	orrs	r3, r1
 8000e5e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	689b      	ldr	r3, [r3, #8]
 8000e64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e68:	d003      	beq.n	8000e72 <HAL_ADC_Init+0x126>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	689b      	ldr	r3, [r3, #8]
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d104      	bne.n	8000e7c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	691b      	ldr	r3, [r3, #16]
 8000e76:	3b01      	subs	r3, #1
 8000e78:	051b      	lsls	r3, r3, #20
 8000e7a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e82:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	68fa      	ldr	r2, [r7, #12]
 8000e8c:	430a      	orrs	r2, r1
 8000e8e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	689a      	ldr	r2, [r3, #8]
 8000e96:	4b18      	ldr	r3, [pc, #96]	; (8000ef8 <HAL_ADC_Init+0x1ac>)
 8000e98:	4013      	ands	r3, r2
 8000e9a:	68ba      	ldr	r2, [r7, #8]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	d10b      	bne.n	8000eb8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eaa:	f023 0303 	bic.w	r3, r3, #3
 8000eae:	f043 0201 	orr.w	r2, r3, #1
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000eb6:	e018      	b.n	8000eea <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ebc:	f023 0312 	bic.w	r3, r3, #18
 8000ec0:	f043 0210 	orr.w	r2, r3, #16
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ecc:	f043 0201 	orr.w	r2, r3, #1
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ed8:	e007      	b.n	8000eea <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ede:	f043 0210 	orr.w	r2, r3, #16
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000eea:	7dfb      	ldrb	r3, [r7, #23]
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3718      	adds	r7, #24
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	ffe1f7fd 	.word	0xffe1f7fd
 8000ef8:	ff1f0efe 	.word	0xff1f0efe

08000efc <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	60f8      	str	r0, [r7, #12]
 8000f04:	60b9      	str	r1, [r7, #8]
 8000f06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a64      	ldr	r2, [pc, #400]	; (80010a4 <HAL_ADC_Start_DMA+0x1a8>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d004      	beq.n	8000f20 <HAL_ADC_Start_DMA+0x24>
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a63      	ldr	r2, [pc, #396]	; (80010a8 <HAL_ADC_Start_DMA+0x1ac>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d106      	bne.n	8000f2e <HAL_ADC_Start_DMA+0x32>
 8000f20:	4b60      	ldr	r3, [pc, #384]	; (80010a4 <HAL_ADC_Start_DMA+0x1a8>)
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	f040 80b3 	bne.w	8001094 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d101      	bne.n	8000f3c <HAL_ADC_Start_DMA+0x40>
 8000f38:	2302      	movs	r3, #2
 8000f3a:	e0ae      	b.n	800109a <HAL_ADC_Start_DMA+0x19e>
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	2201      	movs	r2, #1
 8000f40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000f44:	68f8      	ldr	r0, [r7, #12]
 8000f46:	f000 fa8d 	bl	8001464 <ADC_Enable>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000f4e:	7dfb      	ldrb	r3, [r7, #23]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	f040 809a 	bne.w	800108a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f5a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000f5e:	f023 0301 	bic.w	r3, r3, #1
 8000f62:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a4e      	ldr	r2, [pc, #312]	; (80010a8 <HAL_ADC_Start_DMA+0x1ac>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d105      	bne.n	8000f80 <HAL_ADC_Start_DMA+0x84>
 8000f74:	4b4b      	ldr	r3, [pc, #300]	; (80010a4 <HAL_ADC_Start_DMA+0x1a8>)
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d115      	bne.n	8000fac <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f84:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d026      	beq.n	8000fe8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f9e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000fa2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000faa:	e01d      	b.n	8000fe8 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fb0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a39      	ldr	r2, [pc, #228]	; (80010a4 <HAL_ADC_Start_DMA+0x1a8>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d004      	beq.n	8000fcc <HAL_ADC_Start_DMA+0xd0>
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a38      	ldr	r2, [pc, #224]	; (80010a8 <HAL_ADC_Start_DMA+0x1ac>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d10d      	bne.n	8000fe8 <HAL_ADC_Start_DMA+0xec>
 8000fcc:	4b35      	ldr	r3, [pc, #212]	; (80010a4 <HAL_ADC_Start_DMA+0x1a8>)
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d007      	beq.n	8000fe8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fdc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000fe0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d006      	beq.n	8001002 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ff8:	f023 0206 	bic.w	r2, r3, #6
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	62da      	str	r2, [r3, #44]	; 0x2c
 8001000:	e002      	b.n	8001008 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	2200      	movs	r2, #0
 8001006:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	2200      	movs	r2, #0
 800100c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	6a1b      	ldr	r3, [r3, #32]
 8001014:	4a25      	ldr	r2, [pc, #148]	; (80010ac <HAL_ADC_Start_DMA+0x1b0>)
 8001016:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	6a1b      	ldr	r3, [r3, #32]
 800101c:	4a24      	ldr	r2, [pc, #144]	; (80010b0 <HAL_ADC_Start_DMA+0x1b4>)
 800101e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	6a1b      	ldr	r3, [r3, #32]
 8001024:	4a23      	ldr	r2, [pc, #140]	; (80010b4 <HAL_ADC_Start_DMA+0x1b8>)
 8001026:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f06f 0202 	mvn.w	r2, #2
 8001030:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	689a      	ldr	r2, [r3, #8]
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001040:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	6a18      	ldr	r0, [r3, #32]
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	334c      	adds	r3, #76	; 0x4c
 800104c:	4619      	mov	r1, r3
 800104e:	68ba      	ldr	r2, [r7, #8]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f000 fd07 	bl	8001a64 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001060:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001064:	d108      	bne.n	8001078 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	689a      	ldr	r2, [r3, #8]
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001074:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001076:	e00f      	b.n	8001098 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	689a      	ldr	r2, [r3, #8]
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001086:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001088:	e006      	b.n	8001098 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	2200      	movs	r2, #0
 800108e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001092:	e001      	b.n	8001098 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001094:	2301      	movs	r3, #1
 8001096:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001098:	7dfb      	ldrb	r3, [r7, #23]
}
 800109a:	4618      	mov	r0, r3
 800109c:	3718      	adds	r7, #24
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40012400 	.word	0x40012400
 80010a8:	40012800 	.word	0x40012800
 80010ac:	0800157d 	.word	0x0800157d
 80010b0:	080015f9 	.word	0x080015f9
 80010b4:	08001615 	.word	0x08001615

080010b8 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f003 0320 	and.w	r3, r3, #32
 80010ca:	2b20      	cmp	r3, #32
 80010cc:	d140      	bne.n	8001150 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f003 0302 	and.w	r3, r3, #2
 80010d8:	2b02      	cmp	r3, #2
 80010da:	d139      	bne.n	8001150 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010e0:	f003 0310 	and.w	r3, r3, #16
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d105      	bne.n	80010f4 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ec:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	689b      	ldr	r3, [r3, #8]
 80010fa:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80010fe:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001102:	d11d      	bne.n	8001140 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001108:	2b00      	cmp	r3, #0
 800110a:	d119      	bne.n	8001140 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	685a      	ldr	r2, [r3, #4]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f022 0220 	bic.w	r2, r2, #32
 800111a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001120:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800112c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001130:	2b00      	cmp	r3, #0
 8001132:	d105      	bne.n	8001140 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001138:	f043 0201 	orr.w	r2, r3, #1
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f7ff fa37 	bl	80005b4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f06f 0212 	mvn.w	r2, #18
 800114e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800115a:	2b80      	cmp	r3, #128	; 0x80
 800115c:	d14f      	bne.n	80011fe <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f003 0304 	and.w	r3, r3, #4
 8001168:	2b04      	cmp	r3, #4
 800116a:	d148      	bne.n	80011fe <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001170:	f003 0310 	and.w	r3, r3, #16
 8001174:	2b00      	cmp	r3, #0
 8001176:	d105      	bne.n	8001184 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800117c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800118e:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001192:	d012      	beq.n	80011ba <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d125      	bne.n	80011ee <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80011ac:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80011b0:	d11d      	bne.n	80011ee <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d119      	bne.n	80011ee <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	685a      	ldr	r2, [r3, #4]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011c8:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d105      	bne.n	80011ee <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011e6:	f043 0201 	orr.w	r2, r3, #1
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f000 fac6 	bl	8001780 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f06f 020c 	mvn.w	r2, #12
 80011fc:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001208:	2b40      	cmp	r3, #64	; 0x40
 800120a:	d114      	bne.n	8001236 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	2b01      	cmp	r3, #1
 8001218:	d10d      	bne.n	8001236 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800121e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f000 f812 	bl	8001250 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f06f 0201 	mvn.w	r2, #1
 8001234:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800123e:	b480      	push	{r7}
 8001240:	b083      	sub	sp, #12
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001246:	bf00      	nop
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	bc80      	pop	{r7}
 800124e:	4770      	bx	lr

08001250 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001258:	bf00      	nop
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	bc80      	pop	{r7}
 8001260:	4770      	bx	lr

08001262 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001262:	b480      	push	{r7}
 8001264:	b083      	sub	sp, #12
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800126a:	bf00      	nop
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	bc80      	pop	{r7}
 8001272:	4770      	bx	lr

08001274 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001274:	b480      	push	{r7}
 8001276:	b085      	sub	sp, #20
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800127e:	2300      	movs	r3, #0
 8001280:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001282:	2300      	movs	r3, #0
 8001284:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800128c:	2b01      	cmp	r3, #1
 800128e:	d101      	bne.n	8001294 <HAL_ADC_ConfigChannel+0x20>
 8001290:	2302      	movs	r3, #2
 8001292:	e0dc      	b.n	800144e <HAL_ADC_ConfigChannel+0x1da>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2201      	movs	r2, #1
 8001298:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	2b06      	cmp	r3, #6
 80012a2:	d81c      	bhi.n	80012de <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685a      	ldr	r2, [r3, #4]
 80012ae:	4613      	mov	r3, r2
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	4413      	add	r3, r2
 80012b4:	3b05      	subs	r3, #5
 80012b6:	221f      	movs	r2, #31
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	43db      	mvns	r3, r3
 80012be:	4019      	ands	r1, r3
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	6818      	ldr	r0, [r3, #0]
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685a      	ldr	r2, [r3, #4]
 80012c8:	4613      	mov	r3, r2
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	4413      	add	r3, r2
 80012ce:	3b05      	subs	r3, #5
 80012d0:	fa00 f203 	lsl.w	r2, r0, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	430a      	orrs	r2, r1
 80012da:	635a      	str	r2, [r3, #52]	; 0x34
 80012dc:	e03c      	b.n	8001358 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	2b0c      	cmp	r3, #12
 80012e4:	d81c      	bhi.n	8001320 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685a      	ldr	r2, [r3, #4]
 80012f0:	4613      	mov	r3, r2
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	4413      	add	r3, r2
 80012f6:	3b23      	subs	r3, #35	; 0x23
 80012f8:	221f      	movs	r2, #31
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	43db      	mvns	r3, r3
 8001300:	4019      	ands	r1, r3
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	6818      	ldr	r0, [r3, #0]
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685a      	ldr	r2, [r3, #4]
 800130a:	4613      	mov	r3, r2
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	4413      	add	r3, r2
 8001310:	3b23      	subs	r3, #35	; 0x23
 8001312:	fa00 f203 	lsl.w	r2, r0, r3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	430a      	orrs	r2, r1
 800131c:	631a      	str	r2, [r3, #48]	; 0x30
 800131e:	e01b      	b.n	8001358 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685a      	ldr	r2, [r3, #4]
 800132a:	4613      	mov	r3, r2
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	4413      	add	r3, r2
 8001330:	3b41      	subs	r3, #65	; 0x41
 8001332:	221f      	movs	r2, #31
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	43db      	mvns	r3, r3
 800133a:	4019      	ands	r1, r3
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	6818      	ldr	r0, [r3, #0]
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685a      	ldr	r2, [r3, #4]
 8001344:	4613      	mov	r3, r2
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	4413      	add	r3, r2
 800134a:	3b41      	subs	r3, #65	; 0x41
 800134c:	fa00 f203 	lsl.w	r2, r0, r3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	430a      	orrs	r2, r1
 8001356:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2b09      	cmp	r3, #9
 800135e:	d91c      	bls.n	800139a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	68d9      	ldr	r1, [r3, #12]
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	4613      	mov	r3, r2
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	4413      	add	r3, r2
 8001370:	3b1e      	subs	r3, #30
 8001372:	2207      	movs	r2, #7
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	43db      	mvns	r3, r3
 800137a:	4019      	ands	r1, r3
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	6898      	ldr	r0, [r3, #8]
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	4613      	mov	r3, r2
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	4413      	add	r3, r2
 800138a:	3b1e      	subs	r3, #30
 800138c:	fa00 f203 	lsl.w	r2, r0, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	430a      	orrs	r2, r1
 8001396:	60da      	str	r2, [r3, #12]
 8001398:	e019      	b.n	80013ce <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	6919      	ldr	r1, [r3, #16]
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	4613      	mov	r3, r2
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	4413      	add	r3, r2
 80013aa:	2207      	movs	r2, #7
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	43db      	mvns	r3, r3
 80013b2:	4019      	ands	r1, r3
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	6898      	ldr	r0, [r3, #8]
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	4613      	mov	r3, r2
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	4413      	add	r3, r2
 80013c2:	fa00 f203 	lsl.w	r2, r0, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	430a      	orrs	r2, r1
 80013cc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2b10      	cmp	r3, #16
 80013d4:	d003      	beq.n	80013de <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80013da:	2b11      	cmp	r3, #17
 80013dc:	d132      	bne.n	8001444 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a1d      	ldr	r2, [pc, #116]	; (8001458 <HAL_ADC_ConfigChannel+0x1e4>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d125      	bne.n	8001434 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d126      	bne.n	8001444 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	689a      	ldr	r2, [r3, #8]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001404:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	2b10      	cmp	r3, #16
 800140c:	d11a      	bne.n	8001444 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800140e:	4b13      	ldr	r3, [pc, #76]	; (800145c <HAL_ADC_ConfigChannel+0x1e8>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a13      	ldr	r2, [pc, #76]	; (8001460 <HAL_ADC_ConfigChannel+0x1ec>)
 8001414:	fba2 2303 	umull	r2, r3, r2, r3
 8001418:	0c9a      	lsrs	r2, r3, #18
 800141a:	4613      	mov	r3, r2
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	4413      	add	r3, r2
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001424:	e002      	b.n	800142c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	3b01      	subs	r3, #1
 800142a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d1f9      	bne.n	8001426 <HAL_ADC_ConfigChannel+0x1b2>
 8001432:	e007      	b.n	8001444 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001438:	f043 0220 	orr.w	r2, r3, #32
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2200      	movs	r2, #0
 8001448:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800144c:	7bfb      	ldrb	r3, [r7, #15]
}
 800144e:	4618      	mov	r0, r3
 8001450:	3714      	adds	r7, #20
 8001452:	46bd      	mov	sp, r7
 8001454:	bc80      	pop	{r7}
 8001456:	4770      	bx	lr
 8001458:	40012400 	.word	0x40012400
 800145c:	20000000 	.word	0x20000000
 8001460:	431bde83 	.word	0x431bde83

08001464 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800146c:	2300      	movs	r3, #0
 800146e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001470:	2300      	movs	r3, #0
 8001472:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	2b01      	cmp	r3, #1
 8001480:	d039      	beq.n	80014f6 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	689a      	ldr	r2, [r3, #8]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f042 0201 	orr.w	r2, r2, #1
 8001490:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001492:	4b1b      	ldr	r3, [pc, #108]	; (8001500 <ADC_Enable+0x9c>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a1b      	ldr	r2, [pc, #108]	; (8001504 <ADC_Enable+0xa0>)
 8001498:	fba2 2303 	umull	r2, r3, r2, r3
 800149c:	0c9b      	lsrs	r3, r3, #18
 800149e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80014a0:	e002      	b.n	80014a8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	3b01      	subs	r3, #1
 80014a6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d1f9      	bne.n	80014a2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80014ae:	f7ff fc21 	bl	8000cf4 <HAL_GetTick>
 80014b2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80014b4:	e018      	b.n	80014e8 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80014b6:	f7ff fc1d 	bl	8000cf4 <HAL_GetTick>
 80014ba:	4602      	mov	r2, r0
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d911      	bls.n	80014e8 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c8:	f043 0210 	orr.w	r2, r3, #16
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014d4:	f043 0201 	orr.w	r2, r3, #1
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2200      	movs	r2, #0
 80014e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e007      	b.n	80014f8 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d1df      	bne.n	80014b6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80014f6:	2300      	movs	r3, #0
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3710      	adds	r7, #16
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	20000000 	.word	0x20000000
 8001504:	431bde83 	.word	0x431bde83

08001508 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001510:	2300      	movs	r3, #0
 8001512:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	2b01      	cmp	r3, #1
 8001520:	d127      	bne.n	8001572 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	689a      	ldr	r2, [r3, #8]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f022 0201 	bic.w	r2, r2, #1
 8001530:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001532:	f7ff fbdf 	bl	8000cf4 <HAL_GetTick>
 8001536:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001538:	e014      	b.n	8001564 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800153a:	f7ff fbdb 	bl	8000cf4 <HAL_GetTick>
 800153e:	4602      	mov	r2, r0
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	2b02      	cmp	r3, #2
 8001546:	d90d      	bls.n	8001564 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800154c:	f043 0210 	orr.w	r2, r3, #16
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001558:	f043 0201 	orr.w	r2, r3, #1
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e007      	b.n	8001574 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	2b01      	cmp	r3, #1
 8001570:	d0e3      	beq.n	800153a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001572:	2300      	movs	r3, #0
}
 8001574:	4618      	mov	r0, r3
 8001576:	3710      	adds	r7, #16
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}

0800157c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001588:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800158e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001592:	2b00      	cmp	r3, #0
 8001594:	d127      	bne.n	80015e6 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800159a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80015ac:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80015b0:	d115      	bne.n	80015de <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d111      	bne.n	80015de <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d105      	bne.n	80015de <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d6:	f043 0201 	orr.w	r2, r3, #1
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80015de:	68f8      	ldr	r0, [r7, #12]
 80015e0:	f7fe ffe8 	bl	80005b4 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80015e4:	e004      	b.n	80015f0 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	6a1b      	ldr	r3, [r3, #32]
 80015ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	4798      	blx	r3
}
 80015f0:	bf00      	nop
 80015f2:	3710      	adds	r7, #16
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001604:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001606:	68f8      	ldr	r0, [r7, #12]
 8001608:	f7ff fe19 	bl	800123e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800160c:	bf00      	nop
 800160e:	3710      	adds	r7, #16
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001620:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001626:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001632:	f043 0204 	orr.w	r2, r3, #4
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800163a:	68f8      	ldr	r0, [r7, #12]
 800163c:	f7ff fe11 	bl	8001262 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001640:	bf00      	nop
 8001642:	3710      	adds	r7, #16
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}

08001648 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001648:	b590      	push	{r4, r7, lr}
 800164a:	b087      	sub	sp, #28
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001650:	2300      	movs	r3, #0
 8001652:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001654:	2300      	movs	r3, #0
 8001656:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800165e:	2b01      	cmp	r3, #1
 8001660:	d101      	bne.n	8001666 <HAL_ADCEx_Calibration_Start+0x1e>
 8001662:	2302      	movs	r3, #2
 8001664:	e086      	b.n	8001774 <HAL_ADCEx_Calibration_Start+0x12c>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2201      	movs	r2, #1
 800166a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f7ff ff4a 	bl	8001508 <ADC_ConversionStop_Disable>
 8001674:	4603      	mov	r3, r0
 8001676:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001678:	7dfb      	ldrb	r3, [r7, #23]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d175      	bne.n	800176a <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001682:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001686:	f023 0302 	bic.w	r3, r3, #2
 800168a:	f043 0202 	orr.w	r2, r3, #2
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001692:	4b3a      	ldr	r3, [pc, #232]	; (800177c <HAL_ADCEx_Calibration_Start+0x134>)
 8001694:	681c      	ldr	r4, [r3, #0]
 8001696:	2002      	movs	r0, #2
 8001698:	f001 fa62 	bl	8002b60 <HAL_RCCEx_GetPeriphCLKFreq>
 800169c:	4603      	mov	r3, r0
 800169e:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80016a2:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80016a4:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80016a6:	e002      	b.n	80016ae <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	3b01      	subs	r3, #1
 80016ac:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d1f9      	bne.n	80016a8 <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f7ff fed5 	bl	8001464 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	689a      	ldr	r2, [r3, #8]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f042 0208 	orr.w	r2, r2, #8
 80016c8:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80016ca:	f7ff fb13 	bl	8000cf4 <HAL_GetTick>
 80016ce:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80016d0:	e014      	b.n	80016fc <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80016d2:	f7ff fb0f 	bl	8000cf4 <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	2b0a      	cmp	r3, #10
 80016de:	d90d      	bls.n	80016fc <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e4:	f023 0312 	bic.w	r3, r3, #18
 80016e8:	f043 0210 	orr.w	r2, r3, #16
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2200      	movs	r2, #0
 80016f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e03b      	b.n	8001774 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	f003 0308 	and.w	r3, r3, #8
 8001706:	2b00      	cmp	r3, #0
 8001708:	d1e3      	bne.n	80016d2 <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	689a      	ldr	r2, [r3, #8]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f042 0204 	orr.w	r2, r2, #4
 8001718:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800171a:	f7ff faeb 	bl	8000cf4 <HAL_GetTick>
 800171e:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001720:	e014      	b.n	800174c <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001722:	f7ff fae7 	bl	8000cf4 <HAL_GetTick>
 8001726:	4602      	mov	r2, r0
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	2b0a      	cmp	r3, #10
 800172e:	d90d      	bls.n	800174c <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001734:	f023 0312 	bic.w	r3, r3, #18
 8001738:	f043 0210 	orr.w	r2, r3, #16
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2200      	movs	r2, #0
 8001744:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e013      	b.n	8001774 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	f003 0304 	and.w	r3, r3, #4
 8001756:	2b00      	cmp	r3, #0
 8001758:	d1e3      	bne.n	8001722 <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800175e:	f023 0303 	bic.w	r3, r3, #3
 8001762:	f043 0201 	orr.w	r2, r3, #1
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001772:	7dfb      	ldrb	r3, [r7, #23]
}
 8001774:	4618      	mov	r0, r3
 8001776:	371c      	adds	r7, #28
 8001778:	46bd      	mov	sp, r7
 800177a:	bd90      	pop	{r4, r7, pc}
 800177c:	20000000 	.word	0x20000000

08001780 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001788:	bf00      	nop
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	bc80      	pop	{r7}
 8001790:	4770      	bx	lr
	...

08001794 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f003 0307 	and.w	r3, r3, #7
 80017a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017a4:	4b0c      	ldr	r3, [pc, #48]	; (80017d8 <__NVIC_SetPriorityGrouping+0x44>)
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017aa:	68ba      	ldr	r2, [r7, #8]
 80017ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017b0:	4013      	ands	r3, r2
 80017b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017c6:	4a04      	ldr	r2, [pc, #16]	; (80017d8 <__NVIC_SetPriorityGrouping+0x44>)
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	60d3      	str	r3, [r2, #12]
}
 80017cc:	bf00      	nop
 80017ce:	3714      	adds	r7, #20
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bc80      	pop	{r7}
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	e000ed00 	.word	0xe000ed00

080017dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017e0:	4b04      	ldr	r3, [pc, #16]	; (80017f4 <__NVIC_GetPriorityGrouping+0x18>)
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	0a1b      	lsrs	r3, r3, #8
 80017e6:	f003 0307 	and.w	r3, r3, #7
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bc80      	pop	{r7}
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	e000ed00 	.word	0xe000ed00

080017f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4603      	mov	r3, r0
 8001800:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001806:	2b00      	cmp	r3, #0
 8001808:	db0b      	blt.n	8001822 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800180a:	79fb      	ldrb	r3, [r7, #7]
 800180c:	f003 021f 	and.w	r2, r3, #31
 8001810:	4906      	ldr	r1, [pc, #24]	; (800182c <__NVIC_EnableIRQ+0x34>)
 8001812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001816:	095b      	lsrs	r3, r3, #5
 8001818:	2001      	movs	r0, #1
 800181a:	fa00 f202 	lsl.w	r2, r0, r2
 800181e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001822:	bf00      	nop
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	bc80      	pop	{r7}
 800182a:	4770      	bx	lr
 800182c:	e000e100 	.word	0xe000e100

08001830 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	6039      	str	r1, [r7, #0]
 800183a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800183c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001840:	2b00      	cmp	r3, #0
 8001842:	db0a      	blt.n	800185a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	b2da      	uxtb	r2, r3
 8001848:	490c      	ldr	r1, [pc, #48]	; (800187c <__NVIC_SetPriority+0x4c>)
 800184a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184e:	0112      	lsls	r2, r2, #4
 8001850:	b2d2      	uxtb	r2, r2
 8001852:	440b      	add	r3, r1
 8001854:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001858:	e00a      	b.n	8001870 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	b2da      	uxtb	r2, r3
 800185e:	4908      	ldr	r1, [pc, #32]	; (8001880 <__NVIC_SetPriority+0x50>)
 8001860:	79fb      	ldrb	r3, [r7, #7]
 8001862:	f003 030f 	and.w	r3, r3, #15
 8001866:	3b04      	subs	r3, #4
 8001868:	0112      	lsls	r2, r2, #4
 800186a:	b2d2      	uxtb	r2, r2
 800186c:	440b      	add	r3, r1
 800186e:	761a      	strb	r2, [r3, #24]
}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	bc80      	pop	{r7}
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	e000e100 	.word	0xe000e100
 8001880:	e000ed00 	.word	0xe000ed00

08001884 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001884:	b480      	push	{r7}
 8001886:	b089      	sub	sp, #36	; 0x24
 8001888:	af00      	add	r7, sp, #0
 800188a:	60f8      	str	r0, [r7, #12]
 800188c:	60b9      	str	r1, [r7, #8]
 800188e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	f003 0307 	and.w	r3, r3, #7
 8001896:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	f1c3 0307 	rsb	r3, r3, #7
 800189e:	2b04      	cmp	r3, #4
 80018a0:	bf28      	it	cs
 80018a2:	2304      	movcs	r3, #4
 80018a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	3304      	adds	r3, #4
 80018aa:	2b06      	cmp	r3, #6
 80018ac:	d902      	bls.n	80018b4 <NVIC_EncodePriority+0x30>
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	3b03      	subs	r3, #3
 80018b2:	e000      	b.n	80018b6 <NVIC_EncodePriority+0x32>
 80018b4:	2300      	movs	r3, #0
 80018b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	43da      	mvns	r2, r3
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	401a      	ands	r2, r3
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	fa01 f303 	lsl.w	r3, r1, r3
 80018d6:	43d9      	mvns	r1, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018dc:	4313      	orrs	r3, r2
         );
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3724      	adds	r7, #36	; 0x24
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bc80      	pop	{r7}
 80018e6:	4770      	bx	lr

080018e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	3b01      	subs	r3, #1
 80018f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018f8:	d301      	bcc.n	80018fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018fa:	2301      	movs	r3, #1
 80018fc:	e00f      	b.n	800191e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018fe:	4a0a      	ldr	r2, [pc, #40]	; (8001928 <SysTick_Config+0x40>)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	3b01      	subs	r3, #1
 8001904:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001906:	210f      	movs	r1, #15
 8001908:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800190c:	f7ff ff90 	bl	8001830 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001910:	4b05      	ldr	r3, [pc, #20]	; (8001928 <SysTick_Config+0x40>)
 8001912:	2200      	movs	r2, #0
 8001914:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001916:	4b04      	ldr	r3, [pc, #16]	; (8001928 <SysTick_Config+0x40>)
 8001918:	2207      	movs	r2, #7
 800191a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	e000e010 	.word	0xe000e010

0800192c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f7ff ff2d 	bl	8001794 <__NVIC_SetPriorityGrouping>
}
 800193a:	bf00      	nop
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001942:	b580      	push	{r7, lr}
 8001944:	b086      	sub	sp, #24
 8001946:	af00      	add	r7, sp, #0
 8001948:	4603      	mov	r3, r0
 800194a:	60b9      	str	r1, [r7, #8]
 800194c:	607a      	str	r2, [r7, #4]
 800194e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001950:	2300      	movs	r3, #0
 8001952:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001954:	f7ff ff42 	bl	80017dc <__NVIC_GetPriorityGrouping>
 8001958:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	68b9      	ldr	r1, [r7, #8]
 800195e:	6978      	ldr	r0, [r7, #20]
 8001960:	f7ff ff90 	bl	8001884 <NVIC_EncodePriority>
 8001964:	4602      	mov	r2, r0
 8001966:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800196a:	4611      	mov	r1, r2
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff ff5f 	bl	8001830 <__NVIC_SetPriority>
}
 8001972:	bf00      	nop
 8001974:	3718      	adds	r7, #24
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b082      	sub	sp, #8
 800197e:	af00      	add	r7, sp, #0
 8001980:	4603      	mov	r3, r0
 8001982:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001984:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff ff35 	bl	80017f8 <__NVIC_EnableIRQ>
}
 800198e:	bf00      	nop
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b082      	sub	sp, #8
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f7ff ffa2 	bl	80018e8 <SysTick_Config>
 80019a4:	4603      	mov	r3, r0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
	...

080019b0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b085      	sub	sp, #20
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80019b8:	2300      	movs	r3, #0
 80019ba:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d101      	bne.n	80019c6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e043      	b.n	8001a4e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	461a      	mov	r2, r3
 80019cc:	4b22      	ldr	r3, [pc, #136]	; (8001a58 <HAL_DMA_Init+0xa8>)
 80019ce:	4413      	add	r3, r2
 80019d0:	4a22      	ldr	r2, [pc, #136]	; (8001a5c <HAL_DMA_Init+0xac>)
 80019d2:	fba2 2303 	umull	r2, r3, r2, r3
 80019d6:	091b      	lsrs	r3, r3, #4
 80019d8:	009a      	lsls	r2, r3, #2
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4a1f      	ldr	r2, [pc, #124]	; (8001a60 <HAL_DMA_Init+0xb0>)
 80019e2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2202      	movs	r2, #2
 80019e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80019fa:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80019fe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001a08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	695b      	ldr	r3, [r3, #20]
 8001a1a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	69db      	ldr	r3, [r3, #28]
 8001a26:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001a28:	68fa      	ldr	r2, [r7, #12]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	68fa      	ldr	r2, [r7, #12]
 8001a34:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2201      	movs	r2, #1
 8001a40:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2200      	movs	r2, #0
 8001a48:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3714      	adds	r7, #20
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bc80      	pop	{r7}
 8001a56:	4770      	bx	lr
 8001a58:	bffdfff8 	.word	0xbffdfff8
 8001a5c:	cccccccd 	.word	0xcccccccd
 8001a60:	40020000 	.word	0x40020000

08001a64 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]
 8001a70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a72:	2300      	movs	r3, #0
 8001a74:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d101      	bne.n	8001a84 <HAL_DMA_Start_IT+0x20>
 8001a80:	2302      	movs	r3, #2
 8001a82:	e04a      	b.n	8001b1a <HAL_DMA_Start_IT+0xb6>
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2201      	movs	r2, #1
 8001a88:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d13a      	bne.n	8001b0c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2202      	movs	r2, #2
 8001a9a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f022 0201 	bic.w	r2, r2, #1
 8001ab2:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	68b9      	ldr	r1, [r7, #8]
 8001aba:	68f8      	ldr	r0, [r7, #12]
 8001abc:	f000 f9ae 	bl	8001e1c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d008      	beq.n	8001ada <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f042 020e 	orr.w	r2, r2, #14
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	e00f      	b.n	8001afa <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f022 0204 	bic.w	r2, r2, #4
 8001ae8:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f042 020a 	orr.w	r2, r2, #10
 8001af8:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f042 0201 	orr.w	r2, r2, #1
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	e005      	b.n	8001b18 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001b14:	2302      	movs	r3, #2
 8001b16:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001b18:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3718      	adds	r7, #24
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
	...

08001b24 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d005      	beq.n	8001b46 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2204      	movs	r2, #4
 8001b3e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	73fb      	strb	r3, [r7, #15]
 8001b44:	e051      	b.n	8001bea <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f022 020e 	bic.w	r2, r2, #14
 8001b54:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f022 0201 	bic.w	r2, r2, #1
 8001b64:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a22      	ldr	r2, [pc, #136]	; (8001bf4 <HAL_DMA_Abort_IT+0xd0>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d029      	beq.n	8001bc4 <HAL_DMA_Abort_IT+0xa0>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a20      	ldr	r2, [pc, #128]	; (8001bf8 <HAL_DMA_Abort_IT+0xd4>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d022      	beq.n	8001bc0 <HAL_DMA_Abort_IT+0x9c>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a1f      	ldr	r2, [pc, #124]	; (8001bfc <HAL_DMA_Abort_IT+0xd8>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d01a      	beq.n	8001bba <HAL_DMA_Abort_IT+0x96>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a1d      	ldr	r2, [pc, #116]	; (8001c00 <HAL_DMA_Abort_IT+0xdc>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d012      	beq.n	8001bb4 <HAL_DMA_Abort_IT+0x90>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a1c      	ldr	r2, [pc, #112]	; (8001c04 <HAL_DMA_Abort_IT+0xe0>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d00a      	beq.n	8001bae <HAL_DMA_Abort_IT+0x8a>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a1a      	ldr	r2, [pc, #104]	; (8001c08 <HAL_DMA_Abort_IT+0xe4>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d102      	bne.n	8001ba8 <HAL_DMA_Abort_IT+0x84>
 8001ba2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001ba6:	e00e      	b.n	8001bc6 <HAL_DMA_Abort_IT+0xa2>
 8001ba8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001bac:	e00b      	b.n	8001bc6 <HAL_DMA_Abort_IT+0xa2>
 8001bae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bb2:	e008      	b.n	8001bc6 <HAL_DMA_Abort_IT+0xa2>
 8001bb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bb8:	e005      	b.n	8001bc6 <HAL_DMA_Abort_IT+0xa2>
 8001bba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bbe:	e002      	b.n	8001bc6 <HAL_DMA_Abort_IT+0xa2>
 8001bc0:	2310      	movs	r3, #16
 8001bc2:	e000      	b.n	8001bc6 <HAL_DMA_Abort_IT+0xa2>
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	4a11      	ldr	r2, [pc, #68]	; (8001c0c <HAL_DMA_Abort_IT+0xe8>)
 8001bc8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2201      	movs	r2, #1
 8001bce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d003      	beq.n	8001bea <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	4798      	blx	r3
    } 
  }
  return status;
 8001bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3710      	adds	r7, #16
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	40020008 	.word	0x40020008
 8001bf8:	4002001c 	.word	0x4002001c
 8001bfc:	40020030 	.word	0x40020030
 8001c00:	40020044 	.word	0x40020044
 8001c04:	40020058 	.word	0x40020058
 8001c08:	4002006c 	.word	0x4002006c
 8001c0c:	40020000 	.word	0x40020000

08001c10 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2c:	2204      	movs	r2, #4
 8001c2e:	409a      	lsls	r2, r3
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	4013      	ands	r3, r2
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d04f      	beq.n	8001cd8 <HAL_DMA_IRQHandler+0xc8>
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	f003 0304 	and.w	r3, r3, #4
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d04a      	beq.n	8001cd8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0320 	and.w	r3, r3, #32
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d107      	bne.n	8001c60 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f022 0204 	bic.w	r2, r2, #4
 8001c5e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a66      	ldr	r2, [pc, #408]	; (8001e00 <HAL_DMA_IRQHandler+0x1f0>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d029      	beq.n	8001cbe <HAL_DMA_IRQHandler+0xae>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a65      	ldr	r2, [pc, #404]	; (8001e04 <HAL_DMA_IRQHandler+0x1f4>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d022      	beq.n	8001cba <HAL_DMA_IRQHandler+0xaa>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a63      	ldr	r2, [pc, #396]	; (8001e08 <HAL_DMA_IRQHandler+0x1f8>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d01a      	beq.n	8001cb4 <HAL_DMA_IRQHandler+0xa4>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a62      	ldr	r2, [pc, #392]	; (8001e0c <HAL_DMA_IRQHandler+0x1fc>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d012      	beq.n	8001cae <HAL_DMA_IRQHandler+0x9e>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a60      	ldr	r2, [pc, #384]	; (8001e10 <HAL_DMA_IRQHandler+0x200>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d00a      	beq.n	8001ca8 <HAL_DMA_IRQHandler+0x98>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a5f      	ldr	r2, [pc, #380]	; (8001e14 <HAL_DMA_IRQHandler+0x204>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d102      	bne.n	8001ca2 <HAL_DMA_IRQHandler+0x92>
 8001c9c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ca0:	e00e      	b.n	8001cc0 <HAL_DMA_IRQHandler+0xb0>
 8001ca2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001ca6:	e00b      	b.n	8001cc0 <HAL_DMA_IRQHandler+0xb0>
 8001ca8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001cac:	e008      	b.n	8001cc0 <HAL_DMA_IRQHandler+0xb0>
 8001cae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001cb2:	e005      	b.n	8001cc0 <HAL_DMA_IRQHandler+0xb0>
 8001cb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cb8:	e002      	b.n	8001cc0 <HAL_DMA_IRQHandler+0xb0>
 8001cba:	2340      	movs	r3, #64	; 0x40
 8001cbc:	e000      	b.n	8001cc0 <HAL_DMA_IRQHandler+0xb0>
 8001cbe:	2304      	movs	r3, #4
 8001cc0:	4a55      	ldr	r2, [pc, #340]	; (8001e18 <HAL_DMA_IRQHandler+0x208>)
 8001cc2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	f000 8094 	beq.w	8001df6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001cd6:	e08e      	b.n	8001df6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cdc:	2202      	movs	r2, #2
 8001cde:	409a      	lsls	r2, r3
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d056      	beq.n	8001d96 <HAL_DMA_IRQHandler+0x186>
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	f003 0302 	and.w	r3, r3, #2
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d051      	beq.n	8001d96 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0320 	and.w	r3, r3, #32
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d10b      	bne.n	8001d18 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f022 020a 	bic.w	r2, r2, #10
 8001d0e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a38      	ldr	r2, [pc, #224]	; (8001e00 <HAL_DMA_IRQHandler+0x1f0>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d029      	beq.n	8001d76 <HAL_DMA_IRQHandler+0x166>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a37      	ldr	r2, [pc, #220]	; (8001e04 <HAL_DMA_IRQHandler+0x1f4>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d022      	beq.n	8001d72 <HAL_DMA_IRQHandler+0x162>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a35      	ldr	r2, [pc, #212]	; (8001e08 <HAL_DMA_IRQHandler+0x1f8>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d01a      	beq.n	8001d6c <HAL_DMA_IRQHandler+0x15c>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a34      	ldr	r2, [pc, #208]	; (8001e0c <HAL_DMA_IRQHandler+0x1fc>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d012      	beq.n	8001d66 <HAL_DMA_IRQHandler+0x156>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a32      	ldr	r2, [pc, #200]	; (8001e10 <HAL_DMA_IRQHandler+0x200>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d00a      	beq.n	8001d60 <HAL_DMA_IRQHandler+0x150>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a31      	ldr	r2, [pc, #196]	; (8001e14 <HAL_DMA_IRQHandler+0x204>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d102      	bne.n	8001d5a <HAL_DMA_IRQHandler+0x14a>
 8001d54:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001d58:	e00e      	b.n	8001d78 <HAL_DMA_IRQHandler+0x168>
 8001d5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d5e:	e00b      	b.n	8001d78 <HAL_DMA_IRQHandler+0x168>
 8001d60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d64:	e008      	b.n	8001d78 <HAL_DMA_IRQHandler+0x168>
 8001d66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d6a:	e005      	b.n	8001d78 <HAL_DMA_IRQHandler+0x168>
 8001d6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d70:	e002      	b.n	8001d78 <HAL_DMA_IRQHandler+0x168>
 8001d72:	2320      	movs	r3, #32
 8001d74:	e000      	b.n	8001d78 <HAL_DMA_IRQHandler+0x168>
 8001d76:	2302      	movs	r3, #2
 8001d78:	4a27      	ldr	r2, [pc, #156]	; (8001e18 <HAL_DMA_IRQHandler+0x208>)
 8001d7a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d034      	beq.n	8001df6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001d94:	e02f      	b.n	8001df6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9a:	2208      	movs	r2, #8
 8001d9c:	409a      	lsls	r2, r3
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	4013      	ands	r3, r2
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d028      	beq.n	8001df8 <HAL_DMA_IRQHandler+0x1e8>
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	f003 0308 	and.w	r3, r3, #8
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d023      	beq.n	8001df8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f022 020e 	bic.w	r2, r2, #14
 8001dbe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dc8:	2101      	movs	r1, #1
 8001dca:	fa01 f202 	lsl.w	r2, r1, r2
 8001dce:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2201      	movs	r2, #1
 8001dda:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d004      	beq.n	8001df8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	4798      	blx	r3
    }
  }
  return;
 8001df6:	bf00      	nop
 8001df8:	bf00      	nop
}
 8001dfa:	3710      	adds	r7, #16
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	40020008 	.word	0x40020008
 8001e04:	4002001c 	.word	0x4002001c
 8001e08:	40020030 	.word	0x40020030
 8001e0c:	40020044 	.word	0x40020044
 8001e10:	40020058 	.word	0x40020058
 8001e14:	4002006c 	.word	0x4002006c
 8001e18:	40020000 	.word	0x40020000

08001e1c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b085      	sub	sp, #20
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	60b9      	str	r1, [r7, #8]
 8001e26:	607a      	str	r2, [r7, #4]
 8001e28:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e32:	2101      	movs	r1, #1
 8001e34:	fa01 f202 	lsl.w	r2, r1, r2
 8001e38:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	683a      	ldr	r2, [r7, #0]
 8001e40:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	2b10      	cmp	r3, #16
 8001e48:	d108      	bne.n	8001e5c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	68ba      	ldr	r2, [r7, #8]
 8001e58:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001e5a:	e007      	b.n	8001e6c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	68ba      	ldr	r2, [r7, #8]
 8001e62:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	60da      	str	r2, [r3, #12]
}
 8001e6c:	bf00      	nop
 8001e6e:	3714      	adds	r7, #20
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bc80      	pop	{r7}
 8001e74:	4770      	bx	lr
	...

08001e78 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b08b      	sub	sp, #44	; 0x2c
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e82:	2300      	movs	r3, #0
 8001e84:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e86:	2300      	movs	r3, #0
 8001e88:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e8a:	e127      	b.n	80020dc <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	69fa      	ldr	r2, [r7, #28]
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	f040 8116 	bne.w	80020d6 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	2b12      	cmp	r3, #18
 8001eb0:	d034      	beq.n	8001f1c <HAL_GPIO_Init+0xa4>
 8001eb2:	2b12      	cmp	r3, #18
 8001eb4:	d80d      	bhi.n	8001ed2 <HAL_GPIO_Init+0x5a>
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d02b      	beq.n	8001f12 <HAL_GPIO_Init+0x9a>
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d804      	bhi.n	8001ec8 <HAL_GPIO_Init+0x50>
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d031      	beq.n	8001f26 <HAL_GPIO_Init+0xae>
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d01c      	beq.n	8001f00 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ec6:	e048      	b.n	8001f5a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001ec8:	2b03      	cmp	r3, #3
 8001eca:	d043      	beq.n	8001f54 <HAL_GPIO_Init+0xdc>
 8001ecc:	2b11      	cmp	r3, #17
 8001ece:	d01b      	beq.n	8001f08 <HAL_GPIO_Init+0x90>
          break;
 8001ed0:	e043      	b.n	8001f5a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001ed2:	4a89      	ldr	r2, [pc, #548]	; (80020f8 <HAL_GPIO_Init+0x280>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d026      	beq.n	8001f26 <HAL_GPIO_Init+0xae>
 8001ed8:	4a87      	ldr	r2, [pc, #540]	; (80020f8 <HAL_GPIO_Init+0x280>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d806      	bhi.n	8001eec <HAL_GPIO_Init+0x74>
 8001ede:	4a87      	ldr	r2, [pc, #540]	; (80020fc <HAL_GPIO_Init+0x284>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d020      	beq.n	8001f26 <HAL_GPIO_Init+0xae>
 8001ee4:	4a86      	ldr	r2, [pc, #536]	; (8002100 <HAL_GPIO_Init+0x288>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d01d      	beq.n	8001f26 <HAL_GPIO_Init+0xae>
          break;
 8001eea:	e036      	b.n	8001f5a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001eec:	4a85      	ldr	r2, [pc, #532]	; (8002104 <HAL_GPIO_Init+0x28c>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d019      	beq.n	8001f26 <HAL_GPIO_Init+0xae>
 8001ef2:	4a85      	ldr	r2, [pc, #532]	; (8002108 <HAL_GPIO_Init+0x290>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d016      	beq.n	8001f26 <HAL_GPIO_Init+0xae>
 8001ef8:	4a84      	ldr	r2, [pc, #528]	; (800210c <HAL_GPIO_Init+0x294>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d013      	beq.n	8001f26 <HAL_GPIO_Init+0xae>
          break;
 8001efe:	e02c      	b.n	8001f5a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	623b      	str	r3, [r7, #32]
          break;
 8001f06:	e028      	b.n	8001f5a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	3304      	adds	r3, #4
 8001f0e:	623b      	str	r3, [r7, #32]
          break;
 8001f10:	e023      	b.n	8001f5a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	3308      	adds	r3, #8
 8001f18:	623b      	str	r3, [r7, #32]
          break;
 8001f1a:	e01e      	b.n	8001f5a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	330c      	adds	r3, #12
 8001f22:	623b      	str	r3, [r7, #32]
          break;
 8001f24:	e019      	b.n	8001f5a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d102      	bne.n	8001f34 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f2e:	2304      	movs	r3, #4
 8001f30:	623b      	str	r3, [r7, #32]
          break;
 8001f32:	e012      	b.n	8001f5a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d105      	bne.n	8001f48 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f3c:	2308      	movs	r3, #8
 8001f3e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	69fa      	ldr	r2, [r7, #28]
 8001f44:	611a      	str	r2, [r3, #16]
          break;
 8001f46:	e008      	b.n	8001f5a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f48:	2308      	movs	r3, #8
 8001f4a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	69fa      	ldr	r2, [r7, #28]
 8001f50:	615a      	str	r2, [r3, #20]
          break;
 8001f52:	e002      	b.n	8001f5a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f54:	2300      	movs	r3, #0
 8001f56:	623b      	str	r3, [r7, #32]
          break;
 8001f58:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	2bff      	cmp	r3, #255	; 0xff
 8001f5e:	d801      	bhi.n	8001f64 <HAL_GPIO_Init+0xec>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	e001      	b.n	8001f68 <HAL_GPIO_Init+0xf0>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	3304      	adds	r3, #4
 8001f68:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f6a:	69bb      	ldr	r3, [r7, #24]
 8001f6c:	2bff      	cmp	r3, #255	; 0xff
 8001f6e:	d802      	bhi.n	8001f76 <HAL_GPIO_Init+0xfe>
 8001f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	e002      	b.n	8001f7c <HAL_GPIO_Init+0x104>
 8001f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f78:	3b08      	subs	r3, #8
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	210f      	movs	r1, #15
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	fa01 f303 	lsl.w	r3, r1, r3
 8001f8a:	43db      	mvns	r3, r3
 8001f8c:	401a      	ands	r2, r3
 8001f8e:	6a39      	ldr	r1, [r7, #32]
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	fa01 f303 	lsl.w	r3, r1, r3
 8001f96:	431a      	orrs	r2, r3
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	f000 8096 	beq.w	80020d6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001faa:	4b59      	ldr	r3, [pc, #356]	; (8002110 <HAL_GPIO_Init+0x298>)
 8001fac:	699b      	ldr	r3, [r3, #24]
 8001fae:	4a58      	ldr	r2, [pc, #352]	; (8002110 <HAL_GPIO_Init+0x298>)
 8001fb0:	f043 0301 	orr.w	r3, r3, #1
 8001fb4:	6193      	str	r3, [r2, #24]
 8001fb6:	4b56      	ldr	r3, [pc, #344]	; (8002110 <HAL_GPIO_Init+0x298>)
 8001fb8:	699b      	ldr	r3, [r3, #24]
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	60bb      	str	r3, [r7, #8]
 8001fc0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001fc2:	4a54      	ldr	r2, [pc, #336]	; (8002114 <HAL_GPIO_Init+0x29c>)
 8001fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc6:	089b      	lsrs	r3, r3, #2
 8001fc8:	3302      	adds	r3, #2
 8001fca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fce:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd2:	f003 0303 	and.w	r3, r3, #3
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	220f      	movs	r2, #15
 8001fda:	fa02 f303 	lsl.w	r3, r2, r3
 8001fde:	43db      	mvns	r3, r3
 8001fe0:	68fa      	ldr	r2, [r7, #12]
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a4b      	ldr	r2, [pc, #300]	; (8002118 <HAL_GPIO_Init+0x2a0>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d013      	beq.n	8002016 <HAL_GPIO_Init+0x19e>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a4a      	ldr	r2, [pc, #296]	; (800211c <HAL_GPIO_Init+0x2a4>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d00d      	beq.n	8002012 <HAL_GPIO_Init+0x19a>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a49      	ldr	r2, [pc, #292]	; (8002120 <HAL_GPIO_Init+0x2a8>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d007      	beq.n	800200e <HAL_GPIO_Init+0x196>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a48      	ldr	r2, [pc, #288]	; (8002124 <HAL_GPIO_Init+0x2ac>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d101      	bne.n	800200a <HAL_GPIO_Init+0x192>
 8002006:	2303      	movs	r3, #3
 8002008:	e006      	b.n	8002018 <HAL_GPIO_Init+0x1a0>
 800200a:	2304      	movs	r3, #4
 800200c:	e004      	b.n	8002018 <HAL_GPIO_Init+0x1a0>
 800200e:	2302      	movs	r3, #2
 8002010:	e002      	b.n	8002018 <HAL_GPIO_Init+0x1a0>
 8002012:	2301      	movs	r3, #1
 8002014:	e000      	b.n	8002018 <HAL_GPIO_Init+0x1a0>
 8002016:	2300      	movs	r3, #0
 8002018:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800201a:	f002 0203 	and.w	r2, r2, #3
 800201e:	0092      	lsls	r2, r2, #2
 8002020:	4093      	lsls	r3, r2
 8002022:	68fa      	ldr	r2, [r7, #12]
 8002024:	4313      	orrs	r3, r2
 8002026:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002028:	493a      	ldr	r1, [pc, #232]	; (8002114 <HAL_GPIO_Init+0x29c>)
 800202a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202c:	089b      	lsrs	r3, r3, #2
 800202e:	3302      	adds	r3, #2
 8002030:	68fa      	ldr	r2, [r7, #12]
 8002032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d006      	beq.n	8002050 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002042:	4b39      	ldr	r3, [pc, #228]	; (8002128 <HAL_GPIO_Init+0x2b0>)
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	4938      	ldr	r1, [pc, #224]	; (8002128 <HAL_GPIO_Init+0x2b0>)
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	4313      	orrs	r3, r2
 800204c:	600b      	str	r3, [r1, #0]
 800204e:	e006      	b.n	800205e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002050:	4b35      	ldr	r3, [pc, #212]	; (8002128 <HAL_GPIO_Init+0x2b0>)
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	43db      	mvns	r3, r3
 8002058:	4933      	ldr	r1, [pc, #204]	; (8002128 <HAL_GPIO_Init+0x2b0>)
 800205a:	4013      	ands	r3, r2
 800205c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d006      	beq.n	8002078 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800206a:	4b2f      	ldr	r3, [pc, #188]	; (8002128 <HAL_GPIO_Init+0x2b0>)
 800206c:	685a      	ldr	r2, [r3, #4]
 800206e:	492e      	ldr	r1, [pc, #184]	; (8002128 <HAL_GPIO_Init+0x2b0>)
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	4313      	orrs	r3, r2
 8002074:	604b      	str	r3, [r1, #4]
 8002076:	e006      	b.n	8002086 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002078:	4b2b      	ldr	r3, [pc, #172]	; (8002128 <HAL_GPIO_Init+0x2b0>)
 800207a:	685a      	ldr	r2, [r3, #4]
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	43db      	mvns	r3, r3
 8002080:	4929      	ldr	r1, [pc, #164]	; (8002128 <HAL_GPIO_Init+0x2b0>)
 8002082:	4013      	ands	r3, r2
 8002084:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d006      	beq.n	80020a0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002092:	4b25      	ldr	r3, [pc, #148]	; (8002128 <HAL_GPIO_Init+0x2b0>)
 8002094:	689a      	ldr	r2, [r3, #8]
 8002096:	4924      	ldr	r1, [pc, #144]	; (8002128 <HAL_GPIO_Init+0x2b0>)
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	4313      	orrs	r3, r2
 800209c:	608b      	str	r3, [r1, #8]
 800209e:	e006      	b.n	80020ae <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020a0:	4b21      	ldr	r3, [pc, #132]	; (8002128 <HAL_GPIO_Init+0x2b0>)
 80020a2:	689a      	ldr	r2, [r3, #8]
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	43db      	mvns	r3, r3
 80020a8:	491f      	ldr	r1, [pc, #124]	; (8002128 <HAL_GPIO_Init+0x2b0>)
 80020aa:	4013      	ands	r3, r2
 80020ac:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d006      	beq.n	80020c8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80020ba:	4b1b      	ldr	r3, [pc, #108]	; (8002128 <HAL_GPIO_Init+0x2b0>)
 80020bc:	68da      	ldr	r2, [r3, #12]
 80020be:	491a      	ldr	r1, [pc, #104]	; (8002128 <HAL_GPIO_Init+0x2b0>)
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	60cb      	str	r3, [r1, #12]
 80020c6:	e006      	b.n	80020d6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80020c8:	4b17      	ldr	r3, [pc, #92]	; (8002128 <HAL_GPIO_Init+0x2b0>)
 80020ca:	68da      	ldr	r2, [r3, #12]
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	43db      	mvns	r3, r3
 80020d0:	4915      	ldr	r1, [pc, #84]	; (8002128 <HAL_GPIO_Init+0x2b0>)
 80020d2:	4013      	ands	r3, r2
 80020d4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80020d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d8:	3301      	adds	r3, #1
 80020da:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e2:	fa22 f303 	lsr.w	r3, r2, r3
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	f47f aed0 	bne.w	8001e8c <HAL_GPIO_Init+0x14>
  }
}
 80020ec:	bf00      	nop
 80020ee:	372c      	adds	r7, #44	; 0x2c
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bc80      	pop	{r7}
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	10210000 	.word	0x10210000
 80020fc:	10110000 	.word	0x10110000
 8002100:	10120000 	.word	0x10120000
 8002104:	10310000 	.word	0x10310000
 8002108:	10320000 	.word	0x10320000
 800210c:	10220000 	.word	0x10220000
 8002110:	40021000 	.word	0x40021000
 8002114:	40010000 	.word	0x40010000
 8002118:	40010800 	.word	0x40010800
 800211c:	40010c00 	.word	0x40010c00
 8002120:	40011000 	.word	0x40011000
 8002124:	40011400 	.word	0x40011400
 8002128:	40010400 	.word	0x40010400

0800212c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	460b      	mov	r3, r1
 8002136:	807b      	strh	r3, [r7, #2]
 8002138:	4613      	mov	r3, r2
 800213a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800213c:	787b      	ldrb	r3, [r7, #1]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d003      	beq.n	800214a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002142:	887a      	ldrh	r2, [r7, #2]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002148:	e003      	b.n	8002152 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800214a:	887b      	ldrh	r3, [r7, #2]
 800214c:	041a      	lsls	r2, r3, #16
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	611a      	str	r2, [r3, #16]
}
 8002152:	bf00      	nop
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	bc80      	pop	{r7}
 800215a:	4770      	bx	lr

0800215c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	460b      	mov	r3, r1
 8002166:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	68da      	ldr	r2, [r3, #12]
 800216c:	887b      	ldrh	r3, [r7, #2]
 800216e:	4013      	ands	r3, r2
 8002170:	2b00      	cmp	r3, #0
 8002172:	d003      	beq.n	800217c <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002174:	887a      	ldrh	r2, [r7, #2]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800217a:	e002      	b.n	8002182 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800217c:	887a      	ldrh	r2, [r7, #2]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	611a      	str	r2, [r3, #16]
}
 8002182:	bf00      	nop
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	bc80      	pop	{r7}
 800218a:	4770      	bx	lr

0800218c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	4603      	mov	r3, r0
 8002194:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002196:	4b08      	ldr	r3, [pc, #32]	; (80021b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002198:	695a      	ldr	r2, [r3, #20]
 800219a:	88fb      	ldrh	r3, [r7, #6]
 800219c:	4013      	ands	r3, r2
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d006      	beq.n	80021b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80021a2:	4a05      	ldr	r2, [pc, #20]	; (80021b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021a4:	88fb      	ldrh	r3, [r7, #6]
 80021a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80021a8:	88fb      	ldrh	r3, [r7, #6]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7fe f9f0 	bl	8000590 <HAL_GPIO_EXTI_Callback>
  }
}
 80021b0:	bf00      	nop
 80021b2:	3708      	adds	r7, #8
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	40010400 	.word	0x40010400

080021bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e26c      	b.n	80026a8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	f000 8087 	beq.w	80022ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021dc:	4b92      	ldr	r3, [pc, #584]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f003 030c 	and.w	r3, r3, #12
 80021e4:	2b04      	cmp	r3, #4
 80021e6:	d00c      	beq.n	8002202 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021e8:	4b8f      	ldr	r3, [pc, #572]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f003 030c 	and.w	r3, r3, #12
 80021f0:	2b08      	cmp	r3, #8
 80021f2:	d112      	bne.n	800221a <HAL_RCC_OscConfig+0x5e>
 80021f4:	4b8c      	ldr	r3, [pc, #560]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002200:	d10b      	bne.n	800221a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002202:	4b89      	ldr	r3, [pc, #548]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d06c      	beq.n	80022e8 <HAL_RCC_OscConfig+0x12c>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d168      	bne.n	80022e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e246      	b.n	80026a8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002222:	d106      	bne.n	8002232 <HAL_RCC_OscConfig+0x76>
 8002224:	4b80      	ldr	r3, [pc, #512]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a7f      	ldr	r2, [pc, #508]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 800222a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800222e:	6013      	str	r3, [r2, #0]
 8002230:	e02e      	b.n	8002290 <HAL_RCC_OscConfig+0xd4>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d10c      	bne.n	8002254 <HAL_RCC_OscConfig+0x98>
 800223a:	4b7b      	ldr	r3, [pc, #492]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a7a      	ldr	r2, [pc, #488]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002240:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002244:	6013      	str	r3, [r2, #0]
 8002246:	4b78      	ldr	r3, [pc, #480]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a77      	ldr	r2, [pc, #476]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 800224c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002250:	6013      	str	r3, [r2, #0]
 8002252:	e01d      	b.n	8002290 <HAL_RCC_OscConfig+0xd4>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800225c:	d10c      	bne.n	8002278 <HAL_RCC_OscConfig+0xbc>
 800225e:	4b72      	ldr	r3, [pc, #456]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a71      	ldr	r2, [pc, #452]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002264:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002268:	6013      	str	r3, [r2, #0]
 800226a:	4b6f      	ldr	r3, [pc, #444]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a6e      	ldr	r2, [pc, #440]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002274:	6013      	str	r3, [r2, #0]
 8002276:	e00b      	b.n	8002290 <HAL_RCC_OscConfig+0xd4>
 8002278:	4b6b      	ldr	r3, [pc, #428]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a6a      	ldr	r2, [pc, #424]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 800227e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002282:	6013      	str	r3, [r2, #0]
 8002284:	4b68      	ldr	r3, [pc, #416]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a67      	ldr	r2, [pc, #412]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 800228a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800228e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d013      	beq.n	80022c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002298:	f7fe fd2c 	bl	8000cf4 <HAL_GetTick>
 800229c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800229e:	e008      	b.n	80022b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022a0:	f7fe fd28 	bl	8000cf4 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b64      	cmp	r3, #100	; 0x64
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e1fa      	b.n	80026a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022b2:	4b5d      	ldr	r3, [pc, #372]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d0f0      	beq.n	80022a0 <HAL_RCC_OscConfig+0xe4>
 80022be:	e014      	b.n	80022ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c0:	f7fe fd18 	bl	8000cf4 <HAL_GetTick>
 80022c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022c6:	e008      	b.n	80022da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022c8:	f7fe fd14 	bl	8000cf4 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b64      	cmp	r3, #100	; 0x64
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e1e6      	b.n	80026a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022da:	4b53      	ldr	r3, [pc, #332]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d1f0      	bne.n	80022c8 <HAL_RCC_OscConfig+0x10c>
 80022e6:	e000      	b.n	80022ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d063      	beq.n	80023be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022f6:	4b4c      	ldr	r3, [pc, #304]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f003 030c 	and.w	r3, r3, #12
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d00b      	beq.n	800231a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002302:	4b49      	ldr	r3, [pc, #292]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f003 030c 	and.w	r3, r3, #12
 800230a:	2b08      	cmp	r3, #8
 800230c:	d11c      	bne.n	8002348 <HAL_RCC_OscConfig+0x18c>
 800230e:	4b46      	ldr	r3, [pc, #280]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d116      	bne.n	8002348 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800231a:	4b43      	ldr	r3, [pc, #268]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d005      	beq.n	8002332 <HAL_RCC_OscConfig+0x176>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d001      	beq.n	8002332 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e1ba      	b.n	80026a8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002332:	4b3d      	ldr	r3, [pc, #244]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	695b      	ldr	r3, [r3, #20]
 800233e:	00db      	lsls	r3, r3, #3
 8002340:	4939      	ldr	r1, [pc, #228]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002342:	4313      	orrs	r3, r2
 8002344:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002346:	e03a      	b.n	80023be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	691b      	ldr	r3, [r3, #16]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d020      	beq.n	8002392 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002350:	4b36      	ldr	r3, [pc, #216]	; (800242c <HAL_RCC_OscConfig+0x270>)
 8002352:	2201      	movs	r2, #1
 8002354:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002356:	f7fe fccd 	bl	8000cf4 <HAL_GetTick>
 800235a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800235c:	e008      	b.n	8002370 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800235e:	f7fe fcc9 	bl	8000cf4 <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	2b02      	cmp	r3, #2
 800236a:	d901      	bls.n	8002370 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e19b      	b.n	80026a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002370:	4b2d      	ldr	r3, [pc, #180]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0302 	and.w	r3, r3, #2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d0f0      	beq.n	800235e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800237c:	4b2a      	ldr	r3, [pc, #168]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	695b      	ldr	r3, [r3, #20]
 8002388:	00db      	lsls	r3, r3, #3
 800238a:	4927      	ldr	r1, [pc, #156]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 800238c:	4313      	orrs	r3, r2
 800238e:	600b      	str	r3, [r1, #0]
 8002390:	e015      	b.n	80023be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002392:	4b26      	ldr	r3, [pc, #152]	; (800242c <HAL_RCC_OscConfig+0x270>)
 8002394:	2200      	movs	r2, #0
 8002396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002398:	f7fe fcac 	bl	8000cf4 <HAL_GetTick>
 800239c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800239e:	e008      	b.n	80023b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023a0:	f7fe fca8 	bl	8000cf4 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e17a      	b.n	80026a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023b2:	4b1d      	ldr	r3, [pc, #116]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d1f0      	bne.n	80023a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0308 	and.w	r3, r3, #8
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d03a      	beq.n	8002440 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d019      	beq.n	8002406 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023d2:	4b17      	ldr	r3, [pc, #92]	; (8002430 <HAL_RCC_OscConfig+0x274>)
 80023d4:	2201      	movs	r2, #1
 80023d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023d8:	f7fe fc8c 	bl	8000cf4 <HAL_GetTick>
 80023dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023de:	e008      	b.n	80023f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023e0:	f7fe fc88 	bl	8000cf4 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e15a      	b.n	80026a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023f2:	4b0d      	ldr	r3, [pc, #52]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 80023f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d0f0      	beq.n	80023e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80023fe:	2001      	movs	r0, #1
 8002400:	f000 fada 	bl	80029b8 <RCC_Delay>
 8002404:	e01c      	b.n	8002440 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002406:	4b0a      	ldr	r3, [pc, #40]	; (8002430 <HAL_RCC_OscConfig+0x274>)
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800240c:	f7fe fc72 	bl	8000cf4 <HAL_GetTick>
 8002410:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002412:	e00f      	b.n	8002434 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002414:	f7fe fc6e 	bl	8000cf4 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	2b02      	cmp	r3, #2
 8002420:	d908      	bls.n	8002434 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e140      	b.n	80026a8 <HAL_RCC_OscConfig+0x4ec>
 8002426:	bf00      	nop
 8002428:	40021000 	.word	0x40021000
 800242c:	42420000 	.word	0x42420000
 8002430:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002434:	4b9e      	ldr	r3, [pc, #632]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 8002436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	2b00      	cmp	r3, #0
 800243e:	d1e9      	bne.n	8002414 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0304 	and.w	r3, r3, #4
 8002448:	2b00      	cmp	r3, #0
 800244a:	f000 80a6 	beq.w	800259a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800244e:	2300      	movs	r3, #0
 8002450:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002452:	4b97      	ldr	r3, [pc, #604]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 8002454:	69db      	ldr	r3, [r3, #28]
 8002456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d10d      	bne.n	800247a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800245e:	4b94      	ldr	r3, [pc, #592]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 8002460:	69db      	ldr	r3, [r3, #28]
 8002462:	4a93      	ldr	r2, [pc, #588]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 8002464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002468:	61d3      	str	r3, [r2, #28]
 800246a:	4b91      	ldr	r3, [pc, #580]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 800246c:	69db      	ldr	r3, [r3, #28]
 800246e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002472:	60bb      	str	r3, [r7, #8]
 8002474:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002476:	2301      	movs	r3, #1
 8002478:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800247a:	4b8e      	ldr	r3, [pc, #568]	; (80026b4 <HAL_RCC_OscConfig+0x4f8>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002482:	2b00      	cmp	r3, #0
 8002484:	d118      	bne.n	80024b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002486:	4b8b      	ldr	r3, [pc, #556]	; (80026b4 <HAL_RCC_OscConfig+0x4f8>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a8a      	ldr	r2, [pc, #552]	; (80026b4 <HAL_RCC_OscConfig+0x4f8>)
 800248c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002490:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002492:	f7fe fc2f 	bl	8000cf4 <HAL_GetTick>
 8002496:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002498:	e008      	b.n	80024ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800249a:	f7fe fc2b 	bl	8000cf4 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	2b64      	cmp	r3, #100	; 0x64
 80024a6:	d901      	bls.n	80024ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e0fd      	b.n	80026a8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ac:	4b81      	ldr	r3, [pc, #516]	; (80026b4 <HAL_RCC_OscConfig+0x4f8>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d0f0      	beq.n	800249a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d106      	bne.n	80024ce <HAL_RCC_OscConfig+0x312>
 80024c0:	4b7b      	ldr	r3, [pc, #492]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 80024c2:	6a1b      	ldr	r3, [r3, #32]
 80024c4:	4a7a      	ldr	r2, [pc, #488]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 80024c6:	f043 0301 	orr.w	r3, r3, #1
 80024ca:	6213      	str	r3, [r2, #32]
 80024cc:	e02d      	b.n	800252a <HAL_RCC_OscConfig+0x36e>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d10c      	bne.n	80024f0 <HAL_RCC_OscConfig+0x334>
 80024d6:	4b76      	ldr	r3, [pc, #472]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 80024d8:	6a1b      	ldr	r3, [r3, #32]
 80024da:	4a75      	ldr	r2, [pc, #468]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 80024dc:	f023 0301 	bic.w	r3, r3, #1
 80024e0:	6213      	str	r3, [r2, #32]
 80024e2:	4b73      	ldr	r3, [pc, #460]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 80024e4:	6a1b      	ldr	r3, [r3, #32]
 80024e6:	4a72      	ldr	r2, [pc, #456]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 80024e8:	f023 0304 	bic.w	r3, r3, #4
 80024ec:	6213      	str	r3, [r2, #32]
 80024ee:	e01c      	b.n	800252a <HAL_RCC_OscConfig+0x36e>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	2b05      	cmp	r3, #5
 80024f6:	d10c      	bne.n	8002512 <HAL_RCC_OscConfig+0x356>
 80024f8:	4b6d      	ldr	r3, [pc, #436]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 80024fa:	6a1b      	ldr	r3, [r3, #32]
 80024fc:	4a6c      	ldr	r2, [pc, #432]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 80024fe:	f043 0304 	orr.w	r3, r3, #4
 8002502:	6213      	str	r3, [r2, #32]
 8002504:	4b6a      	ldr	r3, [pc, #424]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 8002506:	6a1b      	ldr	r3, [r3, #32]
 8002508:	4a69      	ldr	r2, [pc, #420]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 800250a:	f043 0301 	orr.w	r3, r3, #1
 800250e:	6213      	str	r3, [r2, #32]
 8002510:	e00b      	b.n	800252a <HAL_RCC_OscConfig+0x36e>
 8002512:	4b67      	ldr	r3, [pc, #412]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 8002514:	6a1b      	ldr	r3, [r3, #32]
 8002516:	4a66      	ldr	r2, [pc, #408]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 8002518:	f023 0301 	bic.w	r3, r3, #1
 800251c:	6213      	str	r3, [r2, #32]
 800251e:	4b64      	ldr	r3, [pc, #400]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 8002520:	6a1b      	ldr	r3, [r3, #32]
 8002522:	4a63      	ldr	r2, [pc, #396]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 8002524:	f023 0304 	bic.w	r3, r3, #4
 8002528:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d015      	beq.n	800255e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002532:	f7fe fbdf 	bl	8000cf4 <HAL_GetTick>
 8002536:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002538:	e00a      	b.n	8002550 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800253a:	f7fe fbdb 	bl	8000cf4 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	f241 3288 	movw	r2, #5000	; 0x1388
 8002548:	4293      	cmp	r3, r2
 800254a:	d901      	bls.n	8002550 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e0ab      	b.n	80026a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002550:	4b57      	ldr	r3, [pc, #348]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 8002552:	6a1b      	ldr	r3, [r3, #32]
 8002554:	f003 0302 	and.w	r3, r3, #2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d0ee      	beq.n	800253a <HAL_RCC_OscConfig+0x37e>
 800255c:	e014      	b.n	8002588 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800255e:	f7fe fbc9 	bl	8000cf4 <HAL_GetTick>
 8002562:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002564:	e00a      	b.n	800257c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002566:	f7fe fbc5 	bl	8000cf4 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	f241 3288 	movw	r2, #5000	; 0x1388
 8002574:	4293      	cmp	r3, r2
 8002576:	d901      	bls.n	800257c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e095      	b.n	80026a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800257c:	4b4c      	ldr	r3, [pc, #304]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 800257e:	6a1b      	ldr	r3, [r3, #32]
 8002580:	f003 0302 	and.w	r3, r3, #2
 8002584:	2b00      	cmp	r3, #0
 8002586:	d1ee      	bne.n	8002566 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002588:	7dfb      	ldrb	r3, [r7, #23]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d105      	bne.n	800259a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800258e:	4b48      	ldr	r3, [pc, #288]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 8002590:	69db      	ldr	r3, [r3, #28]
 8002592:	4a47      	ldr	r2, [pc, #284]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 8002594:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002598:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	69db      	ldr	r3, [r3, #28]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	f000 8081 	beq.w	80026a6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025a4:	4b42      	ldr	r3, [pc, #264]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f003 030c 	and.w	r3, r3, #12
 80025ac:	2b08      	cmp	r3, #8
 80025ae:	d061      	beq.n	8002674 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	69db      	ldr	r3, [r3, #28]
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d146      	bne.n	8002646 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025b8:	4b3f      	ldr	r3, [pc, #252]	; (80026b8 <HAL_RCC_OscConfig+0x4fc>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025be:	f7fe fb99 	bl	8000cf4 <HAL_GetTick>
 80025c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025c4:	e008      	b.n	80025d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025c6:	f7fe fb95 	bl	8000cf4 <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d901      	bls.n	80025d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e067      	b.n	80026a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025d8:	4b35      	ldr	r3, [pc, #212]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d1f0      	bne.n	80025c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6a1b      	ldr	r3, [r3, #32]
 80025e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025ec:	d108      	bne.n	8002600 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025ee:	4b30      	ldr	r3, [pc, #192]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	492d      	ldr	r1, [pc, #180]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002600:	4b2b      	ldr	r3, [pc, #172]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a19      	ldr	r1, [r3, #32]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002610:	430b      	orrs	r3, r1
 8002612:	4927      	ldr	r1, [pc, #156]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 8002614:	4313      	orrs	r3, r2
 8002616:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002618:	4b27      	ldr	r3, [pc, #156]	; (80026b8 <HAL_RCC_OscConfig+0x4fc>)
 800261a:	2201      	movs	r2, #1
 800261c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800261e:	f7fe fb69 	bl	8000cf4 <HAL_GetTick>
 8002622:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002624:	e008      	b.n	8002638 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002626:	f7fe fb65 	bl	8000cf4 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	2b02      	cmp	r3, #2
 8002632:	d901      	bls.n	8002638 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e037      	b.n	80026a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002638:	4b1d      	ldr	r3, [pc, #116]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d0f0      	beq.n	8002626 <HAL_RCC_OscConfig+0x46a>
 8002644:	e02f      	b.n	80026a6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002646:	4b1c      	ldr	r3, [pc, #112]	; (80026b8 <HAL_RCC_OscConfig+0x4fc>)
 8002648:	2200      	movs	r2, #0
 800264a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800264c:	f7fe fb52 	bl	8000cf4 <HAL_GetTick>
 8002650:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002652:	e008      	b.n	8002666 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002654:	f7fe fb4e 	bl	8000cf4 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b02      	cmp	r3, #2
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e020      	b.n	80026a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002666:	4b12      	ldr	r3, [pc, #72]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d1f0      	bne.n	8002654 <HAL_RCC_OscConfig+0x498>
 8002672:	e018      	b.n	80026a6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	69db      	ldr	r3, [r3, #28]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d101      	bne.n	8002680 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e013      	b.n	80026a8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002680:	4b0b      	ldr	r3, [pc, #44]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6a1b      	ldr	r3, [r3, #32]
 8002690:	429a      	cmp	r2, r3
 8002692:	d106      	bne.n	80026a2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800269e:	429a      	cmp	r2, r3
 80026a0:	d001      	beq.n	80026a6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e000      	b.n	80026a8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80026a6:	2300      	movs	r3, #0
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3718      	adds	r7, #24
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	40021000 	.word	0x40021000
 80026b4:	40007000 	.word	0x40007000
 80026b8:	42420060 	.word	0x42420060

080026bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d101      	bne.n	80026d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e0d0      	b.n	8002872 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026d0:	4b6a      	ldr	r3, [pc, #424]	; (800287c <HAL_RCC_ClockConfig+0x1c0>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0307 	and.w	r3, r3, #7
 80026d8:	683a      	ldr	r2, [r7, #0]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d910      	bls.n	8002700 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026de:	4b67      	ldr	r3, [pc, #412]	; (800287c <HAL_RCC_ClockConfig+0x1c0>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f023 0207 	bic.w	r2, r3, #7
 80026e6:	4965      	ldr	r1, [pc, #404]	; (800287c <HAL_RCC_ClockConfig+0x1c0>)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ee:	4b63      	ldr	r3, [pc, #396]	; (800287c <HAL_RCC_ClockConfig+0x1c0>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0307 	and.w	r3, r3, #7
 80026f6:	683a      	ldr	r2, [r7, #0]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d001      	beq.n	8002700 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e0b8      	b.n	8002872 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0302 	and.w	r3, r3, #2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d020      	beq.n	800274e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0304 	and.w	r3, r3, #4
 8002714:	2b00      	cmp	r3, #0
 8002716:	d005      	beq.n	8002724 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002718:	4b59      	ldr	r3, [pc, #356]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	4a58      	ldr	r2, [pc, #352]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 800271e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002722:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0308 	and.w	r3, r3, #8
 800272c:	2b00      	cmp	r3, #0
 800272e:	d005      	beq.n	800273c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002730:	4b53      	ldr	r3, [pc, #332]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	4a52      	ldr	r2, [pc, #328]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 8002736:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800273a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800273c:	4b50      	ldr	r3, [pc, #320]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	494d      	ldr	r1, [pc, #308]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 800274a:	4313      	orrs	r3, r2
 800274c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	2b00      	cmp	r3, #0
 8002758:	d040      	beq.n	80027dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d107      	bne.n	8002772 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002762:	4b47      	ldr	r3, [pc, #284]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d115      	bne.n	800279a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e07f      	b.n	8002872 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	2b02      	cmp	r3, #2
 8002778:	d107      	bne.n	800278a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800277a:	4b41      	ldr	r3, [pc, #260]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d109      	bne.n	800279a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e073      	b.n	8002872 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800278a:	4b3d      	ldr	r3, [pc, #244]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d101      	bne.n	800279a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e06b      	b.n	8002872 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800279a:	4b39      	ldr	r3, [pc, #228]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f023 0203 	bic.w	r2, r3, #3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	4936      	ldr	r1, [pc, #216]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027ac:	f7fe faa2 	bl	8000cf4 <HAL_GetTick>
 80027b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027b2:	e00a      	b.n	80027ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027b4:	f7fe fa9e 	bl	8000cf4 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	f241 3288 	movw	r2, #5000	; 0x1388
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e053      	b.n	8002872 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ca:	4b2d      	ldr	r3, [pc, #180]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f003 020c 	and.w	r2, r3, #12
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	429a      	cmp	r2, r3
 80027da:	d1eb      	bne.n	80027b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027dc:	4b27      	ldr	r3, [pc, #156]	; (800287c <HAL_RCC_ClockConfig+0x1c0>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0307 	and.w	r3, r3, #7
 80027e4:	683a      	ldr	r2, [r7, #0]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d210      	bcs.n	800280c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ea:	4b24      	ldr	r3, [pc, #144]	; (800287c <HAL_RCC_ClockConfig+0x1c0>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f023 0207 	bic.w	r2, r3, #7
 80027f2:	4922      	ldr	r1, [pc, #136]	; (800287c <HAL_RCC_ClockConfig+0x1c0>)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027fa:	4b20      	ldr	r3, [pc, #128]	; (800287c <HAL_RCC_ClockConfig+0x1c0>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0307 	and.w	r3, r3, #7
 8002802:	683a      	ldr	r2, [r7, #0]
 8002804:	429a      	cmp	r2, r3
 8002806:	d001      	beq.n	800280c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e032      	b.n	8002872 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0304 	and.w	r3, r3, #4
 8002814:	2b00      	cmp	r3, #0
 8002816:	d008      	beq.n	800282a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002818:	4b19      	ldr	r3, [pc, #100]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	4916      	ldr	r1, [pc, #88]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 8002826:	4313      	orrs	r3, r2
 8002828:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0308 	and.w	r3, r3, #8
 8002832:	2b00      	cmp	r3, #0
 8002834:	d009      	beq.n	800284a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002836:	4b12      	ldr	r3, [pc, #72]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	691b      	ldr	r3, [r3, #16]
 8002842:	00db      	lsls	r3, r3, #3
 8002844:	490e      	ldr	r1, [pc, #56]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 8002846:	4313      	orrs	r3, r2
 8002848:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800284a:	f000 f821 	bl	8002890 <HAL_RCC_GetSysClockFreq>
 800284e:	4601      	mov	r1, r0
 8002850:	4b0b      	ldr	r3, [pc, #44]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	091b      	lsrs	r3, r3, #4
 8002856:	f003 030f 	and.w	r3, r3, #15
 800285a:	4a0a      	ldr	r2, [pc, #40]	; (8002884 <HAL_RCC_ClockConfig+0x1c8>)
 800285c:	5cd3      	ldrb	r3, [r2, r3]
 800285e:	fa21 f303 	lsr.w	r3, r1, r3
 8002862:	4a09      	ldr	r2, [pc, #36]	; (8002888 <HAL_RCC_ClockConfig+0x1cc>)
 8002864:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002866:	4b09      	ldr	r3, [pc, #36]	; (800288c <HAL_RCC_ClockConfig+0x1d0>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4618      	mov	r0, r3
 800286c:	f7fe fa00 	bl	8000c70 <HAL_InitTick>

  return HAL_OK;
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	3710      	adds	r7, #16
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	40022000 	.word	0x40022000
 8002880:	40021000 	.word	0x40021000
 8002884:	08004404 	.word	0x08004404
 8002888:	20000000 	.word	0x20000000
 800288c:	20000004 	.word	0x20000004

08002890 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002890:	b490      	push	{r4, r7}
 8002892:	b08a      	sub	sp, #40	; 0x28
 8002894:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002896:	4b2a      	ldr	r3, [pc, #168]	; (8002940 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002898:	1d3c      	adds	r4, r7, #4
 800289a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800289c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80028a0:	4b28      	ldr	r3, [pc, #160]	; (8002944 <HAL_RCC_GetSysClockFreq+0xb4>)
 80028a2:	881b      	ldrh	r3, [r3, #0]
 80028a4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028a6:	2300      	movs	r3, #0
 80028a8:	61fb      	str	r3, [r7, #28]
 80028aa:	2300      	movs	r3, #0
 80028ac:	61bb      	str	r3, [r7, #24]
 80028ae:	2300      	movs	r3, #0
 80028b0:	627b      	str	r3, [r7, #36]	; 0x24
 80028b2:	2300      	movs	r3, #0
 80028b4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80028b6:	2300      	movs	r3, #0
 80028b8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80028ba:	4b23      	ldr	r3, [pc, #140]	; (8002948 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	f003 030c 	and.w	r3, r3, #12
 80028c6:	2b04      	cmp	r3, #4
 80028c8:	d002      	beq.n	80028d0 <HAL_RCC_GetSysClockFreq+0x40>
 80028ca:	2b08      	cmp	r3, #8
 80028cc:	d003      	beq.n	80028d6 <HAL_RCC_GetSysClockFreq+0x46>
 80028ce:	e02d      	b.n	800292c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028d0:	4b1e      	ldr	r3, [pc, #120]	; (800294c <HAL_RCC_GetSysClockFreq+0xbc>)
 80028d2:	623b      	str	r3, [r7, #32]
      break;
 80028d4:	e02d      	b.n	8002932 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	0c9b      	lsrs	r3, r3, #18
 80028da:	f003 030f 	and.w	r3, r3, #15
 80028de:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80028e2:	4413      	add	r3, r2
 80028e4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80028e8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d013      	beq.n	800291c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028f4:	4b14      	ldr	r3, [pc, #80]	; (8002948 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	0c5b      	lsrs	r3, r3, #17
 80028fa:	f003 0301 	and.w	r3, r3, #1
 80028fe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002902:	4413      	add	r3, r2
 8002904:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002908:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	4a0f      	ldr	r2, [pc, #60]	; (800294c <HAL_RCC_GetSysClockFreq+0xbc>)
 800290e:	fb02 f203 	mul.w	r2, r2, r3
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	fbb2 f3f3 	udiv	r3, r2, r3
 8002918:	627b      	str	r3, [r7, #36]	; 0x24
 800291a:	e004      	b.n	8002926 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	4a0c      	ldr	r2, [pc, #48]	; (8002950 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002920:	fb02 f303 	mul.w	r3, r2, r3
 8002924:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002928:	623b      	str	r3, [r7, #32]
      break;
 800292a:	e002      	b.n	8002932 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800292c:	4b07      	ldr	r3, [pc, #28]	; (800294c <HAL_RCC_GetSysClockFreq+0xbc>)
 800292e:	623b      	str	r3, [r7, #32]
      break;
 8002930:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002932:	6a3b      	ldr	r3, [r7, #32]
}
 8002934:	4618      	mov	r0, r3
 8002936:	3728      	adds	r7, #40	; 0x28
 8002938:	46bd      	mov	sp, r7
 800293a:	bc90      	pop	{r4, r7}
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	080043dc 	.word	0x080043dc
 8002944:	080043ec 	.word	0x080043ec
 8002948:	40021000 	.word	0x40021000
 800294c:	007a1200 	.word	0x007a1200
 8002950:	003d0900 	.word	0x003d0900

08002954 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002958:	4b02      	ldr	r3, [pc, #8]	; (8002964 <HAL_RCC_GetHCLKFreq+0x10>)
 800295a:	681b      	ldr	r3, [r3, #0]
}
 800295c:	4618      	mov	r0, r3
 800295e:	46bd      	mov	sp, r7
 8002960:	bc80      	pop	{r7}
 8002962:	4770      	bx	lr
 8002964:	20000000 	.word	0x20000000

08002968 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800296c:	f7ff fff2 	bl	8002954 <HAL_RCC_GetHCLKFreq>
 8002970:	4601      	mov	r1, r0
 8002972:	4b05      	ldr	r3, [pc, #20]	; (8002988 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	0a1b      	lsrs	r3, r3, #8
 8002978:	f003 0307 	and.w	r3, r3, #7
 800297c:	4a03      	ldr	r2, [pc, #12]	; (800298c <HAL_RCC_GetPCLK1Freq+0x24>)
 800297e:	5cd3      	ldrb	r3, [r2, r3]
 8002980:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002984:	4618      	mov	r0, r3
 8002986:	bd80      	pop	{r7, pc}
 8002988:	40021000 	.word	0x40021000
 800298c:	08004414 	.word	0x08004414

08002990 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002994:	f7ff ffde 	bl	8002954 <HAL_RCC_GetHCLKFreq>
 8002998:	4601      	mov	r1, r0
 800299a:	4b05      	ldr	r3, [pc, #20]	; (80029b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	0adb      	lsrs	r3, r3, #11
 80029a0:	f003 0307 	and.w	r3, r3, #7
 80029a4:	4a03      	ldr	r2, [pc, #12]	; (80029b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029a6:	5cd3      	ldrb	r3, [r2, r3]
 80029a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	40021000 	.word	0x40021000
 80029b4:	08004414 	.word	0x08004414

080029b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b085      	sub	sp, #20
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80029c0:	4b0a      	ldr	r3, [pc, #40]	; (80029ec <RCC_Delay+0x34>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a0a      	ldr	r2, [pc, #40]	; (80029f0 <RCC_Delay+0x38>)
 80029c6:	fba2 2303 	umull	r2, r3, r2, r3
 80029ca:	0a5b      	lsrs	r3, r3, #9
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	fb02 f303 	mul.w	r3, r2, r3
 80029d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80029d4:	bf00      	nop
  }
  while (Delay --);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	1e5a      	subs	r2, r3, #1
 80029da:	60fa      	str	r2, [r7, #12]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d1f9      	bne.n	80029d4 <RCC_Delay+0x1c>
}
 80029e0:	bf00      	nop
 80029e2:	3714      	adds	r7, #20
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bc80      	pop	{r7}
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	20000000 	.word	0x20000000
 80029f0:	10624dd3 	.word	0x10624dd3

080029f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b086      	sub	sp, #24
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80029fc:	2300      	movs	r3, #0
 80029fe:	613b      	str	r3, [r7, #16]
 8002a00:	2300      	movs	r3, #0
 8002a02:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0301 	and.w	r3, r3, #1
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d07d      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002a10:	2300      	movs	r3, #0
 8002a12:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a14:	4b4f      	ldr	r3, [pc, #316]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a16:	69db      	ldr	r3, [r3, #28]
 8002a18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d10d      	bne.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a20:	4b4c      	ldr	r3, [pc, #304]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a22:	69db      	ldr	r3, [r3, #28]
 8002a24:	4a4b      	ldr	r2, [pc, #300]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a2a:	61d3      	str	r3, [r2, #28]
 8002a2c:	4b49      	ldr	r3, [pc, #292]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a2e:	69db      	ldr	r3, [r3, #28]
 8002a30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a34:	60bb      	str	r3, [r7, #8]
 8002a36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a3c:	4b46      	ldr	r3, [pc, #280]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d118      	bne.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a48:	4b43      	ldr	r3, [pc, #268]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a42      	ldr	r2, [pc, #264]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a52:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a54:	f7fe f94e 	bl	8000cf4 <HAL_GetTick>
 8002a58:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a5a:	e008      	b.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a5c:	f7fe f94a 	bl	8000cf4 <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b64      	cmp	r3, #100	; 0x64
 8002a68:	d901      	bls.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e06d      	b.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a6e:	4b3a      	ldr	r3, [pc, #232]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d0f0      	beq.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a7a:	4b36      	ldr	r3, [pc, #216]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a7c:	6a1b      	ldr	r3, [r3, #32]
 8002a7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a82:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d02e      	beq.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a92:	68fa      	ldr	r2, [r7, #12]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d027      	beq.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a98:	4b2e      	ldr	r3, [pc, #184]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a9a:	6a1b      	ldr	r3, [r3, #32]
 8002a9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002aa0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002aa2:	4b2e      	ldr	r3, [pc, #184]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002aa8:	4b2c      	ldr	r3, [pc, #176]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002aae:	4a29      	ldr	r2, [pc, #164]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f003 0301 	and.w	r3, r3, #1
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d014      	beq.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002abe:	f7fe f919 	bl	8000cf4 <HAL_GetTick>
 8002ac2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ac4:	e00a      	b.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ac6:	f7fe f915 	bl	8000cf4 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d901      	bls.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e036      	b.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002adc:	4b1d      	ldr	r3, [pc, #116]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ade:	6a1b      	ldr	r3, [r3, #32]
 8002ae0:	f003 0302 	and.w	r3, r3, #2
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d0ee      	beq.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ae8:	4b1a      	ldr	r3, [pc, #104]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aea:	6a1b      	ldr	r3, [r3, #32]
 8002aec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	4917      	ldr	r1, [pc, #92]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002afa:	7dfb      	ldrb	r3, [r7, #23]
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d105      	bne.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b00:	4b14      	ldr	r3, [pc, #80]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b02:	69db      	ldr	r3, [r3, #28]
 8002b04:	4a13      	ldr	r2, [pc, #76]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b0a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0302 	and.w	r3, r3, #2
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d008      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b18:	4b0e      	ldr	r3, [pc, #56]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	490b      	ldr	r1, [pc, #44]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0310 	and.w	r3, r3, #16
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d008      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b36:	4b07      	ldr	r3, [pc, #28]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	4904      	ldr	r1, [pc, #16]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3718      	adds	r7, #24
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	40021000 	.word	0x40021000
 8002b58:	40007000 	.word	0x40007000
 8002b5c:	42420440 	.word	0x42420440

08002b60 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002b60:	b590      	push	{r4, r7, lr}
 8002b62:	b08d      	sub	sp, #52	; 0x34
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002b68:	4b55      	ldr	r3, [pc, #340]	; (8002cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002b6a:	f107 040c 	add.w	r4, r7, #12
 8002b6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002b74:	4b53      	ldr	r3, [pc, #332]	; (8002cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002b76:	881b      	ldrh	r3, [r3, #0]
 8002b78:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b7e:	2300      	movs	r3, #0
 8002b80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b82:	2300      	movs	r3, #0
 8002b84:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002b86:	2300      	movs	r3, #0
 8002b88:	61fb      	str	r3, [r7, #28]
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d07f      	beq.n	8002c94 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8002b94:	2b10      	cmp	r3, #16
 8002b96:	d002      	beq.n	8002b9e <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d048      	beq.n	8002c2e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002b9c:	e08b      	b.n	8002cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8002b9e:	4b4a      	ldr	r3, [pc, #296]	; (8002cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002ba4:	4b48      	ldr	r3, [pc, #288]	; (8002cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d07f      	beq.n	8002cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	0c9b      	lsrs	r3, r3, #18
 8002bb4:	f003 030f 	and.w	r3, r3, #15
 8002bb8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002bbc:	4413      	add	r3, r2
 8002bbe:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002bc2:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d018      	beq.n	8002c00 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002bce:	4b3e      	ldr	r3, [pc, #248]	; (8002cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	0c5b      	lsrs	r3, r3, #17
 8002bd4:	f003 0301 	and.w	r3, r3, #1
 8002bd8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002bdc:	4413      	add	r3, r2
 8002bde:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002be2:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d00d      	beq.n	8002c0a <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002bee:	4a37      	ldr	r2, [pc, #220]	; (8002ccc <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8002bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf2:	fbb2 f2f3 	udiv	r2, r2, r3
 8002bf6:	6a3b      	ldr	r3, [r7, #32]
 8002bf8:	fb02 f303 	mul.w	r3, r2, r3
 8002bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bfe:	e004      	b.n	8002c0a <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c00:	6a3b      	ldr	r3, [r7, #32]
 8002c02:	4a33      	ldr	r2, [pc, #204]	; (8002cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002c04:	fb02 f303 	mul.w	r3, r2, r3
 8002c08:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002c0a:	4b2f      	ldr	r3, [pc, #188]	; (8002cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c16:	d102      	bne.n	8002c1e <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8002c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c1a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002c1c:	e048      	b.n	8002cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8002c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c20:	005b      	lsls	r3, r3, #1
 8002c22:	4a2c      	ldr	r2, [pc, #176]	; (8002cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002c24:	fba2 2303 	umull	r2, r3, r2, r3
 8002c28:	085b      	lsrs	r3, r3, #1
 8002c2a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002c2c:	e040      	b.n	8002cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8002c2e:	4b26      	ldr	r3, [pc, #152]	; (8002cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002c30:	6a1b      	ldr	r3, [r3, #32]
 8002c32:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c3e:	d108      	bne.n	8002c52 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	f003 0302 	and.w	r3, r3, #2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d003      	beq.n	8002c52 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8002c4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c50:	e01f      	b.n	8002c92 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c5c:	d109      	bne.n	8002c72 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8002c5e:	4b1a      	ldr	r3, [pc, #104]	; (8002cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d003      	beq.n	8002c72 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8002c6a:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002c6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c70:	e00f      	b.n	8002c92 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c7c:	d11a      	bne.n	8002cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8002c7e:	4b12      	ldr	r3, [pc, #72]	; (8002cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d014      	beq.n	8002cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8002c8a:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002c8e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002c90:	e010      	b.n	8002cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8002c92:	e00f      	b.n	8002cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002c94:	f7ff fe7c 	bl	8002990 <HAL_RCC_GetPCLK2Freq>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	4b0b      	ldr	r3, [pc, #44]	; (8002cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	0b9b      	lsrs	r3, r3, #14
 8002ca0:	f003 0303 	and.w	r3, r3, #3
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	005b      	lsls	r3, r3, #1
 8002ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cac:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002cae:	e002      	b.n	8002cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8002cb0:	bf00      	nop
 8002cb2:	e000      	b.n	8002cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8002cb4:	bf00      	nop
    }
  }
  return (frequency);
 8002cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3734      	adds	r7, #52	; 0x34
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd90      	pop	{r4, r7, pc}
 8002cc0:	080043f0 	.word	0x080043f0
 8002cc4:	08004400 	.word	0x08004400
 8002cc8:	40021000 	.word	0x40021000
 8002ccc:	007a1200 	.word	0x007a1200
 8002cd0:	003d0900 	.word	0x003d0900
 8002cd4:	aaaaaaab 	.word	0xaaaaaaab

08002cd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d101      	bne.n	8002cea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e01d      	b.n	8002d26 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d106      	bne.n	8002d04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f7fd fd26 	bl	8000750 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2202      	movs	r2, #2
 8002d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	3304      	adds	r3, #4
 8002d14:	4619      	mov	r1, r3
 8002d16:	4610      	mov	r0, r2
 8002d18:	f000 fa18 	bl	800314c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3708      	adds	r7, #8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002d2e:	b480      	push	{r7}
 8002d30:	b085      	sub	sp, #20
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2202      	movs	r2, #2
 8002d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	f003 0307 	and.w	r3, r3, #7
 8002d48:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2b06      	cmp	r3, #6
 8002d4e:	d007      	beq.n	8002d60 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f042 0201 	orr.w	r2, r2, #1
 8002d5e:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3714      	adds	r7, #20
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bc80      	pop	{r7}
 8002d72:	4770      	bx	lr

08002d74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	691b      	ldr	r3, [r3, #16]
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d122      	bne.n	8002dd0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	f003 0302 	and.w	r3, r3, #2
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d11b      	bne.n	8002dd0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f06f 0202 	mvn.w	r2, #2
 8002da0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2201      	movs	r2, #1
 8002da6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	699b      	ldr	r3, [r3, #24]
 8002dae:	f003 0303 	and.w	r3, r3, #3
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d003      	beq.n	8002dbe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f000 f9ad 	bl	8003116 <HAL_TIM_IC_CaptureCallback>
 8002dbc:	e005      	b.n	8002dca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 f9a0 	bl	8003104 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f000 f9af 	bl	8003128 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	691b      	ldr	r3, [r3, #16]
 8002dd6:	f003 0304 	and.w	r3, r3, #4
 8002dda:	2b04      	cmp	r3, #4
 8002ddc:	d122      	bne.n	8002e24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	f003 0304 	and.w	r3, r3, #4
 8002de8:	2b04      	cmp	r3, #4
 8002dea:	d11b      	bne.n	8002e24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f06f 0204 	mvn.w	r2, #4
 8002df4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2202      	movs	r2, #2
 8002dfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	699b      	ldr	r3, [r3, #24]
 8002e02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d003      	beq.n	8002e12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f000 f983 	bl	8003116 <HAL_TIM_IC_CaptureCallback>
 8002e10:	e005      	b.n	8002e1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 f976 	bl	8003104 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f000 f985 	bl	8003128 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	f003 0308 	and.w	r3, r3, #8
 8002e2e:	2b08      	cmp	r3, #8
 8002e30:	d122      	bne.n	8002e78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	f003 0308 	and.w	r3, r3, #8
 8002e3c:	2b08      	cmp	r3, #8
 8002e3e:	d11b      	bne.n	8002e78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f06f 0208 	mvn.w	r2, #8
 8002e48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2204      	movs	r2, #4
 8002e4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	69db      	ldr	r3, [r3, #28]
 8002e56:	f003 0303 	and.w	r3, r3, #3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d003      	beq.n	8002e66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 f959 	bl	8003116 <HAL_TIM_IC_CaptureCallback>
 8002e64:	e005      	b.n	8002e72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 f94c 	bl	8003104 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f000 f95b 	bl	8003128 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	f003 0310 	and.w	r3, r3, #16
 8002e82:	2b10      	cmp	r3, #16
 8002e84:	d122      	bne.n	8002ecc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	f003 0310 	and.w	r3, r3, #16
 8002e90:	2b10      	cmp	r3, #16
 8002e92:	d11b      	bne.n	8002ecc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f06f 0210 	mvn.w	r2, #16
 8002e9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2208      	movs	r2, #8
 8002ea2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	69db      	ldr	r3, [r3, #28]
 8002eaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d003      	beq.n	8002eba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f000 f92f 	bl	8003116 <HAL_TIM_IC_CaptureCallback>
 8002eb8:	e005      	b.n	8002ec6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f000 f922 	bl	8003104 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f000 f931 	bl	8003128 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d10e      	bne.n	8002ef8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	f003 0301 	and.w	r3, r3, #1
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d107      	bne.n	8002ef8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f06f 0201 	mvn.w	r2, #1
 8002ef0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 f8fd 	bl	80030f2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f02:	2b80      	cmp	r3, #128	; 0x80
 8002f04:	d10e      	bne.n	8002f24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f10:	2b80      	cmp	r3, #128	; 0x80
 8002f12:	d107      	bne.n	8002f24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f000 fa59 	bl	80033d6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f2e:	2b40      	cmp	r3, #64	; 0x40
 8002f30:	d10e      	bne.n	8002f50 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f3c:	2b40      	cmp	r3, #64	; 0x40
 8002f3e:	d107      	bne.n	8002f50 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f000 f8f5 	bl	800313a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	f003 0320 	and.w	r3, r3, #32
 8002f5a:	2b20      	cmp	r3, #32
 8002f5c:	d10e      	bne.n	8002f7c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	f003 0320 	and.w	r3, r3, #32
 8002f68:	2b20      	cmp	r3, #32
 8002f6a:	d107      	bne.n	8002f7c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f06f 0220 	mvn.w	r2, #32
 8002f74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 fa24 	bl	80033c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f7c:	bf00      	nop
 8002f7e:	3708      	adds	r7, #8
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d101      	bne.n	8002f9c <HAL_TIM_ConfigClockSource+0x18>
 8002f98:	2302      	movs	r3, #2
 8002f9a:	e0a6      	b.n	80030ea <HAL_TIM_ConfigClockSource+0x166>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2202      	movs	r2, #2
 8002fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002fba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fc2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	68fa      	ldr	r2, [r7, #12]
 8002fca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2b40      	cmp	r3, #64	; 0x40
 8002fd2:	d067      	beq.n	80030a4 <HAL_TIM_ConfigClockSource+0x120>
 8002fd4:	2b40      	cmp	r3, #64	; 0x40
 8002fd6:	d80b      	bhi.n	8002ff0 <HAL_TIM_ConfigClockSource+0x6c>
 8002fd8:	2b10      	cmp	r3, #16
 8002fda:	d073      	beq.n	80030c4 <HAL_TIM_ConfigClockSource+0x140>
 8002fdc:	2b10      	cmp	r3, #16
 8002fde:	d802      	bhi.n	8002fe6 <HAL_TIM_ConfigClockSource+0x62>
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d06f      	beq.n	80030c4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002fe4:	e078      	b.n	80030d8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002fe6:	2b20      	cmp	r3, #32
 8002fe8:	d06c      	beq.n	80030c4 <HAL_TIM_ConfigClockSource+0x140>
 8002fea:	2b30      	cmp	r3, #48	; 0x30
 8002fec:	d06a      	beq.n	80030c4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002fee:	e073      	b.n	80030d8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002ff0:	2b70      	cmp	r3, #112	; 0x70
 8002ff2:	d00d      	beq.n	8003010 <HAL_TIM_ConfigClockSource+0x8c>
 8002ff4:	2b70      	cmp	r3, #112	; 0x70
 8002ff6:	d804      	bhi.n	8003002 <HAL_TIM_ConfigClockSource+0x7e>
 8002ff8:	2b50      	cmp	r3, #80	; 0x50
 8002ffa:	d033      	beq.n	8003064 <HAL_TIM_ConfigClockSource+0xe0>
 8002ffc:	2b60      	cmp	r3, #96	; 0x60
 8002ffe:	d041      	beq.n	8003084 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003000:	e06a      	b.n	80030d8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003002:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003006:	d066      	beq.n	80030d6 <HAL_TIM_ConfigClockSource+0x152>
 8003008:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800300c:	d017      	beq.n	800303e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800300e:	e063      	b.n	80030d8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6818      	ldr	r0, [r3, #0]
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	6899      	ldr	r1, [r3, #8]
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	685a      	ldr	r2, [r3, #4]
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	f000 f96d 	bl	80032fe <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003032:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68fa      	ldr	r2, [r7, #12]
 800303a:	609a      	str	r2, [r3, #8]
      break;
 800303c:	e04c      	b.n	80030d8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6818      	ldr	r0, [r3, #0]
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	6899      	ldr	r1, [r3, #8]
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	685a      	ldr	r2, [r3, #4]
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	f000 f956 	bl	80032fe <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	689a      	ldr	r2, [r3, #8]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003060:	609a      	str	r2, [r3, #8]
      break;
 8003062:	e039      	b.n	80030d8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6818      	ldr	r0, [r3, #0]
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	6859      	ldr	r1, [r3, #4]
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	461a      	mov	r2, r3
 8003072:	f000 f8cd 	bl	8003210 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	2150      	movs	r1, #80	; 0x50
 800307c:	4618      	mov	r0, r3
 800307e:	f000 f924 	bl	80032ca <TIM_ITRx_SetConfig>
      break;
 8003082:	e029      	b.n	80030d8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6818      	ldr	r0, [r3, #0]
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	6859      	ldr	r1, [r3, #4]
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	461a      	mov	r2, r3
 8003092:	f000 f8eb 	bl	800326c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2160      	movs	r1, #96	; 0x60
 800309c:	4618      	mov	r0, r3
 800309e:	f000 f914 	bl	80032ca <TIM_ITRx_SetConfig>
      break;
 80030a2:	e019      	b.n	80030d8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6818      	ldr	r0, [r3, #0]
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	6859      	ldr	r1, [r3, #4]
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	461a      	mov	r2, r3
 80030b2:	f000 f8ad 	bl	8003210 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2140      	movs	r1, #64	; 0x40
 80030bc:	4618      	mov	r0, r3
 80030be:	f000 f904 	bl	80032ca <TIM_ITRx_SetConfig>
      break;
 80030c2:	e009      	b.n	80030d8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4619      	mov	r1, r3
 80030ce:	4610      	mov	r0, r2
 80030d0:	f000 f8fb 	bl	80032ca <TIM_ITRx_SetConfig>
      break;
 80030d4:	e000      	b.n	80030d8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80030d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3710      	adds	r7, #16
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030f2:	b480      	push	{r7}
 80030f4:	b083      	sub	sp, #12
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80030fa:	bf00      	nop
 80030fc:	370c      	adds	r7, #12
 80030fe:	46bd      	mov	sp, r7
 8003100:	bc80      	pop	{r7}
 8003102:	4770      	bx	lr

08003104 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	bc80      	pop	{r7}
 8003114:	4770      	bx	lr

08003116 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003116:	b480      	push	{r7}
 8003118:	b083      	sub	sp, #12
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800311e:	bf00      	nop
 8003120:	370c      	adds	r7, #12
 8003122:	46bd      	mov	sp, r7
 8003124:	bc80      	pop	{r7}
 8003126:	4770      	bx	lr

08003128 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003130:	bf00      	nop
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	bc80      	pop	{r7}
 8003138:	4770      	bx	lr

0800313a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800313a:	b480      	push	{r7}
 800313c:	b083      	sub	sp, #12
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003142:	bf00      	nop
 8003144:	370c      	adds	r7, #12
 8003146:	46bd      	mov	sp, r7
 8003148:	bc80      	pop	{r7}
 800314a:	4770      	bx	lr

0800314c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800314c:	b480      	push	{r7}
 800314e:	b085      	sub	sp, #20
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a29      	ldr	r2, [pc, #164]	; (8003204 <TIM_Base_SetConfig+0xb8>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d00b      	beq.n	800317c <TIM_Base_SetConfig+0x30>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800316a:	d007      	beq.n	800317c <TIM_Base_SetConfig+0x30>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	4a26      	ldr	r2, [pc, #152]	; (8003208 <TIM_Base_SetConfig+0xbc>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d003      	beq.n	800317c <TIM_Base_SetConfig+0x30>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	4a25      	ldr	r2, [pc, #148]	; (800320c <TIM_Base_SetConfig+0xc0>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d108      	bne.n	800318e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003182:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	68fa      	ldr	r2, [r7, #12]
 800318a:	4313      	orrs	r3, r2
 800318c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a1c      	ldr	r2, [pc, #112]	; (8003204 <TIM_Base_SetConfig+0xb8>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d00b      	beq.n	80031ae <TIM_Base_SetConfig+0x62>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800319c:	d007      	beq.n	80031ae <TIM_Base_SetConfig+0x62>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a19      	ldr	r2, [pc, #100]	; (8003208 <TIM_Base_SetConfig+0xbc>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d003      	beq.n	80031ae <TIM_Base_SetConfig+0x62>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a18      	ldr	r2, [pc, #96]	; (800320c <TIM_Base_SetConfig+0xc0>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d108      	bne.n	80031c0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	68fa      	ldr	r2, [r7, #12]
 80031bc:	4313      	orrs	r3, r2
 80031be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	68fa      	ldr	r2, [r7, #12]
 80031d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	689a      	ldr	r2, [r3, #8]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	4a07      	ldr	r2, [pc, #28]	; (8003204 <TIM_Base_SetConfig+0xb8>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d103      	bne.n	80031f4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	691a      	ldr	r2, [r3, #16]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	615a      	str	r2, [r3, #20]
}
 80031fa:	bf00      	nop
 80031fc:	3714      	adds	r7, #20
 80031fe:	46bd      	mov	sp, r7
 8003200:	bc80      	pop	{r7}
 8003202:	4770      	bx	lr
 8003204:	40012c00 	.word	0x40012c00
 8003208:	40000400 	.word	0x40000400
 800320c:	40000800 	.word	0x40000800

08003210 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003210:	b480      	push	{r7}
 8003212:	b087      	sub	sp, #28
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6a1b      	ldr	r3, [r3, #32]
 8003220:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6a1b      	ldr	r3, [r3, #32]
 8003226:	f023 0201 	bic.w	r2, r3, #1
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800323a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	011b      	lsls	r3, r3, #4
 8003240:	693a      	ldr	r2, [r7, #16]
 8003242:	4313      	orrs	r3, r2
 8003244:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	f023 030a 	bic.w	r3, r3, #10
 800324c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800324e:	697a      	ldr	r2, [r7, #20]
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	4313      	orrs	r3, r2
 8003254:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	693a      	ldr	r2, [r7, #16]
 800325a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	697a      	ldr	r2, [r7, #20]
 8003260:	621a      	str	r2, [r3, #32]
}
 8003262:	bf00      	nop
 8003264:	371c      	adds	r7, #28
 8003266:	46bd      	mov	sp, r7
 8003268:	bc80      	pop	{r7}
 800326a:	4770      	bx	lr

0800326c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800326c:	b480      	push	{r7}
 800326e:	b087      	sub	sp, #28
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6a1b      	ldr	r3, [r3, #32]
 800327c:	f023 0210 	bic.w	r2, r3, #16
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	699b      	ldr	r3, [r3, #24]
 8003288:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6a1b      	ldr	r3, [r3, #32]
 800328e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003296:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	031b      	lsls	r3, r3, #12
 800329c:	697a      	ldr	r2, [r7, #20]
 800329e:	4313      	orrs	r3, r2
 80032a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80032a8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	011b      	lsls	r3, r3, #4
 80032ae:	693a      	ldr	r2, [r7, #16]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	697a      	ldr	r2, [r7, #20]
 80032b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	693a      	ldr	r2, [r7, #16]
 80032be:	621a      	str	r2, [r3, #32]
}
 80032c0:	bf00      	nop
 80032c2:	371c      	adds	r7, #28
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bc80      	pop	{r7}
 80032c8:	4770      	bx	lr

080032ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80032ca:	b480      	push	{r7}
 80032cc:	b085      	sub	sp, #20
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	6078      	str	r0, [r7, #4]
 80032d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032e2:	683a      	ldr	r2, [r7, #0]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	f043 0307 	orr.w	r3, r3, #7
 80032ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	68fa      	ldr	r2, [r7, #12]
 80032f2:	609a      	str	r2, [r3, #8]
}
 80032f4:	bf00      	nop
 80032f6:	3714      	adds	r7, #20
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bc80      	pop	{r7}
 80032fc:	4770      	bx	lr

080032fe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80032fe:	b480      	push	{r7}
 8003300:	b087      	sub	sp, #28
 8003302:	af00      	add	r7, sp, #0
 8003304:	60f8      	str	r0, [r7, #12]
 8003306:	60b9      	str	r1, [r7, #8]
 8003308:	607a      	str	r2, [r7, #4]
 800330a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003318:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	021a      	lsls	r2, r3, #8
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	431a      	orrs	r2, r3
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	4313      	orrs	r3, r2
 8003326:	697a      	ldr	r2, [r7, #20]
 8003328:	4313      	orrs	r3, r2
 800332a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	697a      	ldr	r2, [r7, #20]
 8003330:	609a      	str	r2, [r3, #8]
}
 8003332:	bf00      	nop
 8003334:	371c      	adds	r7, #28
 8003336:	46bd      	mov	sp, r7
 8003338:	bc80      	pop	{r7}
 800333a:	4770      	bx	lr

0800333c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800333c:	b480      	push	{r7}
 800333e:	b085      	sub	sp, #20
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800334c:	2b01      	cmp	r3, #1
 800334e:	d101      	bne.n	8003354 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003350:	2302      	movs	r3, #2
 8003352:	e032      	b.n	80033ba <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2202      	movs	r2, #2
 8003360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800337a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68fa      	ldr	r2, [r7, #12]
 8003382:	4313      	orrs	r3, r2
 8003384:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800338c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	68ba      	ldr	r2, [r7, #8]
 8003394:	4313      	orrs	r3, r2
 8003396:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	68fa      	ldr	r2, [r7, #12]
 800339e:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68ba      	ldr	r2, [r7, #8]
 80033a6:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3714      	adds	r7, #20
 80033be:	46bd      	mov	sp, r7
 80033c0:	bc80      	pop	{r7}
 80033c2:	4770      	bx	lr

080033c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033cc:	bf00      	nop
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bc80      	pop	{r7}
 80033d4:	4770      	bx	lr

080033d6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033d6:	b480      	push	{r7}
 80033d8:	b083      	sub	sp, #12
 80033da:	af00      	add	r7, sp, #0
 80033dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033de:	bf00      	nop
 80033e0:	370c      	adds	r7, #12
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bc80      	pop	{r7}
 80033e6:	4770      	bx	lr

080033e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d101      	bne.n	80033fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e03f      	b.n	800347a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003400:	b2db      	uxtb	r3, r3
 8003402:	2b00      	cmp	r3, #0
 8003404:	d106      	bne.n	8003414 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f7fd f9c4 	bl	800079c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2224      	movs	r2, #36	; 0x24
 8003418:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	68da      	ldr	r2, [r3, #12]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800342a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f000 faa3 	bl	8003978 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	691a      	ldr	r2, [r3, #16]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003440:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	695a      	ldr	r2, [r3, #20]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003450:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	68da      	ldr	r2, [r3, #12]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003460:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2220      	movs	r2, #32
 800346c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2220      	movs	r2, #32
 8003474:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3708      	adds	r7, #8
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}

08003482 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003482:	b480      	push	{r7}
 8003484:	b085      	sub	sp, #20
 8003486:	af00      	add	r7, sp, #0
 8003488:	60f8      	str	r0, [r7, #12]
 800348a:	60b9      	str	r1, [r7, #8]
 800348c:	4613      	mov	r3, r2
 800348e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003496:	b2db      	uxtb	r3, r3
 8003498:	2b20      	cmp	r3, #32
 800349a:	d130      	bne.n	80034fe <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d002      	beq.n	80034a8 <HAL_UART_Transmit_IT+0x26>
 80034a2:	88fb      	ldrh	r3, [r7, #6]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d101      	bne.n	80034ac <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e029      	b.n	8003500 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d101      	bne.n	80034ba <HAL_UART_Transmit_IT+0x38>
 80034b6:	2302      	movs	r3, #2
 80034b8:	e022      	b.n	8003500 <HAL_UART_Transmit_IT+0x7e>
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2201      	movs	r2, #1
 80034be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	68ba      	ldr	r2, [r7, #8]
 80034c6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	88fa      	ldrh	r2, [r7, #6]
 80034cc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	88fa      	ldrh	r2, [r7, #6]
 80034d2:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2200      	movs	r2, #0
 80034d8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2221      	movs	r2, #33	; 0x21
 80034de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	68da      	ldr	r2, [r3, #12]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80034f8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80034fa:	2300      	movs	r3, #0
 80034fc:	e000      	b.n	8003500 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80034fe:	2302      	movs	r3, #2
  }
}
 8003500:	4618      	mov	r0, r3
 8003502:	3714      	adds	r7, #20
 8003504:	46bd      	mov	sp, r7
 8003506:	bc80      	pop	{r7}
 8003508:	4770      	bx	lr
	...

0800350c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b088      	sub	sp, #32
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	695b      	ldr	r3, [r3, #20]
 800352a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800352c:	2300      	movs	r3, #0
 800352e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003530:	2300      	movs	r3, #0
 8003532:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	f003 030f 	and.w	r3, r3, #15
 800353a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d10d      	bne.n	800355e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	f003 0320 	and.w	r3, r3, #32
 8003548:	2b00      	cmp	r3, #0
 800354a:	d008      	beq.n	800355e <HAL_UART_IRQHandler+0x52>
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	f003 0320 	and.w	r3, r3, #32
 8003552:	2b00      	cmp	r3, #0
 8003554:	d003      	beq.n	800355e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 f98d 	bl	8003876 <UART_Receive_IT>
      return;
 800355c:	e0cc      	b.n	80036f8 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	2b00      	cmp	r3, #0
 8003562:	f000 80ab 	beq.w	80036bc <HAL_UART_IRQHandler+0x1b0>
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	f003 0301 	and.w	r3, r3, #1
 800356c:	2b00      	cmp	r3, #0
 800356e:	d105      	bne.n	800357c <HAL_UART_IRQHandler+0x70>
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003576:	2b00      	cmp	r3, #0
 8003578:	f000 80a0 	beq.w	80036bc <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	f003 0301 	and.w	r3, r3, #1
 8003582:	2b00      	cmp	r3, #0
 8003584:	d00a      	beq.n	800359c <HAL_UART_IRQHandler+0x90>
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800358c:	2b00      	cmp	r3, #0
 800358e:	d005      	beq.n	800359c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003594:	f043 0201 	orr.w	r2, r3, #1
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	f003 0304 	and.w	r3, r3, #4
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00a      	beq.n	80035bc <HAL_UART_IRQHandler+0xb0>
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	f003 0301 	and.w	r3, r3, #1
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d005      	beq.n	80035bc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035b4:	f043 0202 	orr.w	r2, r3, #2
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d00a      	beq.n	80035dc <HAL_UART_IRQHandler+0xd0>
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	f003 0301 	and.w	r3, r3, #1
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d005      	beq.n	80035dc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035d4:	f043 0204 	orr.w	r2, r3, #4
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	f003 0308 	and.w	r3, r3, #8
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d00a      	beq.n	80035fc <HAL_UART_IRQHandler+0xf0>
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	f003 0301 	and.w	r3, r3, #1
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d005      	beq.n	80035fc <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035f4:	f043 0208 	orr.w	r2, r3, #8
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003600:	2b00      	cmp	r3, #0
 8003602:	d078      	beq.n	80036f6 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	f003 0320 	and.w	r3, r3, #32
 800360a:	2b00      	cmp	r3, #0
 800360c:	d007      	beq.n	800361e <HAL_UART_IRQHandler+0x112>
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	f003 0320 	and.w	r3, r3, #32
 8003614:	2b00      	cmp	r3, #0
 8003616:	d002      	beq.n	800361e <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f000 f92c 	bl	8003876 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	695b      	ldr	r3, [r3, #20]
 8003624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003628:	2b00      	cmp	r3, #0
 800362a:	bf14      	ite	ne
 800362c:	2301      	movne	r3, #1
 800362e:	2300      	moveq	r3, #0
 8003630:	b2db      	uxtb	r3, r3
 8003632:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003638:	f003 0308 	and.w	r3, r3, #8
 800363c:	2b00      	cmp	r3, #0
 800363e:	d102      	bne.n	8003646 <HAL_UART_IRQHandler+0x13a>
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d031      	beq.n	80036aa <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 f877 	bl	800373a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	695b      	ldr	r3, [r3, #20]
 8003652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003656:	2b00      	cmp	r3, #0
 8003658:	d023      	beq.n	80036a2 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	695a      	ldr	r2, [r3, #20]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003668:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800366e:	2b00      	cmp	r3, #0
 8003670:	d013      	beq.n	800369a <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003676:	4a22      	ldr	r2, [pc, #136]	; (8003700 <HAL_UART_IRQHandler+0x1f4>)
 8003678:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800367e:	4618      	mov	r0, r3
 8003680:	f7fe fa50 	bl	8001b24 <HAL_DMA_Abort_IT>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d016      	beq.n	80036b8 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800368e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003694:	4610      	mov	r0, r2
 8003696:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003698:	e00e      	b.n	80036b8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 f844 	bl	8003728 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036a0:	e00a      	b.n	80036b8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f000 f840 	bl	8003728 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036a8:	e006      	b.n	80036b8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f000 f83c 	bl	8003728 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80036b6:	e01e      	b.n	80036f6 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036b8:	bf00      	nop
    return;
 80036ba:	e01c      	b.n	80036f6 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d008      	beq.n	80036d8 <HAL_UART_IRQHandler+0x1cc>
 80036c6:	69bb      	ldr	r3, [r7, #24]
 80036c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d003      	beq.n	80036d8 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f000 f863 	bl	800379c <UART_Transmit_IT>
    return;
 80036d6:	e00f      	b.n	80036f8 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d00a      	beq.n	80036f8 <HAL_UART_IRQHandler+0x1ec>
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d005      	beq.n	80036f8 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f000 f8aa 	bl	8003846 <UART_EndTransmit_IT>
    return;
 80036f2:	bf00      	nop
 80036f4:	e000      	b.n	80036f8 <HAL_UART_IRQHandler+0x1ec>
    return;
 80036f6:	bf00      	nop
  }
}
 80036f8:	3720      	adds	r7, #32
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	08003775 	.word	0x08003775

08003704 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800370c:	bf00      	nop
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	bc80      	pop	{r7}
 8003714:	4770      	bx	lr

08003716 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003716:	b480      	push	{r7}
 8003718:	b083      	sub	sp, #12
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800371e:	bf00      	nop
 8003720:	370c      	adds	r7, #12
 8003722:	46bd      	mov	sp, r7
 8003724:	bc80      	pop	{r7}
 8003726:	4770      	bx	lr

08003728 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003730:	bf00      	nop
 8003732:	370c      	adds	r7, #12
 8003734:	46bd      	mov	sp, r7
 8003736:	bc80      	pop	{r7}
 8003738:	4770      	bx	lr

0800373a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800373a:	b480      	push	{r7}
 800373c:	b083      	sub	sp, #12
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	68da      	ldr	r2, [r3, #12]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003750:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	695a      	ldr	r2, [r3, #20]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f022 0201 	bic.w	r2, r2, #1
 8003760:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2220      	movs	r2, #32
 8003766:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800376a:	bf00      	nop
 800376c:	370c      	adds	r7, #12
 800376e:	46bd      	mov	sp, r7
 8003770:	bc80      	pop	{r7}
 8003772:	4770      	bx	lr

08003774 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003780:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2200      	movs	r2, #0
 8003786:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2200      	movs	r2, #0
 800378c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800378e:	68f8      	ldr	r0, [r7, #12]
 8003790:	f7ff ffca 	bl	8003728 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003794:	bf00      	nop
 8003796:	3710      	adds	r7, #16
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800379c:	b480      	push	{r7}
 800379e:	b085      	sub	sp, #20
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	2b21      	cmp	r3, #33	; 0x21
 80037ae:	d144      	bne.n	800383a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037b8:	d11a      	bne.n	80037f0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a1b      	ldr	r3, [r3, #32]
 80037be:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	881b      	ldrh	r3, [r3, #0]
 80037c4:	461a      	mov	r2, r3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037ce:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d105      	bne.n	80037e4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a1b      	ldr	r3, [r3, #32]
 80037dc:	1c9a      	adds	r2, r3, #2
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	621a      	str	r2, [r3, #32]
 80037e2:	e00e      	b.n	8003802 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a1b      	ldr	r3, [r3, #32]
 80037e8:	1c5a      	adds	r2, r3, #1
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	621a      	str	r2, [r3, #32]
 80037ee:	e008      	b.n	8003802 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6a1b      	ldr	r3, [r3, #32]
 80037f4:	1c59      	adds	r1, r3, #1
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	6211      	str	r1, [r2, #32]
 80037fa:	781a      	ldrb	r2, [r3, #0]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003806:	b29b      	uxth	r3, r3
 8003808:	3b01      	subs	r3, #1
 800380a:	b29b      	uxth	r3, r3
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	4619      	mov	r1, r3
 8003810:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003812:	2b00      	cmp	r3, #0
 8003814:	d10f      	bne.n	8003836 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68da      	ldr	r2, [r3, #12]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003824:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	68da      	ldr	r2, [r3, #12]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003834:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003836:	2300      	movs	r3, #0
 8003838:	e000      	b.n	800383c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800383a:	2302      	movs	r3, #2
  }
}
 800383c:	4618      	mov	r0, r3
 800383e:	3714      	adds	r7, #20
 8003840:	46bd      	mov	sp, r7
 8003842:	bc80      	pop	{r7}
 8003844:	4770      	bx	lr

08003846 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003846:	b580      	push	{r7, lr}
 8003848:	b082      	sub	sp, #8
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	68da      	ldr	r2, [r3, #12]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800385c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2220      	movs	r2, #32
 8003862:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f7ff ff4c 	bl	8003704 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3708      	adds	r7, #8
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}

08003876 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003876:	b580      	push	{r7, lr}
 8003878:	b084      	sub	sp, #16
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003884:	b2db      	uxtb	r3, r3
 8003886:	2b22      	cmp	r3, #34	; 0x22
 8003888:	d171      	bne.n	800396e <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003892:	d123      	bne.n	80038dc <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003898:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d10e      	bne.n	80038c0 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038ae:	b29a      	uxth	r2, r3
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b8:	1c9a      	adds	r2, r3, #2
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	629a      	str	r2, [r3, #40]	; 0x28
 80038be:	e029      	b.n	8003914 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	b29a      	uxth	r2, r3
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d4:	1c5a      	adds	r2, r3, #1
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	629a      	str	r2, [r3, #40]	; 0x28
 80038da:	e01b      	b.n	8003914 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	691b      	ldr	r3, [r3, #16]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d10a      	bne.n	80038fa <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	6858      	ldr	r0, [r3, #4]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ee:	1c59      	adds	r1, r3, #1
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	6291      	str	r1, [r2, #40]	; 0x28
 80038f4:	b2c2      	uxtb	r2, r0
 80038f6:	701a      	strb	r2, [r3, #0]
 80038f8:	e00c      	b.n	8003914 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	b2da      	uxtb	r2, r3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003906:	1c58      	adds	r0, r3, #1
 8003908:	6879      	ldr	r1, [r7, #4]
 800390a:	6288      	str	r0, [r1, #40]	; 0x28
 800390c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003910:	b2d2      	uxtb	r2, r2
 8003912:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003918:	b29b      	uxth	r3, r3
 800391a:	3b01      	subs	r3, #1
 800391c:	b29b      	uxth	r3, r3
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	4619      	mov	r1, r3
 8003922:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003924:	2b00      	cmp	r3, #0
 8003926:	d120      	bne.n	800396a <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	68da      	ldr	r2, [r3, #12]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f022 0220 	bic.w	r2, r2, #32
 8003936:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	68da      	ldr	r2, [r3, #12]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003946:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	695a      	ldr	r2, [r3, #20]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f022 0201 	bic.w	r2, r2, #1
 8003956:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2220      	movs	r2, #32
 800395c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f7ff fed8 	bl	8003716 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003966:	2300      	movs	r3, #0
 8003968:	e002      	b.n	8003970 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800396a:	2300      	movs	r3, #0
 800396c:	e000      	b.n	8003970 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800396e:	2302      	movs	r3, #2
  }
}
 8003970:	4618      	mov	r0, r3
 8003972:	3710      	adds	r7, #16
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}

08003978 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	68da      	ldr	r2, [r3, #12]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	430a      	orrs	r2, r1
 8003994:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	689a      	ldr	r2, [r3, #8]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	431a      	orrs	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	695b      	ldr	r3, [r3, #20]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80039b2:	f023 030c 	bic.w	r3, r3, #12
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	6812      	ldr	r2, [r2, #0]
 80039ba:	68f9      	ldr	r1, [r7, #12]
 80039bc:	430b      	orrs	r3, r1
 80039be:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	695b      	ldr	r3, [r3, #20]
 80039c6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	699a      	ldr	r2, [r3, #24]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	430a      	orrs	r2, r1
 80039d4:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a52      	ldr	r2, [pc, #328]	; (8003b24 <UART_SetConfig+0x1ac>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d14e      	bne.n	8003a7e <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80039e0:	f7fe ffd6 	bl	8002990 <HAL_RCC_GetPCLK2Freq>
 80039e4:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039e6:	68ba      	ldr	r2, [r7, #8]
 80039e8:	4613      	mov	r3, r2
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	4413      	add	r3, r2
 80039ee:	009a      	lsls	r2, r3, #2
 80039f0:	441a      	add	r2, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039fc:	4a4a      	ldr	r2, [pc, #296]	; (8003b28 <UART_SetConfig+0x1b0>)
 80039fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003a02:	095b      	lsrs	r3, r3, #5
 8003a04:	0119      	lsls	r1, r3, #4
 8003a06:	68ba      	ldr	r2, [r7, #8]
 8003a08:	4613      	mov	r3, r2
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	4413      	add	r3, r2
 8003a0e:	009a      	lsls	r2, r3, #2
 8003a10:	441a      	add	r2, r3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a1c:	4b42      	ldr	r3, [pc, #264]	; (8003b28 <UART_SetConfig+0x1b0>)
 8003a1e:	fba3 0302 	umull	r0, r3, r3, r2
 8003a22:	095b      	lsrs	r3, r3, #5
 8003a24:	2064      	movs	r0, #100	; 0x64
 8003a26:	fb00 f303 	mul.w	r3, r0, r3
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	011b      	lsls	r3, r3, #4
 8003a2e:	3332      	adds	r3, #50	; 0x32
 8003a30:	4a3d      	ldr	r2, [pc, #244]	; (8003b28 <UART_SetConfig+0x1b0>)
 8003a32:	fba2 2303 	umull	r2, r3, r2, r3
 8003a36:	095b      	lsrs	r3, r3, #5
 8003a38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a3c:	4419      	add	r1, r3
 8003a3e:	68ba      	ldr	r2, [r7, #8]
 8003a40:	4613      	mov	r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	4413      	add	r3, r2
 8003a46:	009a      	lsls	r2, r3, #2
 8003a48:	441a      	add	r2, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a54:	4b34      	ldr	r3, [pc, #208]	; (8003b28 <UART_SetConfig+0x1b0>)
 8003a56:	fba3 0302 	umull	r0, r3, r3, r2
 8003a5a:	095b      	lsrs	r3, r3, #5
 8003a5c:	2064      	movs	r0, #100	; 0x64
 8003a5e:	fb00 f303 	mul.w	r3, r0, r3
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	011b      	lsls	r3, r3, #4
 8003a66:	3332      	adds	r3, #50	; 0x32
 8003a68:	4a2f      	ldr	r2, [pc, #188]	; (8003b28 <UART_SetConfig+0x1b0>)
 8003a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a6e:	095b      	lsrs	r3, r3, #5
 8003a70:	f003 020f 	and.w	r2, r3, #15
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	440a      	add	r2, r1
 8003a7a:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8003a7c:	e04d      	b.n	8003b1a <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8003a7e:	f7fe ff73 	bl	8002968 <HAL_RCC_GetPCLK1Freq>
 8003a82:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a84:	68ba      	ldr	r2, [r7, #8]
 8003a86:	4613      	mov	r3, r2
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	4413      	add	r3, r2
 8003a8c:	009a      	lsls	r2, r3, #2
 8003a8e:	441a      	add	r2, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a9a:	4a23      	ldr	r2, [pc, #140]	; (8003b28 <UART_SetConfig+0x1b0>)
 8003a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa0:	095b      	lsrs	r3, r3, #5
 8003aa2:	0119      	lsls	r1, r3, #4
 8003aa4:	68ba      	ldr	r2, [r7, #8]
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	4413      	add	r3, r2
 8003aac:	009a      	lsls	r2, r3, #2
 8003aae:	441a      	add	r2, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	fbb2 f2f3 	udiv	r2, r2, r3
 8003aba:	4b1b      	ldr	r3, [pc, #108]	; (8003b28 <UART_SetConfig+0x1b0>)
 8003abc:	fba3 0302 	umull	r0, r3, r3, r2
 8003ac0:	095b      	lsrs	r3, r3, #5
 8003ac2:	2064      	movs	r0, #100	; 0x64
 8003ac4:	fb00 f303 	mul.w	r3, r0, r3
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	011b      	lsls	r3, r3, #4
 8003acc:	3332      	adds	r3, #50	; 0x32
 8003ace:	4a16      	ldr	r2, [pc, #88]	; (8003b28 <UART_SetConfig+0x1b0>)
 8003ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad4:	095b      	lsrs	r3, r3, #5
 8003ad6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ada:	4419      	add	r1, r3
 8003adc:	68ba      	ldr	r2, [r7, #8]
 8003ade:	4613      	mov	r3, r2
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	4413      	add	r3, r2
 8003ae4:	009a      	lsls	r2, r3, #2
 8003ae6:	441a      	add	r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	fbb2 f2f3 	udiv	r2, r2, r3
 8003af2:	4b0d      	ldr	r3, [pc, #52]	; (8003b28 <UART_SetConfig+0x1b0>)
 8003af4:	fba3 0302 	umull	r0, r3, r3, r2
 8003af8:	095b      	lsrs	r3, r3, #5
 8003afa:	2064      	movs	r0, #100	; 0x64
 8003afc:	fb00 f303 	mul.w	r3, r0, r3
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	011b      	lsls	r3, r3, #4
 8003b04:	3332      	adds	r3, #50	; 0x32
 8003b06:	4a08      	ldr	r2, [pc, #32]	; (8003b28 <UART_SetConfig+0x1b0>)
 8003b08:	fba2 2303 	umull	r2, r3, r2, r3
 8003b0c:	095b      	lsrs	r3, r3, #5
 8003b0e:	f003 020f 	and.w	r2, r3, #15
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	440a      	add	r2, r1
 8003b18:	609a      	str	r2, [r3, #8]
}
 8003b1a:	bf00      	nop
 8003b1c:	3710      	adds	r7, #16
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	40013800 	.word	0x40013800
 8003b28:	51eb851f 	.word	0x51eb851f

08003b2c <__errno>:
 8003b2c:	4b01      	ldr	r3, [pc, #4]	; (8003b34 <__errno+0x8>)
 8003b2e:	6818      	ldr	r0, [r3, #0]
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	2000000c 	.word	0x2000000c

08003b38 <__libc_init_array>:
 8003b38:	b570      	push	{r4, r5, r6, lr}
 8003b3a:	2500      	movs	r5, #0
 8003b3c:	4e0c      	ldr	r6, [pc, #48]	; (8003b70 <__libc_init_array+0x38>)
 8003b3e:	4c0d      	ldr	r4, [pc, #52]	; (8003b74 <__libc_init_array+0x3c>)
 8003b40:	1ba4      	subs	r4, r4, r6
 8003b42:	10a4      	asrs	r4, r4, #2
 8003b44:	42a5      	cmp	r5, r4
 8003b46:	d109      	bne.n	8003b5c <__libc_init_array+0x24>
 8003b48:	f000 fc34 	bl	80043b4 <_init>
 8003b4c:	2500      	movs	r5, #0
 8003b4e:	4e0a      	ldr	r6, [pc, #40]	; (8003b78 <__libc_init_array+0x40>)
 8003b50:	4c0a      	ldr	r4, [pc, #40]	; (8003b7c <__libc_init_array+0x44>)
 8003b52:	1ba4      	subs	r4, r4, r6
 8003b54:	10a4      	asrs	r4, r4, #2
 8003b56:	42a5      	cmp	r5, r4
 8003b58:	d105      	bne.n	8003b66 <__libc_init_array+0x2e>
 8003b5a:	bd70      	pop	{r4, r5, r6, pc}
 8003b5c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b60:	4798      	blx	r3
 8003b62:	3501      	adds	r5, #1
 8003b64:	e7ee      	b.n	8003b44 <__libc_init_array+0xc>
 8003b66:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b6a:	4798      	blx	r3
 8003b6c:	3501      	adds	r5, #1
 8003b6e:	e7f2      	b.n	8003b56 <__libc_init_array+0x1e>
 8003b70:	08004450 	.word	0x08004450
 8003b74:	08004450 	.word	0x08004450
 8003b78:	08004450 	.word	0x08004450
 8003b7c:	08004454 	.word	0x08004454

08003b80 <memset>:
 8003b80:	4603      	mov	r3, r0
 8003b82:	4402      	add	r2, r0
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d100      	bne.n	8003b8a <memset+0xa>
 8003b88:	4770      	bx	lr
 8003b8a:	f803 1b01 	strb.w	r1, [r3], #1
 8003b8e:	e7f9      	b.n	8003b84 <memset+0x4>

08003b90 <siprintf>:
 8003b90:	b40e      	push	{r1, r2, r3}
 8003b92:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003b96:	b500      	push	{lr}
 8003b98:	b09c      	sub	sp, #112	; 0x70
 8003b9a:	ab1d      	add	r3, sp, #116	; 0x74
 8003b9c:	9002      	str	r0, [sp, #8]
 8003b9e:	9006      	str	r0, [sp, #24]
 8003ba0:	9107      	str	r1, [sp, #28]
 8003ba2:	9104      	str	r1, [sp, #16]
 8003ba4:	4808      	ldr	r0, [pc, #32]	; (8003bc8 <siprintf+0x38>)
 8003ba6:	4909      	ldr	r1, [pc, #36]	; (8003bcc <siprintf+0x3c>)
 8003ba8:	f853 2b04 	ldr.w	r2, [r3], #4
 8003bac:	9105      	str	r1, [sp, #20]
 8003bae:	6800      	ldr	r0, [r0, #0]
 8003bb0:	a902      	add	r1, sp, #8
 8003bb2:	9301      	str	r3, [sp, #4]
 8003bb4:	f000 f866 	bl	8003c84 <_svfiprintf_r>
 8003bb8:	2200      	movs	r2, #0
 8003bba:	9b02      	ldr	r3, [sp, #8]
 8003bbc:	701a      	strb	r2, [r3, #0]
 8003bbe:	b01c      	add	sp, #112	; 0x70
 8003bc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003bc4:	b003      	add	sp, #12
 8003bc6:	4770      	bx	lr
 8003bc8:	2000000c 	.word	0x2000000c
 8003bcc:	ffff0208 	.word	0xffff0208

08003bd0 <__ssputs_r>:
 8003bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bd4:	688e      	ldr	r6, [r1, #8]
 8003bd6:	4682      	mov	sl, r0
 8003bd8:	429e      	cmp	r6, r3
 8003bda:	460c      	mov	r4, r1
 8003bdc:	4690      	mov	r8, r2
 8003bde:	4699      	mov	r9, r3
 8003be0:	d837      	bhi.n	8003c52 <__ssputs_r+0x82>
 8003be2:	898a      	ldrh	r2, [r1, #12]
 8003be4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003be8:	d031      	beq.n	8003c4e <__ssputs_r+0x7e>
 8003bea:	2302      	movs	r3, #2
 8003bec:	6825      	ldr	r5, [r4, #0]
 8003bee:	6909      	ldr	r1, [r1, #16]
 8003bf0:	1a6f      	subs	r7, r5, r1
 8003bf2:	6965      	ldr	r5, [r4, #20]
 8003bf4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003bf8:	fb95 f5f3 	sdiv	r5, r5, r3
 8003bfc:	f109 0301 	add.w	r3, r9, #1
 8003c00:	443b      	add	r3, r7
 8003c02:	429d      	cmp	r5, r3
 8003c04:	bf38      	it	cc
 8003c06:	461d      	movcc	r5, r3
 8003c08:	0553      	lsls	r3, r2, #21
 8003c0a:	d530      	bpl.n	8003c6e <__ssputs_r+0x9e>
 8003c0c:	4629      	mov	r1, r5
 8003c0e:	f000 fb37 	bl	8004280 <_malloc_r>
 8003c12:	4606      	mov	r6, r0
 8003c14:	b950      	cbnz	r0, 8003c2c <__ssputs_r+0x5c>
 8003c16:	230c      	movs	r3, #12
 8003c18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c1c:	f8ca 3000 	str.w	r3, [sl]
 8003c20:	89a3      	ldrh	r3, [r4, #12]
 8003c22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c26:	81a3      	strh	r3, [r4, #12]
 8003c28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c2c:	463a      	mov	r2, r7
 8003c2e:	6921      	ldr	r1, [r4, #16]
 8003c30:	f000 fab6 	bl	80041a0 <memcpy>
 8003c34:	89a3      	ldrh	r3, [r4, #12]
 8003c36:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003c3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c3e:	81a3      	strh	r3, [r4, #12]
 8003c40:	6126      	str	r6, [r4, #16]
 8003c42:	443e      	add	r6, r7
 8003c44:	6026      	str	r6, [r4, #0]
 8003c46:	464e      	mov	r6, r9
 8003c48:	6165      	str	r5, [r4, #20]
 8003c4a:	1bed      	subs	r5, r5, r7
 8003c4c:	60a5      	str	r5, [r4, #8]
 8003c4e:	454e      	cmp	r6, r9
 8003c50:	d900      	bls.n	8003c54 <__ssputs_r+0x84>
 8003c52:	464e      	mov	r6, r9
 8003c54:	4632      	mov	r2, r6
 8003c56:	4641      	mov	r1, r8
 8003c58:	6820      	ldr	r0, [r4, #0]
 8003c5a:	f000 faac 	bl	80041b6 <memmove>
 8003c5e:	68a3      	ldr	r3, [r4, #8]
 8003c60:	2000      	movs	r0, #0
 8003c62:	1b9b      	subs	r3, r3, r6
 8003c64:	60a3      	str	r3, [r4, #8]
 8003c66:	6823      	ldr	r3, [r4, #0]
 8003c68:	441e      	add	r6, r3
 8003c6a:	6026      	str	r6, [r4, #0]
 8003c6c:	e7dc      	b.n	8003c28 <__ssputs_r+0x58>
 8003c6e:	462a      	mov	r2, r5
 8003c70:	f000 fb60 	bl	8004334 <_realloc_r>
 8003c74:	4606      	mov	r6, r0
 8003c76:	2800      	cmp	r0, #0
 8003c78:	d1e2      	bne.n	8003c40 <__ssputs_r+0x70>
 8003c7a:	6921      	ldr	r1, [r4, #16]
 8003c7c:	4650      	mov	r0, sl
 8003c7e:	f000 fab3 	bl	80041e8 <_free_r>
 8003c82:	e7c8      	b.n	8003c16 <__ssputs_r+0x46>

08003c84 <_svfiprintf_r>:
 8003c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c88:	461d      	mov	r5, r3
 8003c8a:	898b      	ldrh	r3, [r1, #12]
 8003c8c:	b09d      	sub	sp, #116	; 0x74
 8003c8e:	061f      	lsls	r7, r3, #24
 8003c90:	4680      	mov	r8, r0
 8003c92:	460c      	mov	r4, r1
 8003c94:	4616      	mov	r6, r2
 8003c96:	d50f      	bpl.n	8003cb8 <_svfiprintf_r+0x34>
 8003c98:	690b      	ldr	r3, [r1, #16]
 8003c9a:	b96b      	cbnz	r3, 8003cb8 <_svfiprintf_r+0x34>
 8003c9c:	2140      	movs	r1, #64	; 0x40
 8003c9e:	f000 faef 	bl	8004280 <_malloc_r>
 8003ca2:	6020      	str	r0, [r4, #0]
 8003ca4:	6120      	str	r0, [r4, #16]
 8003ca6:	b928      	cbnz	r0, 8003cb4 <_svfiprintf_r+0x30>
 8003ca8:	230c      	movs	r3, #12
 8003caa:	f8c8 3000 	str.w	r3, [r8]
 8003cae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003cb2:	e0c8      	b.n	8003e46 <_svfiprintf_r+0x1c2>
 8003cb4:	2340      	movs	r3, #64	; 0x40
 8003cb6:	6163      	str	r3, [r4, #20]
 8003cb8:	2300      	movs	r3, #0
 8003cba:	9309      	str	r3, [sp, #36]	; 0x24
 8003cbc:	2320      	movs	r3, #32
 8003cbe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003cc2:	2330      	movs	r3, #48	; 0x30
 8003cc4:	f04f 0b01 	mov.w	fp, #1
 8003cc8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003ccc:	9503      	str	r5, [sp, #12]
 8003cce:	4637      	mov	r7, r6
 8003cd0:	463d      	mov	r5, r7
 8003cd2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003cd6:	b10b      	cbz	r3, 8003cdc <_svfiprintf_r+0x58>
 8003cd8:	2b25      	cmp	r3, #37	; 0x25
 8003cda:	d13e      	bne.n	8003d5a <_svfiprintf_r+0xd6>
 8003cdc:	ebb7 0a06 	subs.w	sl, r7, r6
 8003ce0:	d00b      	beq.n	8003cfa <_svfiprintf_r+0x76>
 8003ce2:	4653      	mov	r3, sl
 8003ce4:	4632      	mov	r2, r6
 8003ce6:	4621      	mov	r1, r4
 8003ce8:	4640      	mov	r0, r8
 8003cea:	f7ff ff71 	bl	8003bd0 <__ssputs_r>
 8003cee:	3001      	adds	r0, #1
 8003cf0:	f000 80a4 	beq.w	8003e3c <_svfiprintf_r+0x1b8>
 8003cf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003cf6:	4453      	add	r3, sl
 8003cf8:	9309      	str	r3, [sp, #36]	; 0x24
 8003cfa:	783b      	ldrb	r3, [r7, #0]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	f000 809d 	beq.w	8003e3c <_svfiprintf_r+0x1b8>
 8003d02:	2300      	movs	r3, #0
 8003d04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d0c:	9304      	str	r3, [sp, #16]
 8003d0e:	9307      	str	r3, [sp, #28]
 8003d10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003d14:	931a      	str	r3, [sp, #104]	; 0x68
 8003d16:	462f      	mov	r7, r5
 8003d18:	2205      	movs	r2, #5
 8003d1a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003d1e:	4850      	ldr	r0, [pc, #320]	; (8003e60 <_svfiprintf_r+0x1dc>)
 8003d20:	f000 fa30 	bl	8004184 <memchr>
 8003d24:	9b04      	ldr	r3, [sp, #16]
 8003d26:	b9d0      	cbnz	r0, 8003d5e <_svfiprintf_r+0xda>
 8003d28:	06d9      	lsls	r1, r3, #27
 8003d2a:	bf44      	itt	mi
 8003d2c:	2220      	movmi	r2, #32
 8003d2e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003d32:	071a      	lsls	r2, r3, #28
 8003d34:	bf44      	itt	mi
 8003d36:	222b      	movmi	r2, #43	; 0x2b
 8003d38:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003d3c:	782a      	ldrb	r2, [r5, #0]
 8003d3e:	2a2a      	cmp	r2, #42	; 0x2a
 8003d40:	d015      	beq.n	8003d6e <_svfiprintf_r+0xea>
 8003d42:	462f      	mov	r7, r5
 8003d44:	2000      	movs	r0, #0
 8003d46:	250a      	movs	r5, #10
 8003d48:	9a07      	ldr	r2, [sp, #28]
 8003d4a:	4639      	mov	r1, r7
 8003d4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d50:	3b30      	subs	r3, #48	; 0x30
 8003d52:	2b09      	cmp	r3, #9
 8003d54:	d94d      	bls.n	8003df2 <_svfiprintf_r+0x16e>
 8003d56:	b1b8      	cbz	r0, 8003d88 <_svfiprintf_r+0x104>
 8003d58:	e00f      	b.n	8003d7a <_svfiprintf_r+0xf6>
 8003d5a:	462f      	mov	r7, r5
 8003d5c:	e7b8      	b.n	8003cd0 <_svfiprintf_r+0x4c>
 8003d5e:	4a40      	ldr	r2, [pc, #256]	; (8003e60 <_svfiprintf_r+0x1dc>)
 8003d60:	463d      	mov	r5, r7
 8003d62:	1a80      	subs	r0, r0, r2
 8003d64:	fa0b f000 	lsl.w	r0, fp, r0
 8003d68:	4318      	orrs	r0, r3
 8003d6a:	9004      	str	r0, [sp, #16]
 8003d6c:	e7d3      	b.n	8003d16 <_svfiprintf_r+0x92>
 8003d6e:	9a03      	ldr	r2, [sp, #12]
 8003d70:	1d11      	adds	r1, r2, #4
 8003d72:	6812      	ldr	r2, [r2, #0]
 8003d74:	9103      	str	r1, [sp, #12]
 8003d76:	2a00      	cmp	r2, #0
 8003d78:	db01      	blt.n	8003d7e <_svfiprintf_r+0xfa>
 8003d7a:	9207      	str	r2, [sp, #28]
 8003d7c:	e004      	b.n	8003d88 <_svfiprintf_r+0x104>
 8003d7e:	4252      	negs	r2, r2
 8003d80:	f043 0302 	orr.w	r3, r3, #2
 8003d84:	9207      	str	r2, [sp, #28]
 8003d86:	9304      	str	r3, [sp, #16]
 8003d88:	783b      	ldrb	r3, [r7, #0]
 8003d8a:	2b2e      	cmp	r3, #46	; 0x2e
 8003d8c:	d10c      	bne.n	8003da8 <_svfiprintf_r+0x124>
 8003d8e:	787b      	ldrb	r3, [r7, #1]
 8003d90:	2b2a      	cmp	r3, #42	; 0x2a
 8003d92:	d133      	bne.n	8003dfc <_svfiprintf_r+0x178>
 8003d94:	9b03      	ldr	r3, [sp, #12]
 8003d96:	3702      	adds	r7, #2
 8003d98:	1d1a      	adds	r2, r3, #4
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	9203      	str	r2, [sp, #12]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	bfb8      	it	lt
 8003da2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003da6:	9305      	str	r3, [sp, #20]
 8003da8:	4d2e      	ldr	r5, [pc, #184]	; (8003e64 <_svfiprintf_r+0x1e0>)
 8003daa:	2203      	movs	r2, #3
 8003dac:	7839      	ldrb	r1, [r7, #0]
 8003dae:	4628      	mov	r0, r5
 8003db0:	f000 f9e8 	bl	8004184 <memchr>
 8003db4:	b138      	cbz	r0, 8003dc6 <_svfiprintf_r+0x142>
 8003db6:	2340      	movs	r3, #64	; 0x40
 8003db8:	1b40      	subs	r0, r0, r5
 8003dba:	fa03 f000 	lsl.w	r0, r3, r0
 8003dbe:	9b04      	ldr	r3, [sp, #16]
 8003dc0:	3701      	adds	r7, #1
 8003dc2:	4303      	orrs	r3, r0
 8003dc4:	9304      	str	r3, [sp, #16]
 8003dc6:	7839      	ldrb	r1, [r7, #0]
 8003dc8:	2206      	movs	r2, #6
 8003dca:	4827      	ldr	r0, [pc, #156]	; (8003e68 <_svfiprintf_r+0x1e4>)
 8003dcc:	1c7e      	adds	r6, r7, #1
 8003dce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003dd2:	f000 f9d7 	bl	8004184 <memchr>
 8003dd6:	2800      	cmp	r0, #0
 8003dd8:	d038      	beq.n	8003e4c <_svfiprintf_r+0x1c8>
 8003dda:	4b24      	ldr	r3, [pc, #144]	; (8003e6c <_svfiprintf_r+0x1e8>)
 8003ddc:	bb13      	cbnz	r3, 8003e24 <_svfiprintf_r+0x1a0>
 8003dde:	9b03      	ldr	r3, [sp, #12]
 8003de0:	3307      	adds	r3, #7
 8003de2:	f023 0307 	bic.w	r3, r3, #7
 8003de6:	3308      	adds	r3, #8
 8003de8:	9303      	str	r3, [sp, #12]
 8003dea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003dec:	444b      	add	r3, r9
 8003dee:	9309      	str	r3, [sp, #36]	; 0x24
 8003df0:	e76d      	b.n	8003cce <_svfiprintf_r+0x4a>
 8003df2:	fb05 3202 	mla	r2, r5, r2, r3
 8003df6:	2001      	movs	r0, #1
 8003df8:	460f      	mov	r7, r1
 8003dfa:	e7a6      	b.n	8003d4a <_svfiprintf_r+0xc6>
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	250a      	movs	r5, #10
 8003e00:	4619      	mov	r1, r3
 8003e02:	3701      	adds	r7, #1
 8003e04:	9305      	str	r3, [sp, #20]
 8003e06:	4638      	mov	r0, r7
 8003e08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e0c:	3a30      	subs	r2, #48	; 0x30
 8003e0e:	2a09      	cmp	r2, #9
 8003e10:	d903      	bls.n	8003e1a <_svfiprintf_r+0x196>
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d0c8      	beq.n	8003da8 <_svfiprintf_r+0x124>
 8003e16:	9105      	str	r1, [sp, #20]
 8003e18:	e7c6      	b.n	8003da8 <_svfiprintf_r+0x124>
 8003e1a:	fb05 2101 	mla	r1, r5, r1, r2
 8003e1e:	2301      	movs	r3, #1
 8003e20:	4607      	mov	r7, r0
 8003e22:	e7f0      	b.n	8003e06 <_svfiprintf_r+0x182>
 8003e24:	ab03      	add	r3, sp, #12
 8003e26:	9300      	str	r3, [sp, #0]
 8003e28:	4622      	mov	r2, r4
 8003e2a:	4b11      	ldr	r3, [pc, #68]	; (8003e70 <_svfiprintf_r+0x1ec>)
 8003e2c:	a904      	add	r1, sp, #16
 8003e2e:	4640      	mov	r0, r8
 8003e30:	f3af 8000 	nop.w
 8003e34:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8003e38:	4681      	mov	r9, r0
 8003e3a:	d1d6      	bne.n	8003dea <_svfiprintf_r+0x166>
 8003e3c:	89a3      	ldrh	r3, [r4, #12]
 8003e3e:	065b      	lsls	r3, r3, #25
 8003e40:	f53f af35 	bmi.w	8003cae <_svfiprintf_r+0x2a>
 8003e44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003e46:	b01d      	add	sp, #116	; 0x74
 8003e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e4c:	ab03      	add	r3, sp, #12
 8003e4e:	9300      	str	r3, [sp, #0]
 8003e50:	4622      	mov	r2, r4
 8003e52:	4b07      	ldr	r3, [pc, #28]	; (8003e70 <_svfiprintf_r+0x1ec>)
 8003e54:	a904      	add	r1, sp, #16
 8003e56:	4640      	mov	r0, r8
 8003e58:	f000 f882 	bl	8003f60 <_printf_i>
 8003e5c:	e7ea      	b.n	8003e34 <_svfiprintf_r+0x1b0>
 8003e5e:	bf00      	nop
 8003e60:	0800441c 	.word	0x0800441c
 8003e64:	08004422 	.word	0x08004422
 8003e68:	08004426 	.word	0x08004426
 8003e6c:	00000000 	.word	0x00000000
 8003e70:	08003bd1 	.word	0x08003bd1

08003e74 <_printf_common>:
 8003e74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e78:	4691      	mov	r9, r2
 8003e7a:	461f      	mov	r7, r3
 8003e7c:	688a      	ldr	r2, [r1, #8]
 8003e7e:	690b      	ldr	r3, [r1, #16]
 8003e80:	4606      	mov	r6, r0
 8003e82:	4293      	cmp	r3, r2
 8003e84:	bfb8      	it	lt
 8003e86:	4613      	movlt	r3, r2
 8003e88:	f8c9 3000 	str.w	r3, [r9]
 8003e8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003e90:	460c      	mov	r4, r1
 8003e92:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003e96:	b112      	cbz	r2, 8003e9e <_printf_common+0x2a>
 8003e98:	3301      	adds	r3, #1
 8003e9a:	f8c9 3000 	str.w	r3, [r9]
 8003e9e:	6823      	ldr	r3, [r4, #0]
 8003ea0:	0699      	lsls	r1, r3, #26
 8003ea2:	bf42      	ittt	mi
 8003ea4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003ea8:	3302      	addmi	r3, #2
 8003eaa:	f8c9 3000 	strmi.w	r3, [r9]
 8003eae:	6825      	ldr	r5, [r4, #0]
 8003eb0:	f015 0506 	ands.w	r5, r5, #6
 8003eb4:	d107      	bne.n	8003ec6 <_printf_common+0x52>
 8003eb6:	f104 0a19 	add.w	sl, r4, #25
 8003eba:	68e3      	ldr	r3, [r4, #12]
 8003ebc:	f8d9 2000 	ldr.w	r2, [r9]
 8003ec0:	1a9b      	subs	r3, r3, r2
 8003ec2:	42ab      	cmp	r3, r5
 8003ec4:	dc29      	bgt.n	8003f1a <_printf_common+0xa6>
 8003ec6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003eca:	6822      	ldr	r2, [r4, #0]
 8003ecc:	3300      	adds	r3, #0
 8003ece:	bf18      	it	ne
 8003ed0:	2301      	movne	r3, #1
 8003ed2:	0692      	lsls	r2, r2, #26
 8003ed4:	d42e      	bmi.n	8003f34 <_printf_common+0xc0>
 8003ed6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003eda:	4639      	mov	r1, r7
 8003edc:	4630      	mov	r0, r6
 8003ede:	47c0      	blx	r8
 8003ee0:	3001      	adds	r0, #1
 8003ee2:	d021      	beq.n	8003f28 <_printf_common+0xb4>
 8003ee4:	6823      	ldr	r3, [r4, #0]
 8003ee6:	68e5      	ldr	r5, [r4, #12]
 8003ee8:	f003 0306 	and.w	r3, r3, #6
 8003eec:	2b04      	cmp	r3, #4
 8003eee:	bf18      	it	ne
 8003ef0:	2500      	movne	r5, #0
 8003ef2:	f8d9 2000 	ldr.w	r2, [r9]
 8003ef6:	f04f 0900 	mov.w	r9, #0
 8003efa:	bf08      	it	eq
 8003efc:	1aad      	subeq	r5, r5, r2
 8003efe:	68a3      	ldr	r3, [r4, #8]
 8003f00:	6922      	ldr	r2, [r4, #16]
 8003f02:	bf08      	it	eq
 8003f04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	bfc4      	itt	gt
 8003f0c:	1a9b      	subgt	r3, r3, r2
 8003f0e:	18ed      	addgt	r5, r5, r3
 8003f10:	341a      	adds	r4, #26
 8003f12:	454d      	cmp	r5, r9
 8003f14:	d11a      	bne.n	8003f4c <_printf_common+0xd8>
 8003f16:	2000      	movs	r0, #0
 8003f18:	e008      	b.n	8003f2c <_printf_common+0xb8>
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	4652      	mov	r2, sl
 8003f1e:	4639      	mov	r1, r7
 8003f20:	4630      	mov	r0, r6
 8003f22:	47c0      	blx	r8
 8003f24:	3001      	adds	r0, #1
 8003f26:	d103      	bne.n	8003f30 <_printf_common+0xbc>
 8003f28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f30:	3501      	adds	r5, #1
 8003f32:	e7c2      	b.n	8003eba <_printf_common+0x46>
 8003f34:	2030      	movs	r0, #48	; 0x30
 8003f36:	18e1      	adds	r1, r4, r3
 8003f38:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003f3c:	1c5a      	adds	r2, r3, #1
 8003f3e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003f42:	4422      	add	r2, r4
 8003f44:	3302      	adds	r3, #2
 8003f46:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003f4a:	e7c4      	b.n	8003ed6 <_printf_common+0x62>
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	4622      	mov	r2, r4
 8003f50:	4639      	mov	r1, r7
 8003f52:	4630      	mov	r0, r6
 8003f54:	47c0      	blx	r8
 8003f56:	3001      	adds	r0, #1
 8003f58:	d0e6      	beq.n	8003f28 <_printf_common+0xb4>
 8003f5a:	f109 0901 	add.w	r9, r9, #1
 8003f5e:	e7d8      	b.n	8003f12 <_printf_common+0x9e>

08003f60 <_printf_i>:
 8003f60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003f64:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003f68:	460c      	mov	r4, r1
 8003f6a:	7e09      	ldrb	r1, [r1, #24]
 8003f6c:	b085      	sub	sp, #20
 8003f6e:	296e      	cmp	r1, #110	; 0x6e
 8003f70:	4617      	mov	r7, r2
 8003f72:	4606      	mov	r6, r0
 8003f74:	4698      	mov	r8, r3
 8003f76:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003f78:	f000 80b3 	beq.w	80040e2 <_printf_i+0x182>
 8003f7c:	d822      	bhi.n	8003fc4 <_printf_i+0x64>
 8003f7e:	2963      	cmp	r1, #99	; 0x63
 8003f80:	d036      	beq.n	8003ff0 <_printf_i+0x90>
 8003f82:	d80a      	bhi.n	8003f9a <_printf_i+0x3a>
 8003f84:	2900      	cmp	r1, #0
 8003f86:	f000 80b9 	beq.w	80040fc <_printf_i+0x19c>
 8003f8a:	2958      	cmp	r1, #88	; 0x58
 8003f8c:	f000 8083 	beq.w	8004096 <_printf_i+0x136>
 8003f90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f94:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003f98:	e032      	b.n	8004000 <_printf_i+0xa0>
 8003f9a:	2964      	cmp	r1, #100	; 0x64
 8003f9c:	d001      	beq.n	8003fa2 <_printf_i+0x42>
 8003f9e:	2969      	cmp	r1, #105	; 0x69
 8003fa0:	d1f6      	bne.n	8003f90 <_printf_i+0x30>
 8003fa2:	6820      	ldr	r0, [r4, #0]
 8003fa4:	6813      	ldr	r3, [r2, #0]
 8003fa6:	0605      	lsls	r5, r0, #24
 8003fa8:	f103 0104 	add.w	r1, r3, #4
 8003fac:	d52a      	bpl.n	8004004 <_printf_i+0xa4>
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	6011      	str	r1, [r2, #0]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	da03      	bge.n	8003fbe <_printf_i+0x5e>
 8003fb6:	222d      	movs	r2, #45	; 0x2d
 8003fb8:	425b      	negs	r3, r3
 8003fba:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003fbe:	486f      	ldr	r0, [pc, #444]	; (800417c <_printf_i+0x21c>)
 8003fc0:	220a      	movs	r2, #10
 8003fc2:	e039      	b.n	8004038 <_printf_i+0xd8>
 8003fc4:	2973      	cmp	r1, #115	; 0x73
 8003fc6:	f000 809d 	beq.w	8004104 <_printf_i+0x1a4>
 8003fca:	d808      	bhi.n	8003fde <_printf_i+0x7e>
 8003fcc:	296f      	cmp	r1, #111	; 0x6f
 8003fce:	d020      	beq.n	8004012 <_printf_i+0xb2>
 8003fd0:	2970      	cmp	r1, #112	; 0x70
 8003fd2:	d1dd      	bne.n	8003f90 <_printf_i+0x30>
 8003fd4:	6823      	ldr	r3, [r4, #0]
 8003fd6:	f043 0320 	orr.w	r3, r3, #32
 8003fda:	6023      	str	r3, [r4, #0]
 8003fdc:	e003      	b.n	8003fe6 <_printf_i+0x86>
 8003fde:	2975      	cmp	r1, #117	; 0x75
 8003fe0:	d017      	beq.n	8004012 <_printf_i+0xb2>
 8003fe2:	2978      	cmp	r1, #120	; 0x78
 8003fe4:	d1d4      	bne.n	8003f90 <_printf_i+0x30>
 8003fe6:	2378      	movs	r3, #120	; 0x78
 8003fe8:	4865      	ldr	r0, [pc, #404]	; (8004180 <_printf_i+0x220>)
 8003fea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003fee:	e055      	b.n	800409c <_printf_i+0x13c>
 8003ff0:	6813      	ldr	r3, [r2, #0]
 8003ff2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ff6:	1d19      	adds	r1, r3, #4
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	6011      	str	r1, [r2, #0]
 8003ffc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004000:	2301      	movs	r3, #1
 8004002:	e08c      	b.n	800411e <_printf_i+0x1be>
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f010 0f40 	tst.w	r0, #64	; 0x40
 800400a:	6011      	str	r1, [r2, #0]
 800400c:	bf18      	it	ne
 800400e:	b21b      	sxthne	r3, r3
 8004010:	e7cf      	b.n	8003fb2 <_printf_i+0x52>
 8004012:	6813      	ldr	r3, [r2, #0]
 8004014:	6825      	ldr	r5, [r4, #0]
 8004016:	1d18      	adds	r0, r3, #4
 8004018:	6010      	str	r0, [r2, #0]
 800401a:	0628      	lsls	r0, r5, #24
 800401c:	d501      	bpl.n	8004022 <_printf_i+0xc2>
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	e002      	b.n	8004028 <_printf_i+0xc8>
 8004022:	0668      	lsls	r0, r5, #25
 8004024:	d5fb      	bpl.n	800401e <_printf_i+0xbe>
 8004026:	881b      	ldrh	r3, [r3, #0]
 8004028:	296f      	cmp	r1, #111	; 0x6f
 800402a:	bf14      	ite	ne
 800402c:	220a      	movne	r2, #10
 800402e:	2208      	moveq	r2, #8
 8004030:	4852      	ldr	r0, [pc, #328]	; (800417c <_printf_i+0x21c>)
 8004032:	2100      	movs	r1, #0
 8004034:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004038:	6865      	ldr	r5, [r4, #4]
 800403a:	2d00      	cmp	r5, #0
 800403c:	60a5      	str	r5, [r4, #8]
 800403e:	f2c0 8095 	blt.w	800416c <_printf_i+0x20c>
 8004042:	6821      	ldr	r1, [r4, #0]
 8004044:	f021 0104 	bic.w	r1, r1, #4
 8004048:	6021      	str	r1, [r4, #0]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d13d      	bne.n	80040ca <_printf_i+0x16a>
 800404e:	2d00      	cmp	r5, #0
 8004050:	f040 808e 	bne.w	8004170 <_printf_i+0x210>
 8004054:	4665      	mov	r5, ip
 8004056:	2a08      	cmp	r2, #8
 8004058:	d10b      	bne.n	8004072 <_printf_i+0x112>
 800405a:	6823      	ldr	r3, [r4, #0]
 800405c:	07db      	lsls	r3, r3, #31
 800405e:	d508      	bpl.n	8004072 <_printf_i+0x112>
 8004060:	6923      	ldr	r3, [r4, #16]
 8004062:	6862      	ldr	r2, [r4, #4]
 8004064:	429a      	cmp	r2, r3
 8004066:	bfde      	ittt	le
 8004068:	2330      	movle	r3, #48	; 0x30
 800406a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800406e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004072:	ebac 0305 	sub.w	r3, ip, r5
 8004076:	6123      	str	r3, [r4, #16]
 8004078:	f8cd 8000 	str.w	r8, [sp]
 800407c:	463b      	mov	r3, r7
 800407e:	aa03      	add	r2, sp, #12
 8004080:	4621      	mov	r1, r4
 8004082:	4630      	mov	r0, r6
 8004084:	f7ff fef6 	bl	8003e74 <_printf_common>
 8004088:	3001      	adds	r0, #1
 800408a:	d14d      	bne.n	8004128 <_printf_i+0x1c8>
 800408c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004090:	b005      	add	sp, #20
 8004092:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004096:	4839      	ldr	r0, [pc, #228]	; (800417c <_printf_i+0x21c>)
 8004098:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800409c:	6813      	ldr	r3, [r2, #0]
 800409e:	6821      	ldr	r1, [r4, #0]
 80040a0:	1d1d      	adds	r5, r3, #4
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	6015      	str	r5, [r2, #0]
 80040a6:	060a      	lsls	r2, r1, #24
 80040a8:	d50b      	bpl.n	80040c2 <_printf_i+0x162>
 80040aa:	07ca      	lsls	r2, r1, #31
 80040ac:	bf44      	itt	mi
 80040ae:	f041 0120 	orrmi.w	r1, r1, #32
 80040b2:	6021      	strmi	r1, [r4, #0]
 80040b4:	b91b      	cbnz	r3, 80040be <_printf_i+0x15e>
 80040b6:	6822      	ldr	r2, [r4, #0]
 80040b8:	f022 0220 	bic.w	r2, r2, #32
 80040bc:	6022      	str	r2, [r4, #0]
 80040be:	2210      	movs	r2, #16
 80040c0:	e7b7      	b.n	8004032 <_printf_i+0xd2>
 80040c2:	064d      	lsls	r5, r1, #25
 80040c4:	bf48      	it	mi
 80040c6:	b29b      	uxthmi	r3, r3
 80040c8:	e7ef      	b.n	80040aa <_printf_i+0x14a>
 80040ca:	4665      	mov	r5, ip
 80040cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80040d0:	fb02 3311 	mls	r3, r2, r1, r3
 80040d4:	5cc3      	ldrb	r3, [r0, r3]
 80040d6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80040da:	460b      	mov	r3, r1
 80040dc:	2900      	cmp	r1, #0
 80040de:	d1f5      	bne.n	80040cc <_printf_i+0x16c>
 80040e0:	e7b9      	b.n	8004056 <_printf_i+0xf6>
 80040e2:	6813      	ldr	r3, [r2, #0]
 80040e4:	6825      	ldr	r5, [r4, #0]
 80040e6:	1d18      	adds	r0, r3, #4
 80040e8:	6961      	ldr	r1, [r4, #20]
 80040ea:	6010      	str	r0, [r2, #0]
 80040ec:	0628      	lsls	r0, r5, #24
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	d501      	bpl.n	80040f6 <_printf_i+0x196>
 80040f2:	6019      	str	r1, [r3, #0]
 80040f4:	e002      	b.n	80040fc <_printf_i+0x19c>
 80040f6:	066a      	lsls	r2, r5, #25
 80040f8:	d5fb      	bpl.n	80040f2 <_printf_i+0x192>
 80040fa:	8019      	strh	r1, [r3, #0]
 80040fc:	2300      	movs	r3, #0
 80040fe:	4665      	mov	r5, ip
 8004100:	6123      	str	r3, [r4, #16]
 8004102:	e7b9      	b.n	8004078 <_printf_i+0x118>
 8004104:	6813      	ldr	r3, [r2, #0]
 8004106:	1d19      	adds	r1, r3, #4
 8004108:	6011      	str	r1, [r2, #0]
 800410a:	681d      	ldr	r5, [r3, #0]
 800410c:	6862      	ldr	r2, [r4, #4]
 800410e:	2100      	movs	r1, #0
 8004110:	4628      	mov	r0, r5
 8004112:	f000 f837 	bl	8004184 <memchr>
 8004116:	b108      	cbz	r0, 800411c <_printf_i+0x1bc>
 8004118:	1b40      	subs	r0, r0, r5
 800411a:	6060      	str	r0, [r4, #4]
 800411c:	6863      	ldr	r3, [r4, #4]
 800411e:	6123      	str	r3, [r4, #16]
 8004120:	2300      	movs	r3, #0
 8004122:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004126:	e7a7      	b.n	8004078 <_printf_i+0x118>
 8004128:	6923      	ldr	r3, [r4, #16]
 800412a:	462a      	mov	r2, r5
 800412c:	4639      	mov	r1, r7
 800412e:	4630      	mov	r0, r6
 8004130:	47c0      	blx	r8
 8004132:	3001      	adds	r0, #1
 8004134:	d0aa      	beq.n	800408c <_printf_i+0x12c>
 8004136:	6823      	ldr	r3, [r4, #0]
 8004138:	079b      	lsls	r3, r3, #30
 800413a:	d413      	bmi.n	8004164 <_printf_i+0x204>
 800413c:	68e0      	ldr	r0, [r4, #12]
 800413e:	9b03      	ldr	r3, [sp, #12]
 8004140:	4298      	cmp	r0, r3
 8004142:	bfb8      	it	lt
 8004144:	4618      	movlt	r0, r3
 8004146:	e7a3      	b.n	8004090 <_printf_i+0x130>
 8004148:	2301      	movs	r3, #1
 800414a:	464a      	mov	r2, r9
 800414c:	4639      	mov	r1, r7
 800414e:	4630      	mov	r0, r6
 8004150:	47c0      	blx	r8
 8004152:	3001      	adds	r0, #1
 8004154:	d09a      	beq.n	800408c <_printf_i+0x12c>
 8004156:	3501      	adds	r5, #1
 8004158:	68e3      	ldr	r3, [r4, #12]
 800415a:	9a03      	ldr	r2, [sp, #12]
 800415c:	1a9b      	subs	r3, r3, r2
 800415e:	42ab      	cmp	r3, r5
 8004160:	dcf2      	bgt.n	8004148 <_printf_i+0x1e8>
 8004162:	e7eb      	b.n	800413c <_printf_i+0x1dc>
 8004164:	2500      	movs	r5, #0
 8004166:	f104 0919 	add.w	r9, r4, #25
 800416a:	e7f5      	b.n	8004158 <_printf_i+0x1f8>
 800416c:	2b00      	cmp	r3, #0
 800416e:	d1ac      	bne.n	80040ca <_printf_i+0x16a>
 8004170:	7803      	ldrb	r3, [r0, #0]
 8004172:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004176:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800417a:	e76c      	b.n	8004056 <_printf_i+0xf6>
 800417c:	0800442d 	.word	0x0800442d
 8004180:	0800443e 	.word	0x0800443e

08004184 <memchr>:
 8004184:	b510      	push	{r4, lr}
 8004186:	b2c9      	uxtb	r1, r1
 8004188:	4402      	add	r2, r0
 800418a:	4290      	cmp	r0, r2
 800418c:	4603      	mov	r3, r0
 800418e:	d101      	bne.n	8004194 <memchr+0x10>
 8004190:	2300      	movs	r3, #0
 8004192:	e003      	b.n	800419c <memchr+0x18>
 8004194:	781c      	ldrb	r4, [r3, #0]
 8004196:	3001      	adds	r0, #1
 8004198:	428c      	cmp	r4, r1
 800419a:	d1f6      	bne.n	800418a <memchr+0x6>
 800419c:	4618      	mov	r0, r3
 800419e:	bd10      	pop	{r4, pc}

080041a0 <memcpy>:
 80041a0:	b510      	push	{r4, lr}
 80041a2:	1e43      	subs	r3, r0, #1
 80041a4:	440a      	add	r2, r1
 80041a6:	4291      	cmp	r1, r2
 80041a8:	d100      	bne.n	80041ac <memcpy+0xc>
 80041aa:	bd10      	pop	{r4, pc}
 80041ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80041b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80041b4:	e7f7      	b.n	80041a6 <memcpy+0x6>

080041b6 <memmove>:
 80041b6:	4288      	cmp	r0, r1
 80041b8:	b510      	push	{r4, lr}
 80041ba:	eb01 0302 	add.w	r3, r1, r2
 80041be:	d807      	bhi.n	80041d0 <memmove+0x1a>
 80041c0:	1e42      	subs	r2, r0, #1
 80041c2:	4299      	cmp	r1, r3
 80041c4:	d00a      	beq.n	80041dc <memmove+0x26>
 80041c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80041ca:	f802 4f01 	strb.w	r4, [r2, #1]!
 80041ce:	e7f8      	b.n	80041c2 <memmove+0xc>
 80041d0:	4283      	cmp	r3, r0
 80041d2:	d9f5      	bls.n	80041c0 <memmove+0xa>
 80041d4:	1881      	adds	r1, r0, r2
 80041d6:	1ad2      	subs	r2, r2, r3
 80041d8:	42d3      	cmn	r3, r2
 80041da:	d100      	bne.n	80041de <memmove+0x28>
 80041dc:	bd10      	pop	{r4, pc}
 80041de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80041e2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80041e6:	e7f7      	b.n	80041d8 <memmove+0x22>

080041e8 <_free_r>:
 80041e8:	b538      	push	{r3, r4, r5, lr}
 80041ea:	4605      	mov	r5, r0
 80041ec:	2900      	cmp	r1, #0
 80041ee:	d043      	beq.n	8004278 <_free_r+0x90>
 80041f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041f4:	1f0c      	subs	r4, r1, #4
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	bfb8      	it	lt
 80041fa:	18e4      	addlt	r4, r4, r3
 80041fc:	f000 f8d0 	bl	80043a0 <__malloc_lock>
 8004200:	4a1e      	ldr	r2, [pc, #120]	; (800427c <_free_r+0x94>)
 8004202:	6813      	ldr	r3, [r2, #0]
 8004204:	4610      	mov	r0, r2
 8004206:	b933      	cbnz	r3, 8004216 <_free_r+0x2e>
 8004208:	6063      	str	r3, [r4, #4]
 800420a:	6014      	str	r4, [r2, #0]
 800420c:	4628      	mov	r0, r5
 800420e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004212:	f000 b8c6 	b.w	80043a2 <__malloc_unlock>
 8004216:	42a3      	cmp	r3, r4
 8004218:	d90b      	bls.n	8004232 <_free_r+0x4a>
 800421a:	6821      	ldr	r1, [r4, #0]
 800421c:	1862      	adds	r2, r4, r1
 800421e:	4293      	cmp	r3, r2
 8004220:	bf01      	itttt	eq
 8004222:	681a      	ldreq	r2, [r3, #0]
 8004224:	685b      	ldreq	r3, [r3, #4]
 8004226:	1852      	addeq	r2, r2, r1
 8004228:	6022      	streq	r2, [r4, #0]
 800422a:	6063      	str	r3, [r4, #4]
 800422c:	6004      	str	r4, [r0, #0]
 800422e:	e7ed      	b.n	800420c <_free_r+0x24>
 8004230:	4613      	mov	r3, r2
 8004232:	685a      	ldr	r2, [r3, #4]
 8004234:	b10a      	cbz	r2, 800423a <_free_r+0x52>
 8004236:	42a2      	cmp	r2, r4
 8004238:	d9fa      	bls.n	8004230 <_free_r+0x48>
 800423a:	6819      	ldr	r1, [r3, #0]
 800423c:	1858      	adds	r0, r3, r1
 800423e:	42a0      	cmp	r0, r4
 8004240:	d10b      	bne.n	800425a <_free_r+0x72>
 8004242:	6820      	ldr	r0, [r4, #0]
 8004244:	4401      	add	r1, r0
 8004246:	1858      	adds	r0, r3, r1
 8004248:	4282      	cmp	r2, r0
 800424a:	6019      	str	r1, [r3, #0]
 800424c:	d1de      	bne.n	800420c <_free_r+0x24>
 800424e:	6810      	ldr	r0, [r2, #0]
 8004250:	6852      	ldr	r2, [r2, #4]
 8004252:	4401      	add	r1, r0
 8004254:	6019      	str	r1, [r3, #0]
 8004256:	605a      	str	r2, [r3, #4]
 8004258:	e7d8      	b.n	800420c <_free_r+0x24>
 800425a:	d902      	bls.n	8004262 <_free_r+0x7a>
 800425c:	230c      	movs	r3, #12
 800425e:	602b      	str	r3, [r5, #0]
 8004260:	e7d4      	b.n	800420c <_free_r+0x24>
 8004262:	6820      	ldr	r0, [r4, #0]
 8004264:	1821      	adds	r1, r4, r0
 8004266:	428a      	cmp	r2, r1
 8004268:	bf01      	itttt	eq
 800426a:	6811      	ldreq	r1, [r2, #0]
 800426c:	6852      	ldreq	r2, [r2, #4]
 800426e:	1809      	addeq	r1, r1, r0
 8004270:	6021      	streq	r1, [r4, #0]
 8004272:	6062      	str	r2, [r4, #4]
 8004274:	605c      	str	r4, [r3, #4]
 8004276:	e7c9      	b.n	800420c <_free_r+0x24>
 8004278:	bd38      	pop	{r3, r4, r5, pc}
 800427a:	bf00      	nop
 800427c:	20000090 	.word	0x20000090

08004280 <_malloc_r>:
 8004280:	b570      	push	{r4, r5, r6, lr}
 8004282:	1ccd      	adds	r5, r1, #3
 8004284:	f025 0503 	bic.w	r5, r5, #3
 8004288:	3508      	adds	r5, #8
 800428a:	2d0c      	cmp	r5, #12
 800428c:	bf38      	it	cc
 800428e:	250c      	movcc	r5, #12
 8004290:	2d00      	cmp	r5, #0
 8004292:	4606      	mov	r6, r0
 8004294:	db01      	blt.n	800429a <_malloc_r+0x1a>
 8004296:	42a9      	cmp	r1, r5
 8004298:	d903      	bls.n	80042a2 <_malloc_r+0x22>
 800429a:	230c      	movs	r3, #12
 800429c:	6033      	str	r3, [r6, #0]
 800429e:	2000      	movs	r0, #0
 80042a0:	bd70      	pop	{r4, r5, r6, pc}
 80042a2:	f000 f87d 	bl	80043a0 <__malloc_lock>
 80042a6:	4a21      	ldr	r2, [pc, #132]	; (800432c <_malloc_r+0xac>)
 80042a8:	6814      	ldr	r4, [r2, #0]
 80042aa:	4621      	mov	r1, r4
 80042ac:	b991      	cbnz	r1, 80042d4 <_malloc_r+0x54>
 80042ae:	4c20      	ldr	r4, [pc, #128]	; (8004330 <_malloc_r+0xb0>)
 80042b0:	6823      	ldr	r3, [r4, #0]
 80042b2:	b91b      	cbnz	r3, 80042bc <_malloc_r+0x3c>
 80042b4:	4630      	mov	r0, r6
 80042b6:	f000 f863 	bl	8004380 <_sbrk_r>
 80042ba:	6020      	str	r0, [r4, #0]
 80042bc:	4629      	mov	r1, r5
 80042be:	4630      	mov	r0, r6
 80042c0:	f000 f85e 	bl	8004380 <_sbrk_r>
 80042c4:	1c43      	adds	r3, r0, #1
 80042c6:	d124      	bne.n	8004312 <_malloc_r+0x92>
 80042c8:	230c      	movs	r3, #12
 80042ca:	4630      	mov	r0, r6
 80042cc:	6033      	str	r3, [r6, #0]
 80042ce:	f000 f868 	bl	80043a2 <__malloc_unlock>
 80042d2:	e7e4      	b.n	800429e <_malloc_r+0x1e>
 80042d4:	680b      	ldr	r3, [r1, #0]
 80042d6:	1b5b      	subs	r3, r3, r5
 80042d8:	d418      	bmi.n	800430c <_malloc_r+0x8c>
 80042da:	2b0b      	cmp	r3, #11
 80042dc:	d90f      	bls.n	80042fe <_malloc_r+0x7e>
 80042de:	600b      	str	r3, [r1, #0]
 80042e0:	18cc      	adds	r4, r1, r3
 80042e2:	50cd      	str	r5, [r1, r3]
 80042e4:	4630      	mov	r0, r6
 80042e6:	f000 f85c 	bl	80043a2 <__malloc_unlock>
 80042ea:	f104 000b 	add.w	r0, r4, #11
 80042ee:	1d23      	adds	r3, r4, #4
 80042f0:	f020 0007 	bic.w	r0, r0, #7
 80042f4:	1ac3      	subs	r3, r0, r3
 80042f6:	d0d3      	beq.n	80042a0 <_malloc_r+0x20>
 80042f8:	425a      	negs	r2, r3
 80042fa:	50e2      	str	r2, [r4, r3]
 80042fc:	e7d0      	b.n	80042a0 <_malloc_r+0x20>
 80042fe:	684b      	ldr	r3, [r1, #4]
 8004300:	428c      	cmp	r4, r1
 8004302:	bf16      	itet	ne
 8004304:	6063      	strne	r3, [r4, #4]
 8004306:	6013      	streq	r3, [r2, #0]
 8004308:	460c      	movne	r4, r1
 800430a:	e7eb      	b.n	80042e4 <_malloc_r+0x64>
 800430c:	460c      	mov	r4, r1
 800430e:	6849      	ldr	r1, [r1, #4]
 8004310:	e7cc      	b.n	80042ac <_malloc_r+0x2c>
 8004312:	1cc4      	adds	r4, r0, #3
 8004314:	f024 0403 	bic.w	r4, r4, #3
 8004318:	42a0      	cmp	r0, r4
 800431a:	d005      	beq.n	8004328 <_malloc_r+0xa8>
 800431c:	1a21      	subs	r1, r4, r0
 800431e:	4630      	mov	r0, r6
 8004320:	f000 f82e 	bl	8004380 <_sbrk_r>
 8004324:	3001      	adds	r0, #1
 8004326:	d0cf      	beq.n	80042c8 <_malloc_r+0x48>
 8004328:	6025      	str	r5, [r4, #0]
 800432a:	e7db      	b.n	80042e4 <_malloc_r+0x64>
 800432c:	20000090 	.word	0x20000090
 8004330:	20000094 	.word	0x20000094

08004334 <_realloc_r>:
 8004334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004336:	4607      	mov	r7, r0
 8004338:	4614      	mov	r4, r2
 800433a:	460e      	mov	r6, r1
 800433c:	b921      	cbnz	r1, 8004348 <_realloc_r+0x14>
 800433e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004342:	4611      	mov	r1, r2
 8004344:	f7ff bf9c 	b.w	8004280 <_malloc_r>
 8004348:	b922      	cbnz	r2, 8004354 <_realloc_r+0x20>
 800434a:	f7ff ff4d 	bl	80041e8 <_free_r>
 800434e:	4625      	mov	r5, r4
 8004350:	4628      	mov	r0, r5
 8004352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004354:	f000 f826 	bl	80043a4 <_malloc_usable_size_r>
 8004358:	42a0      	cmp	r0, r4
 800435a:	d20f      	bcs.n	800437c <_realloc_r+0x48>
 800435c:	4621      	mov	r1, r4
 800435e:	4638      	mov	r0, r7
 8004360:	f7ff ff8e 	bl	8004280 <_malloc_r>
 8004364:	4605      	mov	r5, r0
 8004366:	2800      	cmp	r0, #0
 8004368:	d0f2      	beq.n	8004350 <_realloc_r+0x1c>
 800436a:	4631      	mov	r1, r6
 800436c:	4622      	mov	r2, r4
 800436e:	f7ff ff17 	bl	80041a0 <memcpy>
 8004372:	4631      	mov	r1, r6
 8004374:	4638      	mov	r0, r7
 8004376:	f7ff ff37 	bl	80041e8 <_free_r>
 800437a:	e7e9      	b.n	8004350 <_realloc_r+0x1c>
 800437c:	4635      	mov	r5, r6
 800437e:	e7e7      	b.n	8004350 <_realloc_r+0x1c>

08004380 <_sbrk_r>:
 8004380:	b538      	push	{r3, r4, r5, lr}
 8004382:	2300      	movs	r3, #0
 8004384:	4c05      	ldr	r4, [pc, #20]	; (800439c <_sbrk_r+0x1c>)
 8004386:	4605      	mov	r5, r0
 8004388:	4608      	mov	r0, r1
 800438a:	6023      	str	r3, [r4, #0]
 800438c:	f7fc fbd4 	bl	8000b38 <_sbrk>
 8004390:	1c43      	adds	r3, r0, #1
 8004392:	d102      	bne.n	800439a <_sbrk_r+0x1a>
 8004394:	6823      	ldr	r3, [r4, #0]
 8004396:	b103      	cbz	r3, 800439a <_sbrk_r+0x1a>
 8004398:	602b      	str	r3, [r5, #0]
 800439a:	bd38      	pop	{r3, r4, r5, pc}
 800439c:	20000364 	.word	0x20000364

080043a0 <__malloc_lock>:
 80043a0:	4770      	bx	lr

080043a2 <__malloc_unlock>:
 80043a2:	4770      	bx	lr

080043a4 <_malloc_usable_size_r>:
 80043a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043a8:	1f18      	subs	r0, r3, #4
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	bfbc      	itt	lt
 80043ae:	580b      	ldrlt	r3, [r1, r0]
 80043b0:	18c0      	addlt	r0, r0, r3
 80043b2:	4770      	bx	lr

080043b4 <_init>:
 80043b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043b6:	bf00      	nop
 80043b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043ba:	bc08      	pop	{r3}
 80043bc:	469e      	mov	lr, r3
 80043be:	4770      	bx	lr

080043c0 <_fini>:
 80043c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043c2:	bf00      	nop
 80043c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043c6:	bc08      	pop	{r3}
 80043c8:	469e      	mov	lr, r3
 80043ca:	4770      	bx	lr
