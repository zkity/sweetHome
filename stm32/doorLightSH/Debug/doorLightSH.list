
doorLightSH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e0c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08002f18  08002f18  00012f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f84  08002f84  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08002f84  08002f84  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f84  08002f84  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f84  08002f84  00012f84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f88  08002f88  00012f88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08002f8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d8  20000074  08003000  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000024c  08003000  0002024c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007166  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001866  00000000  00000000  00027203  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006e8  00000000  00000000  00028a70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000600  00000000  00000000  00029158  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00013e36  00000000  00000000  00029758  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006c64  00000000  00000000  0003d58e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006ab31  00000000  00000000  000441f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000aed23  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001cc0  00000000  00000000  000aeda0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08002f00 	.word	0x08002f00

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08002f00 	.word	0x08002f00

0800014c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000152:	4b18      	ldr	r3, [pc, #96]	; (80001b4 <MX_DMA_Init+0x68>)
 8000154:	695b      	ldr	r3, [r3, #20]
 8000156:	4a17      	ldr	r2, [pc, #92]	; (80001b4 <MX_DMA_Init+0x68>)
 8000158:	f043 0301 	orr.w	r3, r3, #1
 800015c:	6153      	str	r3, [r2, #20]
 800015e:	4b15      	ldr	r3, [pc, #84]	; (80001b4 <MX_DMA_Init+0x68>)
 8000160:	695b      	ldr	r3, [r3, #20]
 8000162:	f003 0301 	and.w	r3, r3, #1
 8000166:	607b      	str	r3, [r7, #4]
 8000168:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 1, 0);
 800016a:	2200      	movs	r2, #0
 800016c:	2101      	movs	r1, #1
 800016e:	200e      	movs	r0, #14
 8000170:	f000 fd2d 	bl	8000bce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000174:	200e      	movs	r0, #14
 8000176:	f000 fd46 	bl	8000c06 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 1, 0);
 800017a:	2200      	movs	r2, #0
 800017c:	2101      	movs	r1, #1
 800017e:	200f      	movs	r0, #15
 8000180:	f000 fd25 	bl	8000bce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000184:	200f      	movs	r0, #15
 8000186:	f000 fd3e 	bl	8000c06 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 2, 0);
 800018a:	2200      	movs	r2, #0
 800018c:	2102      	movs	r1, #2
 800018e:	2010      	movs	r0, #16
 8000190:	f000 fd1d 	bl	8000bce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000194:	2010      	movs	r0, #16
 8000196:	f000 fd36 	bl	8000c06 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 2, 0);
 800019a:	2200      	movs	r2, #0
 800019c:	2102      	movs	r1, #2
 800019e:	2011      	movs	r0, #17
 80001a0:	f000 fd15 	bl	8000bce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80001a4:	2011      	movs	r0, #17
 80001a6:	f000 fd2e 	bl	8000c06 <HAL_NVIC_EnableIRQ>

}
 80001aa:	bf00      	nop
 80001ac:	3708      	adds	r7, #8
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bd80      	pop	{r7, pc}
 80001b2:	bf00      	nop
 80001b4:	40021000 	.word	0x40021000

080001b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	b088      	sub	sp, #32
 80001bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001be:	f107 0310 	add.w	r3, r7, #16
 80001c2:	2200      	movs	r2, #0
 80001c4:	601a      	str	r2, [r3, #0]
 80001c6:	605a      	str	r2, [r3, #4]
 80001c8:	609a      	str	r2, [r3, #8]
 80001ca:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80001cc:	4b1d      	ldr	r3, [pc, #116]	; (8000244 <MX_GPIO_Init+0x8c>)
 80001ce:	699b      	ldr	r3, [r3, #24]
 80001d0:	4a1c      	ldr	r2, [pc, #112]	; (8000244 <MX_GPIO_Init+0x8c>)
 80001d2:	f043 0320 	orr.w	r3, r3, #32
 80001d6:	6193      	str	r3, [r2, #24]
 80001d8:	4b1a      	ldr	r3, [pc, #104]	; (8000244 <MX_GPIO_Init+0x8c>)
 80001da:	699b      	ldr	r3, [r3, #24]
 80001dc:	f003 0320 	and.w	r3, r3, #32
 80001e0:	60fb      	str	r3, [r7, #12]
 80001e2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001e4:	4b17      	ldr	r3, [pc, #92]	; (8000244 <MX_GPIO_Init+0x8c>)
 80001e6:	699b      	ldr	r3, [r3, #24]
 80001e8:	4a16      	ldr	r2, [pc, #88]	; (8000244 <MX_GPIO_Init+0x8c>)
 80001ea:	f043 0304 	orr.w	r3, r3, #4
 80001ee:	6193      	str	r3, [r2, #24]
 80001f0:	4b14      	ldr	r3, [pc, #80]	; (8000244 <MX_GPIO_Init+0x8c>)
 80001f2:	699b      	ldr	r3, [r3, #24]
 80001f4:	f003 0304 	and.w	r3, r3, #4
 80001f8:	60bb      	str	r3, [r7, #8]
 80001fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001fc:	4b11      	ldr	r3, [pc, #68]	; (8000244 <MX_GPIO_Init+0x8c>)
 80001fe:	699b      	ldr	r3, [r3, #24]
 8000200:	4a10      	ldr	r2, [pc, #64]	; (8000244 <MX_GPIO_Init+0x8c>)
 8000202:	f043 0308 	orr.w	r3, r3, #8
 8000206:	6193      	str	r3, [r2, #24]
 8000208:	4b0e      	ldr	r3, [pc, #56]	; (8000244 <MX_GPIO_Init+0x8c>)
 800020a:	699b      	ldr	r3, [r3, #24]
 800020c:	f003 0308 	and.w	r3, r3, #8
 8000210:	607b      	str	r3, [r7, #4]
 8000212:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_SET);
 8000214:	2201      	movs	r2, #1
 8000216:	2118      	movs	r1, #24
 8000218:	480b      	ldr	r0, [pc, #44]	; (8000248 <MX_GPIO_Init+0x90>)
 800021a:	f001 f8cd 	bl	80013b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800021e:	2318      	movs	r3, #24
 8000220:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000222:	2301      	movs	r3, #1
 8000224:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000226:	2300      	movs	r3, #0
 8000228:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800022a:	2302      	movs	r3, #2
 800022c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800022e:	f107 0310 	add.w	r3, r7, #16
 8000232:	4619      	mov	r1, r3
 8000234:	4804      	ldr	r0, [pc, #16]	; (8000248 <MX_GPIO_Init+0x90>)
 8000236:	f000 ff65 	bl	8001104 <HAL_GPIO_Init>

}
 800023a:	bf00      	nop
 800023c:	3720      	adds	r7, #32
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
 8000242:	bf00      	nop
 8000244:	40021000 	.word	0x40021000
 8000248:	40010c00 	.word	0x40010c00

0800024c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000250:	f000 fb62 	bl	8000918 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000254:	f000 f824 	bl	80002a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000258:	f7ff ffae 	bl	80001b8 <MX_GPIO_Init>
  MX_DMA_Init();
 800025c:	f7ff ff76 	bl	800014c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000260:	f000 f9a2 	bl	80005a8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000264:	f000 f9ca 	bl	80005fc <MX_USART2_UART_Init>
  uartSendIT("it");
  HAL_Delay(100);
  uartSendDMA("dm");
  */
  // uartSendDMA("1ok");
  logSendDMA("2ok");
 8000268:	4b08      	ldr	r3, [pc, #32]	; (800028c <main+0x40>)
 800026a:	4a09      	ldr	r2, [pc, #36]	; (8000290 <main+0x44>)
 800026c:	6810      	ldr	r0, [r2, #0]
 800026e:	6018      	str	r0, [r3, #0]
 8000270:	2303      	movs	r3, #3
 8000272:	b29b      	uxth	r3, r3
 8000274:	461a      	mov	r2, r3
 8000276:	4905      	ldr	r1, [pc, #20]	; (800028c <main+0x40>)
 8000278:	4806      	ldr	r0, [pc, #24]	; (8000294 <main+0x48>)
 800027a:	f001 fd1f 	bl	8001cbc <HAL_UART_Transmit_DMA>
  // 串口1接收数据
  HAL_UART_Receive_DMA(&huart1,\
 800027e:	2203      	movs	r2, #3
 8000280:	4905      	ldr	r1, [pc, #20]	; (8000298 <main+0x4c>)
 8000282:	4806      	ldr	r0, [pc, #24]	; (800029c <main+0x50>)
 8000284:	f001 fd86 	bl	8001d94 <HAL_UART_Receive_DMA>
 
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000288:	e7fe      	b.n	8000288 <main+0x3c>
 800028a:	bf00      	nop
 800028c:	200000ac 	.word	0x200000ac
 8000290:	08002f18 	.word	0x08002f18
 8000294:	20000204 	.word	0x20000204
 8000298:	200000a4 	.word	0x200000a4
 800029c:	200001c4 	.word	0x200001c4

080002a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b090      	sub	sp, #64	; 0x40
 80002a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002a6:	f107 0318 	add.w	r3, r7, #24
 80002aa:	2228      	movs	r2, #40	; 0x28
 80002ac:	2100      	movs	r1, #0
 80002ae:	4618      	mov	r0, r3
 80002b0:	f002 fa0c 	bl	80026cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002b4:	1d3b      	adds	r3, r7, #4
 80002b6:	2200      	movs	r2, #0
 80002b8:	601a      	str	r2, [r3, #0]
 80002ba:	605a      	str	r2, [r3, #4]
 80002bc:	609a      	str	r2, [r3, #8]
 80002be:	60da      	str	r2, [r3, #12]
 80002c0:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002c2:	2302      	movs	r3, #2
 80002c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002c6:	2301      	movs	r3, #1
 80002c8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ca:	2310      	movs	r3, #16
 80002cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002ce:	2300      	movs	r3, #0
 80002d0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d2:	f107 0318 	add.w	r3, r7, #24
 80002d6:	4618      	mov	r0, r3
 80002d8:	f001 f886 	bl	80013e8 <HAL_RCC_OscConfig>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d001      	beq.n	80002e6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80002e2:	f000 f863 	bl	80003ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002e6:	230f      	movs	r3, #15
 80002e8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002ea:	2300      	movs	r3, #0
 80002ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ee:	2300      	movs	r3, #0
 80002f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002f2:	2300      	movs	r3, #0
 80002f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002f6:	2300      	movs	r3, #0
 80002f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002fa:	1d3b      	adds	r3, r7, #4
 80002fc:	2100      	movs	r1, #0
 80002fe:	4618      	mov	r0, r3
 8000300:	f001 faf2 	bl	80018e8 <HAL_RCC_ClockConfig>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d001      	beq.n	800030e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800030a:	f000 f84f 	bl	80003ac <Error_Handler>
  }
}
 800030e:	bf00      	nop
 8000310:	3740      	adds	r7, #64	; 0x40
 8000312:	46bd      	mov	sp, r7
 8000314:	bd80      	pop	{r7, pc}
	...

08000318 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
// 串口1收到数据的回调函数
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000318:	b580      	push	{r7, lr}
 800031a:	b084      	sub	sp, #16
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1){
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	4a19      	ldr	r2, [pc, #100]	; (800038c <HAL_UART_RxCpltCallback+0x74>)
 8000326:	4293      	cmp	r3, r2
 8000328:	d12b      	bne.n	8000382 <HAL_UART_RxCpltCallback+0x6a>
		char rec[5];
		rec[0] = 'r';
 800032a:	2372      	movs	r3, #114	; 0x72
 800032c:	723b      	strb	r3, [r7, #8]
		rec[1] = addr;
 800032e:	4b18      	ldr	r3, [pc, #96]	; (8000390 <HAL_UART_RxCpltCallback+0x78>)
 8000330:	781b      	ldrb	r3, [r3, #0]
 8000332:	727b      	strb	r3, [r7, #9]
		rec[2] = r_buf[0];
 8000334:	4b17      	ldr	r3, [pc, #92]	; (8000394 <HAL_UART_RxCpltCallback+0x7c>)
 8000336:	781b      	ldrb	r3, [r3, #0]
 8000338:	72bb      	strb	r3, [r7, #10]
		rec[3] = r_buf[1];
 800033a:	4b16      	ldr	r3, [pc, #88]	; (8000394 <HAL_UART_RxCpltCallback+0x7c>)
 800033c:	785b      	ldrb	r3, [r3, #1]
 800033e:	72fb      	strb	r3, [r7, #11]
		rec[4] = r_buf[2];
 8000340:	4b14      	ldr	r3, [pc, #80]	; (8000394 <HAL_UART_RxCpltCallback+0x7c>)
 8000342:	789b      	ldrb	r3, [r3, #2]
 8000344:	733b      	strb	r3, [r7, #12]
		logSendDMA("rd: %s\n", rec);
 8000346:	f107 0308 	add.w	r3, r7, #8
 800034a:	461a      	mov	r2, r3
 800034c:	4912      	ldr	r1, [pc, #72]	; (8000398 <HAL_UART_RxCpltCallback+0x80>)
 800034e:	4813      	ldr	r0, [pc, #76]	; (800039c <HAL_UART_RxCpltCallback+0x84>)
 8000350:	f002 f9c4 	bl	80026dc <siprintf>
 8000354:	4603      	mov	r3, r0
 8000356:	b29b      	uxth	r3, r3
 8000358:	461a      	mov	r2, r3
 800035a:	4910      	ldr	r1, [pc, #64]	; (800039c <HAL_UART_RxCpltCallback+0x84>)
 800035c:	4810      	ldr	r0, [pc, #64]	; (80003a0 <HAL_UART_RxCpltCallback+0x88>)
 800035e:	f001 fcad 	bl	8001cbc <HAL_UART_Transmit_DMA>
		HAL_Delay(100);
 8000362:	2064      	movs	r0, #100	; 0x64
 8000364:	f000 fb3a 	bl	80009dc <HAL_Delay>
		uartSendDMA(rec);
 8000368:	f107 0308 	add.w	r3, r7, #8
 800036c:	4619      	mov	r1, r3
 800036e:	480d      	ldr	r0, [pc, #52]	; (80003a4 <HAL_UART_RxCpltCallback+0x8c>)
 8000370:	f002 f9b4 	bl	80026dc <siprintf>
 8000374:	4603      	mov	r3, r0
 8000376:	b29b      	uxth	r3, r3
 8000378:	461a      	mov	r2, r3
 800037a:	490a      	ldr	r1, [pc, #40]	; (80003a4 <HAL_UART_RxCpltCallback+0x8c>)
 800037c:	480a      	ldr	r0, [pc, #40]	; (80003a8 <HAL_UART_RxCpltCallback+0x90>)
 800037e:	f001 fc9d 	bl	8001cbc <HAL_UART_Transmit_DMA>
	}
}
 8000382:	bf00      	nop
 8000384:	3710      	adds	r7, #16
 8000386:	46bd      	mov	sp, r7
 8000388:	bd80      	pop	{r7, pc}
 800038a:	bf00      	nop
 800038c:	40013800 	.word	0x40013800
 8000390:	20000000 	.word	0x20000000
 8000394:	200000a4 	.word	0x200000a4
 8000398:	08002f1c 	.word	0x08002f1c
 800039c:	200000ac 	.word	0x200000ac
 80003a0:	20000204 	.word	0x20000204
 80003a4:	2000009c 	.word	0x2000009c
 80003a8:	200001c4 	.word	0x200001c4

080003ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003ac:	b480      	push	{r7}
 80003ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80003b0:	bf00      	nop
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bc80      	pop	{r7}
 80003b6:	4770      	bx	lr

080003b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003b8:	b480      	push	{r7}
 80003ba:	b085      	sub	sp, #20
 80003bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003be:	4b15      	ldr	r3, [pc, #84]	; (8000414 <HAL_MspInit+0x5c>)
 80003c0:	699b      	ldr	r3, [r3, #24]
 80003c2:	4a14      	ldr	r2, [pc, #80]	; (8000414 <HAL_MspInit+0x5c>)
 80003c4:	f043 0301 	orr.w	r3, r3, #1
 80003c8:	6193      	str	r3, [r2, #24]
 80003ca:	4b12      	ldr	r3, [pc, #72]	; (8000414 <HAL_MspInit+0x5c>)
 80003cc:	699b      	ldr	r3, [r3, #24]
 80003ce:	f003 0301 	and.w	r3, r3, #1
 80003d2:	60bb      	str	r3, [r7, #8]
 80003d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003d6:	4b0f      	ldr	r3, [pc, #60]	; (8000414 <HAL_MspInit+0x5c>)
 80003d8:	69db      	ldr	r3, [r3, #28]
 80003da:	4a0e      	ldr	r2, [pc, #56]	; (8000414 <HAL_MspInit+0x5c>)
 80003dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003e0:	61d3      	str	r3, [r2, #28]
 80003e2:	4b0c      	ldr	r3, [pc, #48]	; (8000414 <HAL_MspInit+0x5c>)
 80003e4:	69db      	ldr	r3, [r3, #28]
 80003e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003ea:	607b      	str	r3, [r7, #4]
 80003ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003ee:	4b0a      	ldr	r3, [pc, #40]	; (8000418 <HAL_MspInit+0x60>)
 80003f0:	685b      	ldr	r3, [r3, #4]
 80003f2:	60fb      	str	r3, [r7, #12]
 80003f4:	68fb      	ldr	r3, [r7, #12]
 80003f6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003fa:	60fb      	str	r3, [r7, #12]
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000402:	60fb      	str	r3, [r7, #12]
 8000404:	4a04      	ldr	r2, [pc, #16]	; (8000418 <HAL_MspInit+0x60>)
 8000406:	68fb      	ldr	r3, [r7, #12]
 8000408:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800040a:	bf00      	nop
 800040c:	3714      	adds	r7, #20
 800040e:	46bd      	mov	sp, r7
 8000410:	bc80      	pop	{r7}
 8000412:	4770      	bx	lr
 8000414:	40021000 	.word	0x40021000
 8000418:	40010000 	.word	0x40010000

0800041c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000420:	bf00      	nop
 8000422:	46bd      	mov	sp, r7
 8000424:	bc80      	pop	{r7}
 8000426:	4770      	bx	lr

08000428 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800042c:	e7fe      	b.n	800042c <HardFault_Handler+0x4>

0800042e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800042e:	b480      	push	{r7}
 8000430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000432:	e7fe      	b.n	8000432 <MemManage_Handler+0x4>

08000434 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000438:	e7fe      	b.n	8000438 <BusFault_Handler+0x4>

0800043a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800043a:	b480      	push	{r7}
 800043c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800043e:	e7fe      	b.n	800043e <UsageFault_Handler+0x4>

08000440 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000444:	bf00      	nop
 8000446:	46bd      	mov	sp, r7
 8000448:	bc80      	pop	{r7}
 800044a:	4770      	bx	lr

0800044c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800044c:	b480      	push	{r7}
 800044e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000450:	bf00      	nop
 8000452:	46bd      	mov	sp, r7
 8000454:	bc80      	pop	{r7}
 8000456:	4770      	bx	lr

08000458 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800045c:	bf00      	nop
 800045e:	46bd      	mov	sp, r7
 8000460:	bc80      	pop	{r7}
 8000462:	4770      	bx	lr

08000464 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000468:	f000 fa9c 	bl	80009a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800046c:	bf00      	nop
 800046e:	bd80      	pop	{r7, pc}

08000470 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000474:	4802      	ldr	r0, [pc, #8]	; (8000480 <DMA1_Channel4_IRQHandler+0x10>)
 8000476:	f000 fd11 	bl	8000e9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800047a:	bf00      	nop
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	200000f8 	.word	0x200000f8

08000484 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000488:	4802      	ldr	r0, [pc, #8]	; (8000494 <DMA1_Channel5_IRQHandler+0x10>)
 800048a:	f000 fd07 	bl	8000e9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800048e:	bf00      	nop
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	2000013c 	.word	0x2000013c

08000498 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800049c:	4802      	ldr	r0, [pc, #8]	; (80004a8 <DMA1_Channel6_IRQHandler+0x10>)
 800049e:	f000 fcfd 	bl	8000e9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80004a2:	bf00      	nop
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	200000b4 	.word	0x200000b4

080004ac <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80004b0:	4802      	ldr	r0, [pc, #8]	; (80004bc <DMA1_Channel7_IRQHandler+0x10>)
 80004b2:	f000 fcf3 	bl	8000e9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80004b6:	bf00      	nop
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	20000180 	.word	0x20000180

080004c0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80004c4:	4802      	ldr	r0, [pc, #8]	; (80004d0 <USART1_IRQHandler+0x10>)
 80004c6:	f001 fce5 	bl	8001e94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80004ca:	bf00      	nop
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	200001c4 	.word	0x200001c4

080004d4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80004d8:	4802      	ldr	r0, [pc, #8]	; (80004e4 <USART2_IRQHandler+0x10>)
 80004da:	f001 fcdb 	bl	8001e94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80004de:	bf00      	nop
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	20000204 	.word	0x20000204

080004e8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80004f0:	4b11      	ldr	r3, [pc, #68]	; (8000538 <_sbrk+0x50>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d102      	bne.n	80004fe <_sbrk+0x16>
		heap_end = &end;
 80004f8:	4b0f      	ldr	r3, [pc, #60]	; (8000538 <_sbrk+0x50>)
 80004fa:	4a10      	ldr	r2, [pc, #64]	; (800053c <_sbrk+0x54>)
 80004fc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80004fe:	4b0e      	ldr	r3, [pc, #56]	; (8000538 <_sbrk+0x50>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000504:	4b0c      	ldr	r3, [pc, #48]	; (8000538 <_sbrk+0x50>)
 8000506:	681a      	ldr	r2, [r3, #0]
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	4413      	add	r3, r2
 800050c:	466a      	mov	r2, sp
 800050e:	4293      	cmp	r3, r2
 8000510:	d907      	bls.n	8000522 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000512:	f002 f8b1 	bl	8002678 <__errno>
 8000516:	4602      	mov	r2, r0
 8000518:	230c      	movs	r3, #12
 800051a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800051c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000520:	e006      	b.n	8000530 <_sbrk+0x48>
	}

	heap_end += incr;
 8000522:	4b05      	ldr	r3, [pc, #20]	; (8000538 <_sbrk+0x50>)
 8000524:	681a      	ldr	r2, [r3, #0]
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	4413      	add	r3, r2
 800052a:	4a03      	ldr	r2, [pc, #12]	; (8000538 <_sbrk+0x50>)
 800052c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800052e:	68fb      	ldr	r3, [r7, #12]
}
 8000530:	4618      	mov	r0, r3
 8000532:	3710      	adds	r7, #16
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	20000090 	.word	0x20000090
 800053c:	20000250 	.word	0x20000250

08000540 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000544:	4b15      	ldr	r3, [pc, #84]	; (800059c <SystemInit+0x5c>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a14      	ldr	r2, [pc, #80]	; (800059c <SystemInit+0x5c>)
 800054a:	f043 0301 	orr.w	r3, r3, #1
 800054e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000550:	4b12      	ldr	r3, [pc, #72]	; (800059c <SystemInit+0x5c>)
 8000552:	685a      	ldr	r2, [r3, #4]
 8000554:	4911      	ldr	r1, [pc, #68]	; (800059c <SystemInit+0x5c>)
 8000556:	4b12      	ldr	r3, [pc, #72]	; (80005a0 <SystemInit+0x60>)
 8000558:	4013      	ands	r3, r2
 800055a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800055c:	4b0f      	ldr	r3, [pc, #60]	; (800059c <SystemInit+0x5c>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a0e      	ldr	r2, [pc, #56]	; (800059c <SystemInit+0x5c>)
 8000562:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000566:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800056a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800056c:	4b0b      	ldr	r3, [pc, #44]	; (800059c <SystemInit+0x5c>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a0a      	ldr	r2, [pc, #40]	; (800059c <SystemInit+0x5c>)
 8000572:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000576:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000578:	4b08      	ldr	r3, [pc, #32]	; (800059c <SystemInit+0x5c>)
 800057a:	685b      	ldr	r3, [r3, #4]
 800057c:	4a07      	ldr	r2, [pc, #28]	; (800059c <SystemInit+0x5c>)
 800057e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000582:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000584:	4b05      	ldr	r3, [pc, #20]	; (800059c <SystemInit+0x5c>)
 8000586:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800058a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800058c:	4b05      	ldr	r3, [pc, #20]	; (80005a4 <SystemInit+0x64>)
 800058e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000592:	609a      	str	r2, [r3, #8]
#endif 
}
 8000594:	bf00      	nop
 8000596:	46bd      	mov	sp, r7
 8000598:	bc80      	pop	{r7}
 800059a:	4770      	bx	lr
 800059c:	40021000 	.word	0x40021000
 80005a0:	f8ff0000 	.word	0xf8ff0000
 80005a4:	e000ed00 	.word	0xe000ed00

080005a8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80005ac:	4b11      	ldr	r3, [pc, #68]	; (80005f4 <MX_USART1_UART_Init+0x4c>)
 80005ae:	4a12      	ldr	r2, [pc, #72]	; (80005f8 <MX_USART1_UART_Init+0x50>)
 80005b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80005b2:	4b10      	ldr	r3, [pc, #64]	; (80005f4 <MX_USART1_UART_Init+0x4c>)
 80005b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005ba:	4b0e      	ldr	r3, [pc, #56]	; (80005f4 <MX_USART1_UART_Init+0x4c>)
 80005bc:	2200      	movs	r2, #0
 80005be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005c0:	4b0c      	ldr	r3, [pc, #48]	; (80005f4 <MX_USART1_UART_Init+0x4c>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005c6:	4b0b      	ldr	r3, [pc, #44]	; (80005f4 <MX_USART1_UART_Init+0x4c>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005cc:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <MX_USART1_UART_Init+0x4c>)
 80005ce:	220c      	movs	r2, #12
 80005d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005d2:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <MX_USART1_UART_Init+0x4c>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005d8:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <MX_USART1_UART_Init+0x4c>)
 80005da:	2200      	movs	r2, #0
 80005dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005de:	4805      	ldr	r0, [pc, #20]	; (80005f4 <MX_USART1_UART_Init+0x4c>)
 80005e0:	f001 fb1e 	bl	8001c20 <HAL_UART_Init>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80005ea:	f7ff fedf 	bl	80003ac <Error_Handler>
  }

}
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	200001c4 	.word	0x200001c4
 80005f8:	40013800 	.word	0x40013800

080005fc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000600:	4b11      	ldr	r3, [pc, #68]	; (8000648 <MX_USART2_UART_Init+0x4c>)
 8000602:	4a12      	ldr	r2, [pc, #72]	; (800064c <MX_USART2_UART_Init+0x50>)
 8000604:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000606:	4b10      	ldr	r3, [pc, #64]	; (8000648 <MX_USART2_UART_Init+0x4c>)
 8000608:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800060c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800060e:	4b0e      	ldr	r3, [pc, #56]	; (8000648 <MX_USART2_UART_Init+0x4c>)
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000614:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <MX_USART2_UART_Init+0x4c>)
 8000616:	2200      	movs	r2, #0
 8000618:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800061a:	4b0b      	ldr	r3, [pc, #44]	; (8000648 <MX_USART2_UART_Init+0x4c>)
 800061c:	2200      	movs	r2, #0
 800061e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000620:	4b09      	ldr	r3, [pc, #36]	; (8000648 <MX_USART2_UART_Init+0x4c>)
 8000622:	220c      	movs	r2, #12
 8000624:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000626:	4b08      	ldr	r3, [pc, #32]	; (8000648 <MX_USART2_UART_Init+0x4c>)
 8000628:	2200      	movs	r2, #0
 800062a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800062c:	4b06      	ldr	r3, [pc, #24]	; (8000648 <MX_USART2_UART_Init+0x4c>)
 800062e:	2200      	movs	r2, #0
 8000630:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000632:	4805      	ldr	r0, [pc, #20]	; (8000648 <MX_USART2_UART_Init+0x4c>)
 8000634:	f001 faf4 	bl	8001c20 <HAL_UART_Init>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800063e:	f7ff feb5 	bl	80003ac <Error_Handler>
  }

}
 8000642:	bf00      	nop
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	20000204 	.word	0x20000204
 800064c:	40004400 	.word	0x40004400

08000650 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b08a      	sub	sp, #40	; 0x28
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000658:	f107 0318 	add.w	r3, r7, #24
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4a8c      	ldr	r2, [pc, #560]	; (800089c <HAL_UART_MspInit+0x24c>)
 800066c:	4293      	cmp	r3, r2
 800066e:	f040 8087 	bne.w	8000780 <HAL_UART_MspInit+0x130>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000672:	4b8b      	ldr	r3, [pc, #556]	; (80008a0 <HAL_UART_MspInit+0x250>)
 8000674:	699b      	ldr	r3, [r3, #24]
 8000676:	4a8a      	ldr	r2, [pc, #552]	; (80008a0 <HAL_UART_MspInit+0x250>)
 8000678:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800067c:	6193      	str	r3, [r2, #24]
 800067e:	4b88      	ldr	r3, [pc, #544]	; (80008a0 <HAL_UART_MspInit+0x250>)
 8000680:	699b      	ldr	r3, [r3, #24]
 8000682:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000686:	617b      	str	r3, [r7, #20]
 8000688:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800068a:	4b85      	ldr	r3, [pc, #532]	; (80008a0 <HAL_UART_MspInit+0x250>)
 800068c:	699b      	ldr	r3, [r3, #24]
 800068e:	4a84      	ldr	r2, [pc, #528]	; (80008a0 <HAL_UART_MspInit+0x250>)
 8000690:	f043 0304 	orr.w	r3, r3, #4
 8000694:	6193      	str	r3, [r2, #24]
 8000696:	4b82      	ldr	r3, [pc, #520]	; (80008a0 <HAL_UART_MspInit+0x250>)
 8000698:	699b      	ldr	r3, [r3, #24]
 800069a:	f003 0304 	and.w	r3, r3, #4
 800069e:	613b      	str	r3, [r7, #16]
 80006a0:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a8:	2302      	movs	r3, #2
 80006aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006ac:	2303      	movs	r3, #3
 80006ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b0:	f107 0318 	add.w	r3, r7, #24
 80006b4:	4619      	mov	r1, r3
 80006b6:	487b      	ldr	r0, [pc, #492]	; (80008a4 <HAL_UART_MspInit+0x254>)
 80006b8:	f000 fd24 	bl	8001104 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80006bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006c2:	2300      	movs	r3, #0
 80006c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	2300      	movs	r3, #0
 80006c8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ca:	f107 0318 	add.w	r3, r7, #24
 80006ce:	4619      	mov	r1, r3
 80006d0:	4874      	ldr	r0, [pc, #464]	; (80008a4 <HAL_UART_MspInit+0x254>)
 80006d2:	f000 fd17 	bl	8001104 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80006d6:	4b74      	ldr	r3, [pc, #464]	; (80008a8 <HAL_UART_MspInit+0x258>)
 80006d8:	4a74      	ldr	r2, [pc, #464]	; (80008ac <HAL_UART_MspInit+0x25c>)
 80006da:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006dc:	4b72      	ldr	r3, [pc, #456]	; (80008a8 <HAL_UART_MspInit+0x258>)
 80006de:	2200      	movs	r2, #0
 80006e0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80006e2:	4b71      	ldr	r3, [pc, #452]	; (80008a8 <HAL_UART_MspInit+0x258>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80006e8:	4b6f      	ldr	r3, [pc, #444]	; (80008a8 <HAL_UART_MspInit+0x258>)
 80006ea:	2280      	movs	r2, #128	; 0x80
 80006ec:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80006ee:	4b6e      	ldr	r3, [pc, #440]	; (80008a8 <HAL_UART_MspInit+0x258>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80006f4:	4b6c      	ldr	r3, [pc, #432]	; (80008a8 <HAL_UART_MspInit+0x258>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80006fa:	4b6b      	ldr	r3, [pc, #428]	; (80008a8 <HAL_UART_MspInit+0x258>)
 80006fc:	2220      	movs	r2, #32
 80006fe:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000700:	4b69      	ldr	r3, [pc, #420]	; (80008a8 <HAL_UART_MspInit+0x258>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000706:	4868      	ldr	r0, [pc, #416]	; (80008a8 <HAL_UART_MspInit+0x258>)
 8000708:	f000 fa98 	bl	8000c3c <HAL_DMA_Init>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8000712:	f7ff fe4b 	bl	80003ac <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	4a63      	ldr	r2, [pc, #396]	; (80008a8 <HAL_UART_MspInit+0x258>)
 800071a:	635a      	str	r2, [r3, #52]	; 0x34
 800071c:	4a62      	ldr	r2, [pc, #392]	; (80008a8 <HAL_UART_MspInit+0x258>)
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8000722:	4b63      	ldr	r3, [pc, #396]	; (80008b0 <HAL_UART_MspInit+0x260>)
 8000724:	4a63      	ldr	r2, [pc, #396]	; (80008b4 <HAL_UART_MspInit+0x264>)
 8000726:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000728:	4b61      	ldr	r3, [pc, #388]	; (80008b0 <HAL_UART_MspInit+0x260>)
 800072a:	2210      	movs	r2, #16
 800072c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800072e:	4b60      	ldr	r3, [pc, #384]	; (80008b0 <HAL_UART_MspInit+0x260>)
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000734:	4b5e      	ldr	r3, [pc, #376]	; (80008b0 <HAL_UART_MspInit+0x260>)
 8000736:	2280      	movs	r2, #128	; 0x80
 8000738:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800073a:	4b5d      	ldr	r3, [pc, #372]	; (80008b0 <HAL_UART_MspInit+0x260>)
 800073c:	2200      	movs	r2, #0
 800073e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000740:	4b5b      	ldr	r3, [pc, #364]	; (80008b0 <HAL_UART_MspInit+0x260>)
 8000742:	2200      	movs	r2, #0
 8000744:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000746:	4b5a      	ldr	r3, [pc, #360]	; (80008b0 <HAL_UART_MspInit+0x260>)
 8000748:	2200      	movs	r2, #0
 800074a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800074c:	4b58      	ldr	r3, [pc, #352]	; (80008b0 <HAL_UART_MspInit+0x260>)
 800074e:	2200      	movs	r2, #0
 8000750:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000752:	4857      	ldr	r0, [pc, #348]	; (80008b0 <HAL_UART_MspInit+0x260>)
 8000754:	f000 fa72 	bl	8000c3c <HAL_DMA_Init>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 800075e:	f7ff fe25 	bl	80003ac <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	4a52      	ldr	r2, [pc, #328]	; (80008b0 <HAL_UART_MspInit+0x260>)
 8000766:	631a      	str	r2, [r3, #48]	; 0x30
 8000768:	4a51      	ldr	r2, [pc, #324]	; (80008b0 <HAL_UART_MspInit+0x260>)
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800076e:	2200      	movs	r2, #0
 8000770:	2101      	movs	r1, #1
 8000772:	2025      	movs	r0, #37	; 0x25
 8000774:	f000 fa2b 	bl	8000bce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000778:	2025      	movs	r0, #37	; 0x25
 800077a:	f000 fa44 	bl	8000c06 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800077e:	e089      	b.n	8000894 <HAL_UART_MspInit+0x244>
  else if(uartHandle->Instance==USART2)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a4c      	ldr	r2, [pc, #304]	; (80008b8 <HAL_UART_MspInit+0x268>)
 8000786:	4293      	cmp	r3, r2
 8000788:	f040 8084 	bne.w	8000894 <HAL_UART_MspInit+0x244>
    __HAL_RCC_USART2_CLK_ENABLE();
 800078c:	4b44      	ldr	r3, [pc, #272]	; (80008a0 <HAL_UART_MspInit+0x250>)
 800078e:	69db      	ldr	r3, [r3, #28]
 8000790:	4a43      	ldr	r2, [pc, #268]	; (80008a0 <HAL_UART_MspInit+0x250>)
 8000792:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000796:	61d3      	str	r3, [r2, #28]
 8000798:	4b41      	ldr	r3, [pc, #260]	; (80008a0 <HAL_UART_MspInit+0x250>)
 800079a:	69db      	ldr	r3, [r3, #28]
 800079c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007a0:	60fb      	str	r3, [r7, #12]
 80007a2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a4:	4b3e      	ldr	r3, [pc, #248]	; (80008a0 <HAL_UART_MspInit+0x250>)
 80007a6:	699b      	ldr	r3, [r3, #24]
 80007a8:	4a3d      	ldr	r2, [pc, #244]	; (80008a0 <HAL_UART_MspInit+0x250>)
 80007aa:	f043 0304 	orr.w	r3, r3, #4
 80007ae:	6193      	str	r3, [r2, #24]
 80007b0:	4b3b      	ldr	r3, [pc, #236]	; (80008a0 <HAL_UART_MspInit+0x250>)
 80007b2:	699b      	ldr	r3, [r3, #24]
 80007b4:	f003 0304 	and.w	r3, r3, #4
 80007b8:	60bb      	str	r3, [r7, #8]
 80007ba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80007bc:	2304      	movs	r3, #4
 80007be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c0:	2302      	movs	r3, #2
 80007c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007c4:	2303      	movs	r3, #3
 80007c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c8:	f107 0318 	add.w	r3, r7, #24
 80007cc:	4619      	mov	r1, r3
 80007ce:	4835      	ldr	r0, [pc, #212]	; (80008a4 <HAL_UART_MspInit+0x254>)
 80007d0:	f000 fc98 	bl	8001104 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80007d4:	2308      	movs	r3, #8
 80007d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007d8:	2300      	movs	r3, #0
 80007da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007dc:	2300      	movs	r3, #0
 80007de:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e0:	f107 0318 	add.w	r3, r7, #24
 80007e4:	4619      	mov	r1, r3
 80007e6:	482f      	ldr	r0, [pc, #188]	; (80008a4 <HAL_UART_MspInit+0x254>)
 80007e8:	f000 fc8c 	bl	8001104 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80007ec:	4b33      	ldr	r3, [pc, #204]	; (80008bc <HAL_UART_MspInit+0x26c>)
 80007ee:	4a34      	ldr	r2, [pc, #208]	; (80008c0 <HAL_UART_MspInit+0x270>)
 80007f0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007f2:	4b32      	ldr	r3, [pc, #200]	; (80008bc <HAL_UART_MspInit+0x26c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80007f8:	4b30      	ldr	r3, [pc, #192]	; (80008bc <HAL_UART_MspInit+0x26c>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80007fe:	4b2f      	ldr	r3, [pc, #188]	; (80008bc <HAL_UART_MspInit+0x26c>)
 8000800:	2280      	movs	r2, #128	; 0x80
 8000802:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000804:	4b2d      	ldr	r3, [pc, #180]	; (80008bc <HAL_UART_MspInit+0x26c>)
 8000806:	2200      	movs	r2, #0
 8000808:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800080a:	4b2c      	ldr	r3, [pc, #176]	; (80008bc <HAL_UART_MspInit+0x26c>)
 800080c:	2200      	movs	r2, #0
 800080e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000810:	4b2a      	ldr	r3, [pc, #168]	; (80008bc <HAL_UART_MspInit+0x26c>)
 8000812:	2220      	movs	r2, #32
 8000814:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000816:	4b29      	ldr	r3, [pc, #164]	; (80008bc <HAL_UART_MspInit+0x26c>)
 8000818:	2200      	movs	r2, #0
 800081a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800081c:	4827      	ldr	r0, [pc, #156]	; (80008bc <HAL_UART_MspInit+0x26c>)
 800081e:	f000 fa0d 	bl	8000c3c <HAL_DMA_Init>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <HAL_UART_MspInit+0x1dc>
      Error_Handler();
 8000828:	f7ff fdc0 	bl	80003ac <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	4a23      	ldr	r2, [pc, #140]	; (80008bc <HAL_UART_MspInit+0x26c>)
 8000830:	635a      	str	r2, [r3, #52]	; 0x34
 8000832:	4a22      	ldr	r2, [pc, #136]	; (80008bc <HAL_UART_MspInit+0x26c>)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000838:	4b22      	ldr	r3, [pc, #136]	; (80008c4 <HAL_UART_MspInit+0x274>)
 800083a:	4a23      	ldr	r2, [pc, #140]	; (80008c8 <HAL_UART_MspInit+0x278>)
 800083c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800083e:	4b21      	ldr	r3, [pc, #132]	; (80008c4 <HAL_UART_MspInit+0x274>)
 8000840:	2210      	movs	r2, #16
 8000842:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000844:	4b1f      	ldr	r3, [pc, #124]	; (80008c4 <HAL_UART_MspInit+0x274>)
 8000846:	2200      	movs	r2, #0
 8000848:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800084a:	4b1e      	ldr	r3, [pc, #120]	; (80008c4 <HAL_UART_MspInit+0x274>)
 800084c:	2280      	movs	r2, #128	; 0x80
 800084e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000850:	4b1c      	ldr	r3, [pc, #112]	; (80008c4 <HAL_UART_MspInit+0x274>)
 8000852:	2200      	movs	r2, #0
 8000854:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000856:	4b1b      	ldr	r3, [pc, #108]	; (80008c4 <HAL_UART_MspInit+0x274>)
 8000858:	2200      	movs	r2, #0
 800085a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800085c:	4b19      	ldr	r3, [pc, #100]	; (80008c4 <HAL_UART_MspInit+0x274>)
 800085e:	2200      	movs	r2, #0
 8000860:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000862:	4b18      	ldr	r3, [pc, #96]	; (80008c4 <HAL_UART_MspInit+0x274>)
 8000864:	2200      	movs	r2, #0
 8000866:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000868:	4816      	ldr	r0, [pc, #88]	; (80008c4 <HAL_UART_MspInit+0x274>)
 800086a:	f000 f9e7 	bl	8000c3c <HAL_DMA_Init>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <HAL_UART_MspInit+0x228>
      Error_Handler();
 8000874:	f7ff fd9a 	bl	80003ac <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	4a12      	ldr	r2, [pc, #72]	; (80008c4 <HAL_UART_MspInit+0x274>)
 800087c:	631a      	str	r2, [r3, #48]	; 0x30
 800087e:	4a11      	ldr	r2, [pc, #68]	; (80008c4 <HAL_UART_MspInit+0x274>)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8000884:	2200      	movs	r2, #0
 8000886:	2102      	movs	r1, #2
 8000888:	2026      	movs	r0, #38	; 0x26
 800088a:	f000 f9a0 	bl	8000bce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800088e:	2026      	movs	r0, #38	; 0x26
 8000890:	f000 f9b9 	bl	8000c06 <HAL_NVIC_EnableIRQ>
}
 8000894:	bf00      	nop
 8000896:	3728      	adds	r7, #40	; 0x28
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	40013800 	.word	0x40013800
 80008a0:	40021000 	.word	0x40021000
 80008a4:	40010800 	.word	0x40010800
 80008a8:	2000013c 	.word	0x2000013c
 80008ac:	40020058 	.word	0x40020058
 80008b0:	200000f8 	.word	0x200000f8
 80008b4:	40020044 	.word	0x40020044
 80008b8:	40004400 	.word	0x40004400
 80008bc:	200000b4 	.word	0x200000b4
 80008c0:	4002006c 	.word	0x4002006c
 80008c4:	20000180 	.word	0x20000180
 80008c8:	40020080 	.word	0x40020080

080008cc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80008cc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80008ce:	e003      	b.n	80008d8 <LoopCopyDataInit>

080008d0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80008d0:	4b0b      	ldr	r3, [pc, #44]	; (8000900 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80008d2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80008d4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80008d6:	3104      	adds	r1, #4

080008d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80008d8:	480a      	ldr	r0, [pc, #40]	; (8000904 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80008da:	4b0b      	ldr	r3, [pc, #44]	; (8000908 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80008dc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80008de:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80008e0:	d3f6      	bcc.n	80008d0 <CopyDataInit>
  ldr r2, =_sbss
 80008e2:	4a0a      	ldr	r2, [pc, #40]	; (800090c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80008e4:	e002      	b.n	80008ec <LoopFillZerobss>

080008e6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80008e6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80008e8:	f842 3b04 	str.w	r3, [r2], #4

080008ec <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80008ec:	4b08      	ldr	r3, [pc, #32]	; (8000910 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80008ee:	429a      	cmp	r2, r3
  bcc FillZerobss
 80008f0:	d3f9      	bcc.n	80008e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80008f2:	f7ff fe25 	bl	8000540 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008f6:	f001 fec5 	bl	8002684 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008fa:	f7ff fca7 	bl	800024c <main>
  bx lr
 80008fe:	4770      	bx	lr
  ldr r3, =_sidata
 8000900:	08002f8c 	.word	0x08002f8c
  ldr r0, =_sdata
 8000904:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000908:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 800090c:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 8000910:	2000024c 	.word	0x2000024c

08000914 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000914:	e7fe      	b.n	8000914 <ADC1_2_IRQHandler>
	...

08000918 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800091c:	4b08      	ldr	r3, [pc, #32]	; (8000940 <HAL_Init+0x28>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a07      	ldr	r2, [pc, #28]	; (8000940 <HAL_Init+0x28>)
 8000922:	f043 0310 	orr.w	r3, r3, #16
 8000926:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000928:	2003      	movs	r0, #3
 800092a:	f000 f945 	bl	8000bb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800092e:	2000      	movs	r0, #0
 8000930:	f000 f808 	bl	8000944 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000934:	f7ff fd40 	bl	80003b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000938:	2300      	movs	r3, #0
}
 800093a:	4618      	mov	r0, r3
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40022000 	.word	0x40022000

08000944 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800094c:	4b12      	ldr	r3, [pc, #72]	; (8000998 <HAL_InitTick+0x54>)
 800094e:	681a      	ldr	r2, [r3, #0]
 8000950:	4b12      	ldr	r3, [pc, #72]	; (800099c <HAL_InitTick+0x58>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	4619      	mov	r1, r3
 8000956:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800095a:	fbb3 f3f1 	udiv	r3, r3, r1
 800095e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000962:	4618      	mov	r0, r3
 8000964:	f000 f95d 	bl	8000c22 <HAL_SYSTICK_Config>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800096e:	2301      	movs	r3, #1
 8000970:	e00e      	b.n	8000990 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	2b0f      	cmp	r3, #15
 8000976:	d80a      	bhi.n	800098e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000978:	2200      	movs	r2, #0
 800097a:	6879      	ldr	r1, [r7, #4]
 800097c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000980:	f000 f925 	bl	8000bce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000984:	4a06      	ldr	r2, [pc, #24]	; (80009a0 <HAL_InitTick+0x5c>)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800098a:	2300      	movs	r3, #0
 800098c:	e000      	b.n	8000990 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800098e:	2301      	movs	r3, #1
}
 8000990:	4618      	mov	r0, r3
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	20000004 	.word	0x20000004
 800099c:	2000000c 	.word	0x2000000c
 80009a0:	20000008 	.word	0x20000008

080009a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009a8:	4b05      	ldr	r3, [pc, #20]	; (80009c0 <HAL_IncTick+0x1c>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	461a      	mov	r2, r3
 80009ae:	4b05      	ldr	r3, [pc, #20]	; (80009c4 <HAL_IncTick+0x20>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4413      	add	r3, r2
 80009b4:	4a03      	ldr	r2, [pc, #12]	; (80009c4 <HAL_IncTick+0x20>)
 80009b6:	6013      	str	r3, [r2, #0]
}
 80009b8:	bf00      	nop
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bc80      	pop	{r7}
 80009be:	4770      	bx	lr
 80009c0:	2000000c 	.word	0x2000000c
 80009c4:	20000244 	.word	0x20000244

080009c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  return uwTick;
 80009cc:	4b02      	ldr	r3, [pc, #8]	; (80009d8 <HAL_GetTick+0x10>)
 80009ce:	681b      	ldr	r3, [r3, #0]
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bc80      	pop	{r7}
 80009d6:	4770      	bx	lr
 80009d8:	20000244 	.word	0x20000244

080009dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009e4:	f7ff fff0 	bl	80009c8 <HAL_GetTick>
 80009e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80009f4:	d005      	beq.n	8000a02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009f6:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <HAL_Delay+0x40>)
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	461a      	mov	r2, r3
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	4413      	add	r3, r2
 8000a00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a02:	bf00      	nop
 8000a04:	f7ff ffe0 	bl	80009c8 <HAL_GetTick>
 8000a08:	4602      	mov	r2, r0
 8000a0a:	68bb      	ldr	r3, [r7, #8]
 8000a0c:	1ad3      	subs	r3, r2, r3
 8000a0e:	68fa      	ldr	r2, [r7, #12]
 8000a10:	429a      	cmp	r2, r3
 8000a12:	d8f7      	bhi.n	8000a04 <HAL_Delay+0x28>
  {
  }
}
 8000a14:	bf00      	nop
 8000a16:	3710      	adds	r7, #16
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	2000000c 	.word	0x2000000c

08000a20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b085      	sub	sp, #20
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	f003 0307 	and.w	r3, r3, #7
 8000a2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a30:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <__NVIC_SetPriorityGrouping+0x44>)
 8000a32:	68db      	ldr	r3, [r3, #12]
 8000a34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a36:	68ba      	ldr	r2, [r7, #8]
 8000a38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a52:	4a04      	ldr	r2, [pc, #16]	; (8000a64 <__NVIC_SetPriorityGrouping+0x44>)
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	60d3      	str	r3, [r2, #12]
}
 8000a58:	bf00      	nop
 8000a5a:	3714      	adds	r7, #20
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bc80      	pop	{r7}
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	e000ed00 	.word	0xe000ed00

08000a68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a6c:	4b04      	ldr	r3, [pc, #16]	; (8000a80 <__NVIC_GetPriorityGrouping+0x18>)
 8000a6e:	68db      	ldr	r3, [r3, #12]
 8000a70:	0a1b      	lsrs	r3, r3, #8
 8000a72:	f003 0307 	and.w	r3, r3, #7
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bc80      	pop	{r7}
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	e000ed00 	.word	0xe000ed00

08000a84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	db0b      	blt.n	8000aae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a96:	79fb      	ldrb	r3, [r7, #7]
 8000a98:	f003 021f 	and.w	r2, r3, #31
 8000a9c:	4906      	ldr	r1, [pc, #24]	; (8000ab8 <__NVIC_EnableIRQ+0x34>)
 8000a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa2:	095b      	lsrs	r3, r3, #5
 8000aa4:	2001      	movs	r0, #1
 8000aa6:	fa00 f202 	lsl.w	r2, r0, r2
 8000aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000aae:	bf00      	nop
 8000ab0:	370c      	adds	r7, #12
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bc80      	pop	{r7}
 8000ab6:	4770      	bx	lr
 8000ab8:	e000e100 	.word	0xe000e100

08000abc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	6039      	str	r1, [r7, #0]
 8000ac6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ac8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	db0a      	blt.n	8000ae6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	b2da      	uxtb	r2, r3
 8000ad4:	490c      	ldr	r1, [pc, #48]	; (8000b08 <__NVIC_SetPriority+0x4c>)
 8000ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ada:	0112      	lsls	r2, r2, #4
 8000adc:	b2d2      	uxtb	r2, r2
 8000ade:	440b      	add	r3, r1
 8000ae0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ae4:	e00a      	b.n	8000afc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	b2da      	uxtb	r2, r3
 8000aea:	4908      	ldr	r1, [pc, #32]	; (8000b0c <__NVIC_SetPriority+0x50>)
 8000aec:	79fb      	ldrb	r3, [r7, #7]
 8000aee:	f003 030f 	and.w	r3, r3, #15
 8000af2:	3b04      	subs	r3, #4
 8000af4:	0112      	lsls	r2, r2, #4
 8000af6:	b2d2      	uxtb	r2, r2
 8000af8:	440b      	add	r3, r1
 8000afa:	761a      	strb	r2, [r3, #24]
}
 8000afc:	bf00      	nop
 8000afe:	370c      	adds	r7, #12
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bc80      	pop	{r7}
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	e000e100 	.word	0xe000e100
 8000b0c:	e000ed00 	.word	0xe000ed00

08000b10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b089      	sub	sp, #36	; 0x24
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	60f8      	str	r0, [r7, #12]
 8000b18:	60b9      	str	r1, [r7, #8]
 8000b1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	f003 0307 	and.w	r3, r3, #7
 8000b22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b24:	69fb      	ldr	r3, [r7, #28]
 8000b26:	f1c3 0307 	rsb	r3, r3, #7
 8000b2a:	2b04      	cmp	r3, #4
 8000b2c:	bf28      	it	cs
 8000b2e:	2304      	movcs	r3, #4
 8000b30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b32:	69fb      	ldr	r3, [r7, #28]
 8000b34:	3304      	adds	r3, #4
 8000b36:	2b06      	cmp	r3, #6
 8000b38:	d902      	bls.n	8000b40 <NVIC_EncodePriority+0x30>
 8000b3a:	69fb      	ldr	r3, [r7, #28]
 8000b3c:	3b03      	subs	r3, #3
 8000b3e:	e000      	b.n	8000b42 <NVIC_EncodePriority+0x32>
 8000b40:	2300      	movs	r3, #0
 8000b42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b48:	69bb      	ldr	r3, [r7, #24]
 8000b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4e:	43da      	mvns	r2, r3
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	401a      	ands	r2, r3
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b58:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b62:	43d9      	mvns	r1, r3
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b68:	4313      	orrs	r3, r2
         );
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3724      	adds	r7, #36	; 0x24
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bc80      	pop	{r7}
 8000b72:	4770      	bx	lr

08000b74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	3b01      	subs	r3, #1
 8000b80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b84:	d301      	bcc.n	8000b8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b86:	2301      	movs	r3, #1
 8000b88:	e00f      	b.n	8000baa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b8a:	4a0a      	ldr	r2, [pc, #40]	; (8000bb4 <SysTick_Config+0x40>)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	3b01      	subs	r3, #1
 8000b90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b92:	210f      	movs	r1, #15
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b98:	f7ff ff90 	bl	8000abc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b9c:	4b05      	ldr	r3, [pc, #20]	; (8000bb4 <SysTick_Config+0x40>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ba2:	4b04      	ldr	r3, [pc, #16]	; (8000bb4 <SysTick_Config+0x40>)
 8000ba4:	2207      	movs	r2, #7
 8000ba6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ba8:	2300      	movs	r3, #0
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	e000e010 	.word	0xe000e010

08000bb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bc0:	6878      	ldr	r0, [r7, #4]
 8000bc2:	f7ff ff2d 	bl	8000a20 <__NVIC_SetPriorityGrouping>
}
 8000bc6:	bf00      	nop
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}

08000bce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	b086      	sub	sp, #24
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	60b9      	str	r1, [r7, #8]
 8000bd8:	607a      	str	r2, [r7, #4]
 8000bda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000be0:	f7ff ff42 	bl	8000a68 <__NVIC_GetPriorityGrouping>
 8000be4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000be6:	687a      	ldr	r2, [r7, #4]
 8000be8:	68b9      	ldr	r1, [r7, #8]
 8000bea:	6978      	ldr	r0, [r7, #20]
 8000bec:	f7ff ff90 	bl	8000b10 <NVIC_EncodePriority>
 8000bf0:	4602      	mov	r2, r0
 8000bf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bf6:	4611      	mov	r1, r2
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f7ff ff5f 	bl	8000abc <__NVIC_SetPriority>
}
 8000bfe:	bf00      	nop
 8000c00:	3718      	adds	r7, #24
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}

08000c06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	b082      	sub	sp, #8
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff ff35 	bl	8000a84 <__NVIC_EnableIRQ>
}
 8000c1a:	bf00      	nop
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}

08000c22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c22:	b580      	push	{r7, lr}
 8000c24:	b082      	sub	sp, #8
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c2a:	6878      	ldr	r0, [r7, #4]
 8000c2c:	f7ff ffa2 	bl	8000b74 <SysTick_Config>
 8000c30:	4603      	mov	r3, r0
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
	...

08000c3c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b085      	sub	sp, #20
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000c44:	2300      	movs	r3, #0
 8000c46:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d101      	bne.n	8000c52 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	e043      	b.n	8000cda <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	461a      	mov	r2, r3
 8000c58:	4b22      	ldr	r3, [pc, #136]	; (8000ce4 <HAL_DMA_Init+0xa8>)
 8000c5a:	4413      	add	r3, r2
 8000c5c:	4a22      	ldr	r2, [pc, #136]	; (8000ce8 <HAL_DMA_Init+0xac>)
 8000c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c62:	091b      	lsrs	r3, r3, #4
 8000c64:	009a      	lsls	r2, r3, #2
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4a1f      	ldr	r2, [pc, #124]	; (8000cec <HAL_DMA_Init+0xb0>)
 8000c6e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2202      	movs	r2, #2
 8000c74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000c86:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000c8a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000c94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	68db      	ldr	r3, [r3, #12]
 8000c9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ca0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	695b      	ldr	r3, [r3, #20]
 8000ca6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	69db      	ldr	r3, [r3, #28]
 8000cb2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000cb4:	68fa      	ldr	r2, [r7, #12]
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	68fa      	ldr	r2, [r7, #12]
 8000cc0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2201      	movs	r2, #1
 8000ccc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000cd8:	2300      	movs	r3, #0
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3714      	adds	r7, #20
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bc80      	pop	{r7}
 8000ce2:	4770      	bx	lr
 8000ce4:	bffdfff8 	.word	0xbffdfff8
 8000ce8:	cccccccd 	.word	0xcccccccd
 8000cec:	40020000 	.word	0x40020000

08000cf0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b086      	sub	sp, #24
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	60f8      	str	r0, [r7, #12]
 8000cf8:	60b9      	str	r1, [r7, #8]
 8000cfa:	607a      	str	r2, [r7, #4]
 8000cfc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d101      	bne.n	8000d10 <HAL_DMA_Start_IT+0x20>
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	e04a      	b.n	8000da6 <HAL_DMA_Start_IT+0xb6>
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	2201      	movs	r2, #1
 8000d14:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d13a      	bne.n	8000d98 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	2202      	movs	r2, #2
 8000d26:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f022 0201 	bic.w	r2, r2, #1
 8000d3e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	687a      	ldr	r2, [r7, #4]
 8000d44:	68b9      	ldr	r1, [r7, #8]
 8000d46:	68f8      	ldr	r0, [r7, #12]
 8000d48:	f000 f9ae 	bl	80010a8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d008      	beq.n	8000d66 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f042 020e 	orr.w	r2, r2, #14
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	e00f      	b.n	8000d86 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f022 0204 	bic.w	r2, r2, #4
 8000d74:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f042 020a 	orr.w	r2, r2, #10
 8000d84:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f042 0201 	orr.w	r2, r2, #1
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	e005      	b.n	8000da4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000da0:	2302      	movs	r3, #2
 8000da2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000da4:	7dfb      	ldrb	r3, [r7, #23]
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3718      	adds	r7, #24
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
	...

08000db0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000db8:	2300      	movs	r3, #0
 8000dba:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000dc2:	2b02      	cmp	r3, #2
 8000dc4:	d005      	beq.n	8000dd2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2204      	movs	r2, #4
 8000dca:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	73fb      	strb	r3, [r7, #15]
 8000dd0:	e051      	b.n	8000e76 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f022 020e 	bic.w	r2, r2, #14
 8000de0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f022 0201 	bic.w	r2, r2, #1
 8000df0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a22      	ldr	r2, [pc, #136]	; (8000e80 <HAL_DMA_Abort_IT+0xd0>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d029      	beq.n	8000e50 <HAL_DMA_Abort_IT+0xa0>
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a20      	ldr	r2, [pc, #128]	; (8000e84 <HAL_DMA_Abort_IT+0xd4>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d022      	beq.n	8000e4c <HAL_DMA_Abort_IT+0x9c>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a1f      	ldr	r2, [pc, #124]	; (8000e88 <HAL_DMA_Abort_IT+0xd8>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d01a      	beq.n	8000e46 <HAL_DMA_Abort_IT+0x96>
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a1d      	ldr	r2, [pc, #116]	; (8000e8c <HAL_DMA_Abort_IT+0xdc>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d012      	beq.n	8000e40 <HAL_DMA_Abort_IT+0x90>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a1c      	ldr	r2, [pc, #112]	; (8000e90 <HAL_DMA_Abort_IT+0xe0>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d00a      	beq.n	8000e3a <HAL_DMA_Abort_IT+0x8a>
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a1a      	ldr	r2, [pc, #104]	; (8000e94 <HAL_DMA_Abort_IT+0xe4>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d102      	bne.n	8000e34 <HAL_DMA_Abort_IT+0x84>
 8000e2e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000e32:	e00e      	b.n	8000e52 <HAL_DMA_Abort_IT+0xa2>
 8000e34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e38:	e00b      	b.n	8000e52 <HAL_DMA_Abort_IT+0xa2>
 8000e3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e3e:	e008      	b.n	8000e52 <HAL_DMA_Abort_IT+0xa2>
 8000e40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e44:	e005      	b.n	8000e52 <HAL_DMA_Abort_IT+0xa2>
 8000e46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e4a:	e002      	b.n	8000e52 <HAL_DMA_Abort_IT+0xa2>
 8000e4c:	2310      	movs	r3, #16
 8000e4e:	e000      	b.n	8000e52 <HAL_DMA_Abort_IT+0xa2>
 8000e50:	2301      	movs	r3, #1
 8000e52:	4a11      	ldr	r2, [pc, #68]	; (8000e98 <HAL_DMA_Abort_IT+0xe8>)
 8000e54:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2201      	movs	r2, #1
 8000e5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2200      	movs	r2, #0
 8000e62:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d003      	beq.n	8000e76 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	4798      	blx	r3
    } 
  }
  return status;
 8000e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3710      	adds	r7, #16
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	40020008 	.word	0x40020008
 8000e84:	4002001c 	.word	0x4002001c
 8000e88:	40020030 	.word	0x40020030
 8000e8c:	40020044 	.word	0x40020044
 8000e90:	40020058 	.word	0x40020058
 8000e94:	4002006c 	.word	0x4002006c
 8000e98:	40020000 	.word	0x40020000

08000e9c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb8:	2204      	movs	r2, #4
 8000eba:	409a      	lsls	r2, r3
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d04f      	beq.n	8000f64 <HAL_DMA_IRQHandler+0xc8>
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	f003 0304 	and.w	r3, r3, #4
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d04a      	beq.n	8000f64 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f003 0320 	and.w	r3, r3, #32
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d107      	bne.n	8000eec <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f022 0204 	bic.w	r2, r2, #4
 8000eea:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a66      	ldr	r2, [pc, #408]	; (800108c <HAL_DMA_IRQHandler+0x1f0>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d029      	beq.n	8000f4a <HAL_DMA_IRQHandler+0xae>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a65      	ldr	r2, [pc, #404]	; (8001090 <HAL_DMA_IRQHandler+0x1f4>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d022      	beq.n	8000f46 <HAL_DMA_IRQHandler+0xaa>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a63      	ldr	r2, [pc, #396]	; (8001094 <HAL_DMA_IRQHandler+0x1f8>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d01a      	beq.n	8000f40 <HAL_DMA_IRQHandler+0xa4>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a62      	ldr	r2, [pc, #392]	; (8001098 <HAL_DMA_IRQHandler+0x1fc>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d012      	beq.n	8000f3a <HAL_DMA_IRQHandler+0x9e>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a60      	ldr	r2, [pc, #384]	; (800109c <HAL_DMA_IRQHandler+0x200>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d00a      	beq.n	8000f34 <HAL_DMA_IRQHandler+0x98>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a5f      	ldr	r2, [pc, #380]	; (80010a0 <HAL_DMA_IRQHandler+0x204>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d102      	bne.n	8000f2e <HAL_DMA_IRQHandler+0x92>
 8000f28:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f2c:	e00e      	b.n	8000f4c <HAL_DMA_IRQHandler+0xb0>
 8000f2e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000f32:	e00b      	b.n	8000f4c <HAL_DMA_IRQHandler+0xb0>
 8000f34:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000f38:	e008      	b.n	8000f4c <HAL_DMA_IRQHandler+0xb0>
 8000f3a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f3e:	e005      	b.n	8000f4c <HAL_DMA_IRQHandler+0xb0>
 8000f40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f44:	e002      	b.n	8000f4c <HAL_DMA_IRQHandler+0xb0>
 8000f46:	2340      	movs	r3, #64	; 0x40
 8000f48:	e000      	b.n	8000f4c <HAL_DMA_IRQHandler+0xb0>
 8000f4a:	2304      	movs	r3, #4
 8000f4c:	4a55      	ldr	r2, [pc, #340]	; (80010a4 <HAL_DMA_IRQHandler+0x208>)
 8000f4e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	f000 8094 	beq.w	8001082 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000f62:	e08e      	b.n	8001082 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f68:	2202      	movs	r2, #2
 8000f6a:	409a      	lsls	r2, r3
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	4013      	ands	r3, r2
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d056      	beq.n	8001022 <HAL_DMA_IRQHandler+0x186>
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	f003 0302 	and.w	r3, r3, #2
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d051      	beq.n	8001022 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f003 0320 	and.w	r3, r3, #32
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d10b      	bne.n	8000fa4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f022 020a 	bic.w	r2, r2, #10
 8000f9a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a38      	ldr	r2, [pc, #224]	; (800108c <HAL_DMA_IRQHandler+0x1f0>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d029      	beq.n	8001002 <HAL_DMA_IRQHandler+0x166>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a37      	ldr	r2, [pc, #220]	; (8001090 <HAL_DMA_IRQHandler+0x1f4>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d022      	beq.n	8000ffe <HAL_DMA_IRQHandler+0x162>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a35      	ldr	r2, [pc, #212]	; (8001094 <HAL_DMA_IRQHandler+0x1f8>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d01a      	beq.n	8000ff8 <HAL_DMA_IRQHandler+0x15c>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a34      	ldr	r2, [pc, #208]	; (8001098 <HAL_DMA_IRQHandler+0x1fc>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d012      	beq.n	8000ff2 <HAL_DMA_IRQHandler+0x156>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a32      	ldr	r2, [pc, #200]	; (800109c <HAL_DMA_IRQHandler+0x200>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d00a      	beq.n	8000fec <HAL_DMA_IRQHandler+0x150>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a31      	ldr	r2, [pc, #196]	; (80010a0 <HAL_DMA_IRQHandler+0x204>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d102      	bne.n	8000fe6 <HAL_DMA_IRQHandler+0x14a>
 8000fe0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000fe4:	e00e      	b.n	8001004 <HAL_DMA_IRQHandler+0x168>
 8000fe6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000fea:	e00b      	b.n	8001004 <HAL_DMA_IRQHandler+0x168>
 8000fec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ff0:	e008      	b.n	8001004 <HAL_DMA_IRQHandler+0x168>
 8000ff2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ff6:	e005      	b.n	8001004 <HAL_DMA_IRQHandler+0x168>
 8000ff8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ffc:	e002      	b.n	8001004 <HAL_DMA_IRQHandler+0x168>
 8000ffe:	2320      	movs	r3, #32
 8001000:	e000      	b.n	8001004 <HAL_DMA_IRQHandler+0x168>
 8001002:	2302      	movs	r3, #2
 8001004:	4a27      	ldr	r2, [pc, #156]	; (80010a4 <HAL_DMA_IRQHandler+0x208>)
 8001006:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2200      	movs	r2, #0
 800100c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001014:	2b00      	cmp	r3, #0
 8001016:	d034      	beq.n	8001082 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001020:	e02f      	b.n	8001082 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001026:	2208      	movs	r2, #8
 8001028:	409a      	lsls	r2, r3
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	4013      	ands	r3, r2
 800102e:	2b00      	cmp	r3, #0
 8001030:	d028      	beq.n	8001084 <HAL_DMA_IRQHandler+0x1e8>
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	f003 0308 	and.w	r3, r3, #8
 8001038:	2b00      	cmp	r3, #0
 800103a:	d023      	beq.n	8001084 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f022 020e 	bic.w	r2, r2, #14
 800104a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001054:	2101      	movs	r1, #1
 8001056:	fa01 f202 	lsl.w	r2, r1, r2
 800105a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2201      	movs	r2, #1
 8001060:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2201      	movs	r2, #1
 8001066:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2200      	movs	r2, #0
 800106e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	2b00      	cmp	r3, #0
 8001078:	d004      	beq.n	8001084 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	4798      	blx	r3
    }
  }
  return;
 8001082:	bf00      	nop
 8001084:	bf00      	nop
}
 8001086:	3710      	adds	r7, #16
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40020008 	.word	0x40020008
 8001090:	4002001c 	.word	0x4002001c
 8001094:	40020030 	.word	0x40020030
 8001098:	40020044 	.word	0x40020044
 800109c:	40020058 	.word	0x40020058
 80010a0:	4002006c 	.word	0x4002006c
 80010a4:	40020000 	.word	0x40020000

080010a8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	607a      	str	r2, [r7, #4]
 80010b4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010be:	2101      	movs	r1, #1
 80010c0:	fa01 f202 	lsl.w	r2, r1, r2
 80010c4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	683a      	ldr	r2, [r7, #0]
 80010cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	2b10      	cmp	r3, #16
 80010d4:	d108      	bne.n	80010e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	687a      	ldr	r2, [r7, #4]
 80010dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	68ba      	ldr	r2, [r7, #8]
 80010e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80010e6:	e007      	b.n	80010f8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	68ba      	ldr	r2, [r7, #8]
 80010ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	687a      	ldr	r2, [r7, #4]
 80010f6:	60da      	str	r2, [r3, #12]
}
 80010f8:	bf00      	nop
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bc80      	pop	{r7}
 8001100:	4770      	bx	lr
	...

08001104 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001104:	b480      	push	{r7}
 8001106:	b08b      	sub	sp, #44	; 0x2c
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800110e:	2300      	movs	r3, #0
 8001110:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001112:	2300      	movs	r3, #0
 8001114:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001116:	e127      	b.n	8001368 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001118:	2201      	movs	r2, #1
 800111a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	69fa      	ldr	r2, [r7, #28]
 8001128:	4013      	ands	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	429a      	cmp	r2, r3
 8001132:	f040 8116 	bne.w	8001362 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	2b12      	cmp	r3, #18
 800113c:	d034      	beq.n	80011a8 <HAL_GPIO_Init+0xa4>
 800113e:	2b12      	cmp	r3, #18
 8001140:	d80d      	bhi.n	800115e <HAL_GPIO_Init+0x5a>
 8001142:	2b02      	cmp	r3, #2
 8001144:	d02b      	beq.n	800119e <HAL_GPIO_Init+0x9a>
 8001146:	2b02      	cmp	r3, #2
 8001148:	d804      	bhi.n	8001154 <HAL_GPIO_Init+0x50>
 800114a:	2b00      	cmp	r3, #0
 800114c:	d031      	beq.n	80011b2 <HAL_GPIO_Init+0xae>
 800114e:	2b01      	cmp	r3, #1
 8001150:	d01c      	beq.n	800118c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001152:	e048      	b.n	80011e6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001154:	2b03      	cmp	r3, #3
 8001156:	d043      	beq.n	80011e0 <HAL_GPIO_Init+0xdc>
 8001158:	2b11      	cmp	r3, #17
 800115a:	d01b      	beq.n	8001194 <HAL_GPIO_Init+0x90>
          break;
 800115c:	e043      	b.n	80011e6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800115e:	4a89      	ldr	r2, [pc, #548]	; (8001384 <HAL_GPIO_Init+0x280>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d026      	beq.n	80011b2 <HAL_GPIO_Init+0xae>
 8001164:	4a87      	ldr	r2, [pc, #540]	; (8001384 <HAL_GPIO_Init+0x280>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d806      	bhi.n	8001178 <HAL_GPIO_Init+0x74>
 800116a:	4a87      	ldr	r2, [pc, #540]	; (8001388 <HAL_GPIO_Init+0x284>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d020      	beq.n	80011b2 <HAL_GPIO_Init+0xae>
 8001170:	4a86      	ldr	r2, [pc, #536]	; (800138c <HAL_GPIO_Init+0x288>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d01d      	beq.n	80011b2 <HAL_GPIO_Init+0xae>
          break;
 8001176:	e036      	b.n	80011e6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001178:	4a85      	ldr	r2, [pc, #532]	; (8001390 <HAL_GPIO_Init+0x28c>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d019      	beq.n	80011b2 <HAL_GPIO_Init+0xae>
 800117e:	4a85      	ldr	r2, [pc, #532]	; (8001394 <HAL_GPIO_Init+0x290>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d016      	beq.n	80011b2 <HAL_GPIO_Init+0xae>
 8001184:	4a84      	ldr	r2, [pc, #528]	; (8001398 <HAL_GPIO_Init+0x294>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d013      	beq.n	80011b2 <HAL_GPIO_Init+0xae>
          break;
 800118a:	e02c      	b.n	80011e6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	623b      	str	r3, [r7, #32]
          break;
 8001192:	e028      	b.n	80011e6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	3304      	adds	r3, #4
 800119a:	623b      	str	r3, [r7, #32]
          break;
 800119c:	e023      	b.n	80011e6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	68db      	ldr	r3, [r3, #12]
 80011a2:	3308      	adds	r3, #8
 80011a4:	623b      	str	r3, [r7, #32]
          break;
 80011a6:	e01e      	b.n	80011e6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	330c      	adds	r3, #12
 80011ae:	623b      	str	r3, [r7, #32]
          break;
 80011b0:	e019      	b.n	80011e6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d102      	bne.n	80011c0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80011ba:	2304      	movs	r3, #4
 80011bc:	623b      	str	r3, [r7, #32]
          break;
 80011be:	e012      	b.n	80011e6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d105      	bne.n	80011d4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011c8:	2308      	movs	r3, #8
 80011ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	69fa      	ldr	r2, [r7, #28]
 80011d0:	611a      	str	r2, [r3, #16]
          break;
 80011d2:	e008      	b.n	80011e6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011d4:	2308      	movs	r3, #8
 80011d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	69fa      	ldr	r2, [r7, #28]
 80011dc:	615a      	str	r2, [r3, #20]
          break;
 80011de:	e002      	b.n	80011e6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80011e0:	2300      	movs	r3, #0
 80011e2:	623b      	str	r3, [r7, #32]
          break;
 80011e4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011e6:	69bb      	ldr	r3, [r7, #24]
 80011e8:	2bff      	cmp	r3, #255	; 0xff
 80011ea:	d801      	bhi.n	80011f0 <HAL_GPIO_Init+0xec>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	e001      	b.n	80011f4 <HAL_GPIO_Init+0xf0>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	3304      	adds	r3, #4
 80011f4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80011f6:	69bb      	ldr	r3, [r7, #24]
 80011f8:	2bff      	cmp	r3, #255	; 0xff
 80011fa:	d802      	bhi.n	8001202 <HAL_GPIO_Init+0xfe>
 80011fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	e002      	b.n	8001208 <HAL_GPIO_Init+0x104>
 8001202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001204:	3b08      	subs	r3, #8
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	210f      	movs	r1, #15
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	fa01 f303 	lsl.w	r3, r1, r3
 8001216:	43db      	mvns	r3, r3
 8001218:	401a      	ands	r2, r3
 800121a:	6a39      	ldr	r1, [r7, #32]
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	fa01 f303 	lsl.w	r3, r1, r3
 8001222:	431a      	orrs	r2, r3
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001230:	2b00      	cmp	r3, #0
 8001232:	f000 8096 	beq.w	8001362 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001236:	4b59      	ldr	r3, [pc, #356]	; (800139c <HAL_GPIO_Init+0x298>)
 8001238:	699b      	ldr	r3, [r3, #24]
 800123a:	4a58      	ldr	r2, [pc, #352]	; (800139c <HAL_GPIO_Init+0x298>)
 800123c:	f043 0301 	orr.w	r3, r3, #1
 8001240:	6193      	str	r3, [r2, #24]
 8001242:	4b56      	ldr	r3, [pc, #344]	; (800139c <HAL_GPIO_Init+0x298>)
 8001244:	699b      	ldr	r3, [r3, #24]
 8001246:	f003 0301 	and.w	r3, r3, #1
 800124a:	60bb      	str	r3, [r7, #8]
 800124c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800124e:	4a54      	ldr	r2, [pc, #336]	; (80013a0 <HAL_GPIO_Init+0x29c>)
 8001250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001252:	089b      	lsrs	r3, r3, #2
 8001254:	3302      	adds	r3, #2
 8001256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800125a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800125c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800125e:	f003 0303 	and.w	r3, r3, #3
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	220f      	movs	r2, #15
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	43db      	mvns	r3, r3
 800126c:	68fa      	ldr	r2, [r7, #12]
 800126e:	4013      	ands	r3, r2
 8001270:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a4b      	ldr	r2, [pc, #300]	; (80013a4 <HAL_GPIO_Init+0x2a0>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d013      	beq.n	80012a2 <HAL_GPIO_Init+0x19e>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a4a      	ldr	r2, [pc, #296]	; (80013a8 <HAL_GPIO_Init+0x2a4>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d00d      	beq.n	800129e <HAL_GPIO_Init+0x19a>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a49      	ldr	r2, [pc, #292]	; (80013ac <HAL_GPIO_Init+0x2a8>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d007      	beq.n	800129a <HAL_GPIO_Init+0x196>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a48      	ldr	r2, [pc, #288]	; (80013b0 <HAL_GPIO_Init+0x2ac>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d101      	bne.n	8001296 <HAL_GPIO_Init+0x192>
 8001292:	2303      	movs	r3, #3
 8001294:	e006      	b.n	80012a4 <HAL_GPIO_Init+0x1a0>
 8001296:	2304      	movs	r3, #4
 8001298:	e004      	b.n	80012a4 <HAL_GPIO_Init+0x1a0>
 800129a:	2302      	movs	r3, #2
 800129c:	e002      	b.n	80012a4 <HAL_GPIO_Init+0x1a0>
 800129e:	2301      	movs	r3, #1
 80012a0:	e000      	b.n	80012a4 <HAL_GPIO_Init+0x1a0>
 80012a2:	2300      	movs	r3, #0
 80012a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012a6:	f002 0203 	and.w	r2, r2, #3
 80012aa:	0092      	lsls	r2, r2, #2
 80012ac:	4093      	lsls	r3, r2
 80012ae:	68fa      	ldr	r2, [r7, #12]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80012b4:	493a      	ldr	r1, [pc, #232]	; (80013a0 <HAL_GPIO_Init+0x29c>)
 80012b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b8:	089b      	lsrs	r3, r3, #2
 80012ba:	3302      	adds	r3, #2
 80012bc:	68fa      	ldr	r2, [r7, #12]
 80012be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d006      	beq.n	80012dc <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80012ce:	4b39      	ldr	r3, [pc, #228]	; (80013b4 <HAL_GPIO_Init+0x2b0>)
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	4938      	ldr	r1, [pc, #224]	; (80013b4 <HAL_GPIO_Init+0x2b0>)
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	600b      	str	r3, [r1, #0]
 80012da:	e006      	b.n	80012ea <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80012dc:	4b35      	ldr	r3, [pc, #212]	; (80013b4 <HAL_GPIO_Init+0x2b0>)
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	43db      	mvns	r3, r3
 80012e4:	4933      	ldr	r1, [pc, #204]	; (80013b4 <HAL_GPIO_Init+0x2b0>)
 80012e6:	4013      	ands	r3, r2
 80012e8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d006      	beq.n	8001304 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012f6:	4b2f      	ldr	r3, [pc, #188]	; (80013b4 <HAL_GPIO_Init+0x2b0>)
 80012f8:	685a      	ldr	r2, [r3, #4]
 80012fa:	492e      	ldr	r1, [pc, #184]	; (80013b4 <HAL_GPIO_Init+0x2b0>)
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	4313      	orrs	r3, r2
 8001300:	604b      	str	r3, [r1, #4]
 8001302:	e006      	b.n	8001312 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001304:	4b2b      	ldr	r3, [pc, #172]	; (80013b4 <HAL_GPIO_Init+0x2b0>)
 8001306:	685a      	ldr	r2, [r3, #4]
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	43db      	mvns	r3, r3
 800130c:	4929      	ldr	r1, [pc, #164]	; (80013b4 <HAL_GPIO_Init+0x2b0>)
 800130e:	4013      	ands	r3, r2
 8001310:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d006      	beq.n	800132c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800131e:	4b25      	ldr	r3, [pc, #148]	; (80013b4 <HAL_GPIO_Init+0x2b0>)
 8001320:	689a      	ldr	r2, [r3, #8]
 8001322:	4924      	ldr	r1, [pc, #144]	; (80013b4 <HAL_GPIO_Init+0x2b0>)
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	4313      	orrs	r3, r2
 8001328:	608b      	str	r3, [r1, #8]
 800132a:	e006      	b.n	800133a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800132c:	4b21      	ldr	r3, [pc, #132]	; (80013b4 <HAL_GPIO_Init+0x2b0>)
 800132e:	689a      	ldr	r2, [r3, #8]
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	43db      	mvns	r3, r3
 8001334:	491f      	ldr	r1, [pc, #124]	; (80013b4 <HAL_GPIO_Init+0x2b0>)
 8001336:	4013      	ands	r3, r2
 8001338:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d006      	beq.n	8001354 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001346:	4b1b      	ldr	r3, [pc, #108]	; (80013b4 <HAL_GPIO_Init+0x2b0>)
 8001348:	68da      	ldr	r2, [r3, #12]
 800134a:	491a      	ldr	r1, [pc, #104]	; (80013b4 <HAL_GPIO_Init+0x2b0>)
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	4313      	orrs	r3, r2
 8001350:	60cb      	str	r3, [r1, #12]
 8001352:	e006      	b.n	8001362 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001354:	4b17      	ldr	r3, [pc, #92]	; (80013b4 <HAL_GPIO_Init+0x2b0>)
 8001356:	68da      	ldr	r2, [r3, #12]
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	43db      	mvns	r3, r3
 800135c:	4915      	ldr	r1, [pc, #84]	; (80013b4 <HAL_GPIO_Init+0x2b0>)
 800135e:	4013      	ands	r3, r2
 8001360:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001364:	3301      	adds	r3, #1
 8001366:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136e:	fa22 f303 	lsr.w	r3, r2, r3
 8001372:	2b00      	cmp	r3, #0
 8001374:	f47f aed0 	bne.w	8001118 <HAL_GPIO_Init+0x14>
  }
}
 8001378:	bf00      	nop
 800137a:	372c      	adds	r7, #44	; 0x2c
 800137c:	46bd      	mov	sp, r7
 800137e:	bc80      	pop	{r7}
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	10210000 	.word	0x10210000
 8001388:	10110000 	.word	0x10110000
 800138c:	10120000 	.word	0x10120000
 8001390:	10310000 	.word	0x10310000
 8001394:	10320000 	.word	0x10320000
 8001398:	10220000 	.word	0x10220000
 800139c:	40021000 	.word	0x40021000
 80013a0:	40010000 	.word	0x40010000
 80013a4:	40010800 	.word	0x40010800
 80013a8:	40010c00 	.word	0x40010c00
 80013ac:	40011000 	.word	0x40011000
 80013b0:	40011400 	.word	0x40011400
 80013b4:	40010400 	.word	0x40010400

080013b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	460b      	mov	r3, r1
 80013c2:	807b      	strh	r3, [r7, #2]
 80013c4:	4613      	mov	r3, r2
 80013c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013c8:	787b      	ldrb	r3, [r7, #1]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d003      	beq.n	80013d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013ce:	887a      	ldrh	r2, [r7, #2]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80013d4:	e003      	b.n	80013de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80013d6:	887b      	ldrh	r3, [r7, #2]
 80013d8:	041a      	lsls	r2, r3, #16
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	611a      	str	r2, [r3, #16]
}
 80013de:	bf00      	nop
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bc80      	pop	{r7}
 80013e6:	4770      	bx	lr

080013e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b086      	sub	sp, #24
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d101      	bne.n	80013fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e26c      	b.n	80018d4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0301 	and.w	r3, r3, #1
 8001402:	2b00      	cmp	r3, #0
 8001404:	f000 8087 	beq.w	8001516 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001408:	4b92      	ldr	r3, [pc, #584]	; (8001654 <HAL_RCC_OscConfig+0x26c>)
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f003 030c 	and.w	r3, r3, #12
 8001410:	2b04      	cmp	r3, #4
 8001412:	d00c      	beq.n	800142e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001414:	4b8f      	ldr	r3, [pc, #572]	; (8001654 <HAL_RCC_OscConfig+0x26c>)
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f003 030c 	and.w	r3, r3, #12
 800141c:	2b08      	cmp	r3, #8
 800141e:	d112      	bne.n	8001446 <HAL_RCC_OscConfig+0x5e>
 8001420:	4b8c      	ldr	r3, [pc, #560]	; (8001654 <HAL_RCC_OscConfig+0x26c>)
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001428:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800142c:	d10b      	bne.n	8001446 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800142e:	4b89      	ldr	r3, [pc, #548]	; (8001654 <HAL_RCC_OscConfig+0x26c>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d06c      	beq.n	8001514 <HAL_RCC_OscConfig+0x12c>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d168      	bne.n	8001514 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e246      	b.n	80018d4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800144e:	d106      	bne.n	800145e <HAL_RCC_OscConfig+0x76>
 8001450:	4b80      	ldr	r3, [pc, #512]	; (8001654 <HAL_RCC_OscConfig+0x26c>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a7f      	ldr	r2, [pc, #508]	; (8001654 <HAL_RCC_OscConfig+0x26c>)
 8001456:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800145a:	6013      	str	r3, [r2, #0]
 800145c:	e02e      	b.n	80014bc <HAL_RCC_OscConfig+0xd4>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d10c      	bne.n	8001480 <HAL_RCC_OscConfig+0x98>
 8001466:	4b7b      	ldr	r3, [pc, #492]	; (8001654 <HAL_RCC_OscConfig+0x26c>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a7a      	ldr	r2, [pc, #488]	; (8001654 <HAL_RCC_OscConfig+0x26c>)
 800146c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001470:	6013      	str	r3, [r2, #0]
 8001472:	4b78      	ldr	r3, [pc, #480]	; (8001654 <HAL_RCC_OscConfig+0x26c>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a77      	ldr	r2, [pc, #476]	; (8001654 <HAL_RCC_OscConfig+0x26c>)
 8001478:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800147c:	6013      	str	r3, [r2, #0]
 800147e:	e01d      	b.n	80014bc <HAL_RCC_OscConfig+0xd4>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001488:	d10c      	bne.n	80014a4 <HAL_RCC_OscConfig+0xbc>
 800148a:	4b72      	ldr	r3, [pc, #456]	; (8001654 <HAL_RCC_OscConfig+0x26c>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a71      	ldr	r2, [pc, #452]	; (8001654 <HAL_RCC_OscConfig+0x26c>)
 8001490:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001494:	6013      	str	r3, [r2, #0]
 8001496:	4b6f      	ldr	r3, [pc, #444]	; (8001654 <HAL_RCC_OscConfig+0x26c>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a6e      	ldr	r2, [pc, #440]	; (8001654 <HAL_RCC_OscConfig+0x26c>)
 800149c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014a0:	6013      	str	r3, [r2, #0]
 80014a2:	e00b      	b.n	80014bc <HAL_RCC_OscConfig+0xd4>
 80014a4:	4b6b      	ldr	r3, [pc, #428]	; (8001654 <HAL_RCC_OscConfig+0x26c>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a6a      	ldr	r2, [pc, #424]	; (8001654 <HAL_RCC_OscConfig+0x26c>)
 80014aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014ae:	6013      	str	r3, [r2, #0]
 80014b0:	4b68      	ldr	r3, [pc, #416]	; (8001654 <HAL_RCC_OscConfig+0x26c>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a67      	ldr	r2, [pc, #412]	; (8001654 <HAL_RCC_OscConfig+0x26c>)
 80014b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014ba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d013      	beq.n	80014ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c4:	f7ff fa80 	bl	80009c8 <HAL_GetTick>
 80014c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ca:	e008      	b.n	80014de <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014cc:	f7ff fa7c 	bl	80009c8 <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	2b64      	cmp	r3, #100	; 0x64
 80014d8:	d901      	bls.n	80014de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e1fa      	b.n	80018d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014de:	4b5d      	ldr	r3, [pc, #372]	; (8001654 <HAL_RCC_OscConfig+0x26c>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d0f0      	beq.n	80014cc <HAL_RCC_OscConfig+0xe4>
 80014ea:	e014      	b.n	8001516 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ec:	f7ff fa6c 	bl	80009c8 <HAL_GetTick>
 80014f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014f2:	e008      	b.n	8001506 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014f4:	f7ff fa68 	bl	80009c8 <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	2b64      	cmp	r3, #100	; 0x64
 8001500:	d901      	bls.n	8001506 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e1e6      	b.n	80018d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001506:	4b53      	ldr	r3, [pc, #332]	; (8001654 <HAL_RCC_OscConfig+0x26c>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d1f0      	bne.n	80014f4 <HAL_RCC_OscConfig+0x10c>
 8001512:	e000      	b.n	8001516 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001514:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	2b00      	cmp	r3, #0
 8001520:	d063      	beq.n	80015ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001522:	4b4c      	ldr	r3, [pc, #304]	; (8001654 <HAL_RCC_OscConfig+0x26c>)
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f003 030c 	and.w	r3, r3, #12
 800152a:	2b00      	cmp	r3, #0
 800152c:	d00b      	beq.n	8001546 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800152e:	4b49      	ldr	r3, [pc, #292]	; (8001654 <HAL_RCC_OscConfig+0x26c>)
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f003 030c 	and.w	r3, r3, #12
 8001536:	2b08      	cmp	r3, #8
 8001538:	d11c      	bne.n	8001574 <HAL_RCC_OscConfig+0x18c>
 800153a:	4b46      	ldr	r3, [pc, #280]	; (8001654 <HAL_RCC_OscConfig+0x26c>)
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d116      	bne.n	8001574 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001546:	4b43      	ldr	r3, [pc, #268]	; (8001654 <HAL_RCC_OscConfig+0x26c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	2b00      	cmp	r3, #0
 8001550:	d005      	beq.n	800155e <HAL_RCC_OscConfig+0x176>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	691b      	ldr	r3, [r3, #16]
 8001556:	2b01      	cmp	r3, #1
 8001558:	d001      	beq.n	800155e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e1ba      	b.n	80018d4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800155e:	4b3d      	ldr	r3, [pc, #244]	; (8001654 <HAL_RCC_OscConfig+0x26c>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	695b      	ldr	r3, [r3, #20]
 800156a:	00db      	lsls	r3, r3, #3
 800156c:	4939      	ldr	r1, [pc, #228]	; (8001654 <HAL_RCC_OscConfig+0x26c>)
 800156e:	4313      	orrs	r3, r2
 8001570:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001572:	e03a      	b.n	80015ea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	691b      	ldr	r3, [r3, #16]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d020      	beq.n	80015be <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800157c:	4b36      	ldr	r3, [pc, #216]	; (8001658 <HAL_RCC_OscConfig+0x270>)
 800157e:	2201      	movs	r2, #1
 8001580:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001582:	f7ff fa21 	bl	80009c8 <HAL_GetTick>
 8001586:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001588:	e008      	b.n	800159c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800158a:	f7ff fa1d 	bl	80009c8 <HAL_GetTick>
 800158e:	4602      	mov	r2, r0
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	2b02      	cmp	r3, #2
 8001596:	d901      	bls.n	800159c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e19b      	b.n	80018d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800159c:	4b2d      	ldr	r3, [pc, #180]	; (8001654 <HAL_RCC_OscConfig+0x26c>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0302 	and.w	r3, r3, #2
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d0f0      	beq.n	800158a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015a8:	4b2a      	ldr	r3, [pc, #168]	; (8001654 <HAL_RCC_OscConfig+0x26c>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	695b      	ldr	r3, [r3, #20]
 80015b4:	00db      	lsls	r3, r3, #3
 80015b6:	4927      	ldr	r1, [pc, #156]	; (8001654 <HAL_RCC_OscConfig+0x26c>)
 80015b8:	4313      	orrs	r3, r2
 80015ba:	600b      	str	r3, [r1, #0]
 80015bc:	e015      	b.n	80015ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015be:	4b26      	ldr	r3, [pc, #152]	; (8001658 <HAL_RCC_OscConfig+0x270>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c4:	f7ff fa00 	bl	80009c8 <HAL_GetTick>
 80015c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015ca:	e008      	b.n	80015de <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015cc:	f7ff f9fc 	bl	80009c8 <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d901      	bls.n	80015de <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80015da:	2303      	movs	r3, #3
 80015dc:	e17a      	b.n	80018d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015de:	4b1d      	ldr	r3, [pc, #116]	; (8001654 <HAL_RCC_OscConfig+0x26c>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0302 	and.w	r3, r3, #2
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d1f0      	bne.n	80015cc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0308 	and.w	r3, r3, #8
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d03a      	beq.n	800166c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	699b      	ldr	r3, [r3, #24]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d019      	beq.n	8001632 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015fe:	4b17      	ldr	r3, [pc, #92]	; (800165c <HAL_RCC_OscConfig+0x274>)
 8001600:	2201      	movs	r2, #1
 8001602:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001604:	f7ff f9e0 	bl	80009c8 <HAL_GetTick>
 8001608:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800160a:	e008      	b.n	800161e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800160c:	f7ff f9dc 	bl	80009c8 <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	2b02      	cmp	r3, #2
 8001618:	d901      	bls.n	800161e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e15a      	b.n	80018d4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800161e:	4b0d      	ldr	r3, [pc, #52]	; (8001654 <HAL_RCC_OscConfig+0x26c>)
 8001620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001622:	f003 0302 	and.w	r3, r3, #2
 8001626:	2b00      	cmp	r3, #0
 8001628:	d0f0      	beq.n	800160c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800162a:	2001      	movs	r0, #1
 800162c:	f000 fada 	bl	8001be4 <RCC_Delay>
 8001630:	e01c      	b.n	800166c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001632:	4b0a      	ldr	r3, [pc, #40]	; (800165c <HAL_RCC_OscConfig+0x274>)
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001638:	f7ff f9c6 	bl	80009c8 <HAL_GetTick>
 800163c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800163e:	e00f      	b.n	8001660 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001640:	f7ff f9c2 	bl	80009c8 <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	2b02      	cmp	r3, #2
 800164c:	d908      	bls.n	8001660 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e140      	b.n	80018d4 <HAL_RCC_OscConfig+0x4ec>
 8001652:	bf00      	nop
 8001654:	40021000 	.word	0x40021000
 8001658:	42420000 	.word	0x42420000
 800165c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001660:	4b9e      	ldr	r3, [pc, #632]	; (80018dc <HAL_RCC_OscConfig+0x4f4>)
 8001662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001664:	f003 0302 	and.w	r3, r3, #2
 8001668:	2b00      	cmp	r3, #0
 800166a:	d1e9      	bne.n	8001640 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0304 	and.w	r3, r3, #4
 8001674:	2b00      	cmp	r3, #0
 8001676:	f000 80a6 	beq.w	80017c6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800167a:	2300      	movs	r3, #0
 800167c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800167e:	4b97      	ldr	r3, [pc, #604]	; (80018dc <HAL_RCC_OscConfig+0x4f4>)
 8001680:	69db      	ldr	r3, [r3, #28]
 8001682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d10d      	bne.n	80016a6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800168a:	4b94      	ldr	r3, [pc, #592]	; (80018dc <HAL_RCC_OscConfig+0x4f4>)
 800168c:	69db      	ldr	r3, [r3, #28]
 800168e:	4a93      	ldr	r2, [pc, #588]	; (80018dc <HAL_RCC_OscConfig+0x4f4>)
 8001690:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001694:	61d3      	str	r3, [r2, #28]
 8001696:	4b91      	ldr	r3, [pc, #580]	; (80018dc <HAL_RCC_OscConfig+0x4f4>)
 8001698:	69db      	ldr	r3, [r3, #28]
 800169a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800169e:	60bb      	str	r3, [r7, #8]
 80016a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016a2:	2301      	movs	r3, #1
 80016a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016a6:	4b8e      	ldr	r3, [pc, #568]	; (80018e0 <HAL_RCC_OscConfig+0x4f8>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d118      	bne.n	80016e4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016b2:	4b8b      	ldr	r3, [pc, #556]	; (80018e0 <HAL_RCC_OscConfig+0x4f8>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a8a      	ldr	r2, [pc, #552]	; (80018e0 <HAL_RCC_OscConfig+0x4f8>)
 80016b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016be:	f7ff f983 	bl	80009c8 <HAL_GetTick>
 80016c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016c4:	e008      	b.n	80016d8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016c6:	f7ff f97f 	bl	80009c8 <HAL_GetTick>
 80016ca:	4602      	mov	r2, r0
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	2b64      	cmp	r3, #100	; 0x64
 80016d2:	d901      	bls.n	80016d8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80016d4:	2303      	movs	r3, #3
 80016d6:	e0fd      	b.n	80018d4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016d8:	4b81      	ldr	r3, [pc, #516]	; (80018e0 <HAL_RCC_OscConfig+0x4f8>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d0f0      	beq.n	80016c6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d106      	bne.n	80016fa <HAL_RCC_OscConfig+0x312>
 80016ec:	4b7b      	ldr	r3, [pc, #492]	; (80018dc <HAL_RCC_OscConfig+0x4f4>)
 80016ee:	6a1b      	ldr	r3, [r3, #32]
 80016f0:	4a7a      	ldr	r2, [pc, #488]	; (80018dc <HAL_RCC_OscConfig+0x4f4>)
 80016f2:	f043 0301 	orr.w	r3, r3, #1
 80016f6:	6213      	str	r3, [r2, #32]
 80016f8:	e02d      	b.n	8001756 <HAL_RCC_OscConfig+0x36e>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	68db      	ldr	r3, [r3, #12]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d10c      	bne.n	800171c <HAL_RCC_OscConfig+0x334>
 8001702:	4b76      	ldr	r3, [pc, #472]	; (80018dc <HAL_RCC_OscConfig+0x4f4>)
 8001704:	6a1b      	ldr	r3, [r3, #32]
 8001706:	4a75      	ldr	r2, [pc, #468]	; (80018dc <HAL_RCC_OscConfig+0x4f4>)
 8001708:	f023 0301 	bic.w	r3, r3, #1
 800170c:	6213      	str	r3, [r2, #32]
 800170e:	4b73      	ldr	r3, [pc, #460]	; (80018dc <HAL_RCC_OscConfig+0x4f4>)
 8001710:	6a1b      	ldr	r3, [r3, #32]
 8001712:	4a72      	ldr	r2, [pc, #456]	; (80018dc <HAL_RCC_OscConfig+0x4f4>)
 8001714:	f023 0304 	bic.w	r3, r3, #4
 8001718:	6213      	str	r3, [r2, #32]
 800171a:	e01c      	b.n	8001756 <HAL_RCC_OscConfig+0x36e>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	2b05      	cmp	r3, #5
 8001722:	d10c      	bne.n	800173e <HAL_RCC_OscConfig+0x356>
 8001724:	4b6d      	ldr	r3, [pc, #436]	; (80018dc <HAL_RCC_OscConfig+0x4f4>)
 8001726:	6a1b      	ldr	r3, [r3, #32]
 8001728:	4a6c      	ldr	r2, [pc, #432]	; (80018dc <HAL_RCC_OscConfig+0x4f4>)
 800172a:	f043 0304 	orr.w	r3, r3, #4
 800172e:	6213      	str	r3, [r2, #32]
 8001730:	4b6a      	ldr	r3, [pc, #424]	; (80018dc <HAL_RCC_OscConfig+0x4f4>)
 8001732:	6a1b      	ldr	r3, [r3, #32]
 8001734:	4a69      	ldr	r2, [pc, #420]	; (80018dc <HAL_RCC_OscConfig+0x4f4>)
 8001736:	f043 0301 	orr.w	r3, r3, #1
 800173a:	6213      	str	r3, [r2, #32]
 800173c:	e00b      	b.n	8001756 <HAL_RCC_OscConfig+0x36e>
 800173e:	4b67      	ldr	r3, [pc, #412]	; (80018dc <HAL_RCC_OscConfig+0x4f4>)
 8001740:	6a1b      	ldr	r3, [r3, #32]
 8001742:	4a66      	ldr	r2, [pc, #408]	; (80018dc <HAL_RCC_OscConfig+0x4f4>)
 8001744:	f023 0301 	bic.w	r3, r3, #1
 8001748:	6213      	str	r3, [r2, #32]
 800174a:	4b64      	ldr	r3, [pc, #400]	; (80018dc <HAL_RCC_OscConfig+0x4f4>)
 800174c:	6a1b      	ldr	r3, [r3, #32]
 800174e:	4a63      	ldr	r2, [pc, #396]	; (80018dc <HAL_RCC_OscConfig+0x4f4>)
 8001750:	f023 0304 	bic.w	r3, r3, #4
 8001754:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	68db      	ldr	r3, [r3, #12]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d015      	beq.n	800178a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800175e:	f7ff f933 	bl	80009c8 <HAL_GetTick>
 8001762:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001764:	e00a      	b.n	800177c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001766:	f7ff f92f 	bl	80009c8 <HAL_GetTick>
 800176a:	4602      	mov	r2, r0
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	f241 3288 	movw	r2, #5000	; 0x1388
 8001774:	4293      	cmp	r3, r2
 8001776:	d901      	bls.n	800177c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	e0ab      	b.n	80018d4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800177c:	4b57      	ldr	r3, [pc, #348]	; (80018dc <HAL_RCC_OscConfig+0x4f4>)
 800177e:	6a1b      	ldr	r3, [r3, #32]
 8001780:	f003 0302 	and.w	r3, r3, #2
 8001784:	2b00      	cmp	r3, #0
 8001786:	d0ee      	beq.n	8001766 <HAL_RCC_OscConfig+0x37e>
 8001788:	e014      	b.n	80017b4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800178a:	f7ff f91d 	bl	80009c8 <HAL_GetTick>
 800178e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001790:	e00a      	b.n	80017a8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001792:	f7ff f919 	bl	80009c8 <HAL_GetTick>
 8001796:	4602      	mov	r2, r0
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	f241 3288 	movw	r2, #5000	; 0x1388
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d901      	bls.n	80017a8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	e095      	b.n	80018d4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017a8:	4b4c      	ldr	r3, [pc, #304]	; (80018dc <HAL_RCC_OscConfig+0x4f4>)
 80017aa:	6a1b      	ldr	r3, [r3, #32]
 80017ac:	f003 0302 	and.w	r3, r3, #2
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d1ee      	bne.n	8001792 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80017b4:	7dfb      	ldrb	r3, [r7, #23]
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d105      	bne.n	80017c6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017ba:	4b48      	ldr	r3, [pc, #288]	; (80018dc <HAL_RCC_OscConfig+0x4f4>)
 80017bc:	69db      	ldr	r3, [r3, #28]
 80017be:	4a47      	ldr	r2, [pc, #284]	; (80018dc <HAL_RCC_OscConfig+0x4f4>)
 80017c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017c4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	69db      	ldr	r3, [r3, #28]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	f000 8081 	beq.w	80018d2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017d0:	4b42      	ldr	r3, [pc, #264]	; (80018dc <HAL_RCC_OscConfig+0x4f4>)
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f003 030c 	and.w	r3, r3, #12
 80017d8:	2b08      	cmp	r3, #8
 80017da:	d061      	beq.n	80018a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	69db      	ldr	r3, [r3, #28]
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d146      	bne.n	8001872 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017e4:	4b3f      	ldr	r3, [pc, #252]	; (80018e4 <HAL_RCC_OscConfig+0x4fc>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ea:	f7ff f8ed 	bl	80009c8 <HAL_GetTick>
 80017ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017f0:	e008      	b.n	8001804 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017f2:	f7ff f8e9 	bl	80009c8 <HAL_GetTick>
 80017f6:	4602      	mov	r2, r0
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d901      	bls.n	8001804 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e067      	b.n	80018d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001804:	4b35      	ldr	r3, [pc, #212]	; (80018dc <HAL_RCC_OscConfig+0x4f4>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800180c:	2b00      	cmp	r3, #0
 800180e:	d1f0      	bne.n	80017f2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6a1b      	ldr	r3, [r3, #32]
 8001814:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001818:	d108      	bne.n	800182c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800181a:	4b30      	ldr	r3, [pc, #192]	; (80018dc <HAL_RCC_OscConfig+0x4f4>)
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	492d      	ldr	r1, [pc, #180]	; (80018dc <HAL_RCC_OscConfig+0x4f4>)
 8001828:	4313      	orrs	r3, r2
 800182a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800182c:	4b2b      	ldr	r3, [pc, #172]	; (80018dc <HAL_RCC_OscConfig+0x4f4>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6a19      	ldr	r1, [r3, #32]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183c:	430b      	orrs	r3, r1
 800183e:	4927      	ldr	r1, [pc, #156]	; (80018dc <HAL_RCC_OscConfig+0x4f4>)
 8001840:	4313      	orrs	r3, r2
 8001842:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001844:	4b27      	ldr	r3, [pc, #156]	; (80018e4 <HAL_RCC_OscConfig+0x4fc>)
 8001846:	2201      	movs	r2, #1
 8001848:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800184a:	f7ff f8bd 	bl	80009c8 <HAL_GetTick>
 800184e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001850:	e008      	b.n	8001864 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001852:	f7ff f8b9 	bl	80009c8 <HAL_GetTick>
 8001856:	4602      	mov	r2, r0
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	2b02      	cmp	r3, #2
 800185e:	d901      	bls.n	8001864 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e037      	b.n	80018d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001864:	4b1d      	ldr	r3, [pc, #116]	; (80018dc <HAL_RCC_OscConfig+0x4f4>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d0f0      	beq.n	8001852 <HAL_RCC_OscConfig+0x46a>
 8001870:	e02f      	b.n	80018d2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001872:	4b1c      	ldr	r3, [pc, #112]	; (80018e4 <HAL_RCC_OscConfig+0x4fc>)
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001878:	f7ff f8a6 	bl	80009c8 <HAL_GetTick>
 800187c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800187e:	e008      	b.n	8001892 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001880:	f7ff f8a2 	bl	80009c8 <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b02      	cmp	r3, #2
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e020      	b.n	80018d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001892:	4b12      	ldr	r3, [pc, #72]	; (80018dc <HAL_RCC_OscConfig+0x4f4>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d1f0      	bne.n	8001880 <HAL_RCC_OscConfig+0x498>
 800189e:	e018      	b.n	80018d2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	69db      	ldr	r3, [r3, #28]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d101      	bne.n	80018ac <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e013      	b.n	80018d4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80018ac:	4b0b      	ldr	r3, [pc, #44]	; (80018dc <HAL_RCC_OscConfig+0x4f4>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6a1b      	ldr	r3, [r3, #32]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d106      	bne.n	80018ce <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d001      	beq.n	80018d2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e000      	b.n	80018d4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80018d2:	2300      	movs	r3, #0
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3718      	adds	r7, #24
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	40021000 	.word	0x40021000
 80018e0:	40007000 	.word	0x40007000
 80018e4:	42420060 	.word	0x42420060

080018e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d101      	bne.n	80018fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e0d0      	b.n	8001a9e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018fc:	4b6a      	ldr	r3, [pc, #424]	; (8001aa8 <HAL_RCC_ClockConfig+0x1c0>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0307 	and.w	r3, r3, #7
 8001904:	683a      	ldr	r2, [r7, #0]
 8001906:	429a      	cmp	r2, r3
 8001908:	d910      	bls.n	800192c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800190a:	4b67      	ldr	r3, [pc, #412]	; (8001aa8 <HAL_RCC_ClockConfig+0x1c0>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f023 0207 	bic.w	r2, r3, #7
 8001912:	4965      	ldr	r1, [pc, #404]	; (8001aa8 <HAL_RCC_ClockConfig+0x1c0>)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	4313      	orrs	r3, r2
 8001918:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800191a:	4b63      	ldr	r3, [pc, #396]	; (8001aa8 <HAL_RCC_ClockConfig+0x1c0>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0307 	and.w	r3, r3, #7
 8001922:	683a      	ldr	r2, [r7, #0]
 8001924:	429a      	cmp	r2, r3
 8001926:	d001      	beq.n	800192c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e0b8      	b.n	8001a9e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0302 	and.w	r3, r3, #2
 8001934:	2b00      	cmp	r3, #0
 8001936:	d020      	beq.n	800197a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0304 	and.w	r3, r3, #4
 8001940:	2b00      	cmp	r3, #0
 8001942:	d005      	beq.n	8001950 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001944:	4b59      	ldr	r3, [pc, #356]	; (8001aac <HAL_RCC_ClockConfig+0x1c4>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	4a58      	ldr	r2, [pc, #352]	; (8001aac <HAL_RCC_ClockConfig+0x1c4>)
 800194a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800194e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0308 	and.w	r3, r3, #8
 8001958:	2b00      	cmp	r3, #0
 800195a:	d005      	beq.n	8001968 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800195c:	4b53      	ldr	r3, [pc, #332]	; (8001aac <HAL_RCC_ClockConfig+0x1c4>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	4a52      	ldr	r2, [pc, #328]	; (8001aac <HAL_RCC_ClockConfig+0x1c4>)
 8001962:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001966:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001968:	4b50      	ldr	r3, [pc, #320]	; (8001aac <HAL_RCC_ClockConfig+0x1c4>)
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	494d      	ldr	r1, [pc, #308]	; (8001aac <HAL_RCC_ClockConfig+0x1c4>)
 8001976:	4313      	orrs	r3, r2
 8001978:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	2b00      	cmp	r3, #0
 8001984:	d040      	beq.n	8001a08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	2b01      	cmp	r3, #1
 800198c:	d107      	bne.n	800199e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800198e:	4b47      	ldr	r3, [pc, #284]	; (8001aac <HAL_RCC_ClockConfig+0x1c4>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d115      	bne.n	80019c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e07f      	b.n	8001a9e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d107      	bne.n	80019b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019a6:	4b41      	ldr	r3, [pc, #260]	; (8001aac <HAL_RCC_ClockConfig+0x1c4>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d109      	bne.n	80019c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e073      	b.n	8001a9e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019b6:	4b3d      	ldr	r3, [pc, #244]	; (8001aac <HAL_RCC_ClockConfig+0x1c4>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d101      	bne.n	80019c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e06b      	b.n	8001a9e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019c6:	4b39      	ldr	r3, [pc, #228]	; (8001aac <HAL_RCC_ClockConfig+0x1c4>)
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f023 0203 	bic.w	r2, r3, #3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	4936      	ldr	r1, [pc, #216]	; (8001aac <HAL_RCC_ClockConfig+0x1c4>)
 80019d4:	4313      	orrs	r3, r2
 80019d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019d8:	f7fe fff6 	bl	80009c8 <HAL_GetTick>
 80019dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019de:	e00a      	b.n	80019f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019e0:	f7fe fff2 	bl	80009c8 <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d901      	bls.n	80019f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e053      	b.n	8001a9e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019f6:	4b2d      	ldr	r3, [pc, #180]	; (8001aac <HAL_RCC_ClockConfig+0x1c4>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f003 020c 	and.w	r2, r3, #12
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d1eb      	bne.n	80019e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a08:	4b27      	ldr	r3, [pc, #156]	; (8001aa8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0307 	and.w	r3, r3, #7
 8001a10:	683a      	ldr	r2, [r7, #0]
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d210      	bcs.n	8001a38 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a16:	4b24      	ldr	r3, [pc, #144]	; (8001aa8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f023 0207 	bic.w	r2, r3, #7
 8001a1e:	4922      	ldr	r1, [pc, #136]	; (8001aa8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a26:	4b20      	ldr	r3, [pc, #128]	; (8001aa8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0307 	and.w	r3, r3, #7
 8001a2e:	683a      	ldr	r2, [r7, #0]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d001      	beq.n	8001a38 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e032      	b.n	8001a9e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0304 	and.w	r3, r3, #4
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d008      	beq.n	8001a56 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a44:	4b19      	ldr	r3, [pc, #100]	; (8001aac <HAL_RCC_ClockConfig+0x1c4>)
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	4916      	ldr	r1, [pc, #88]	; (8001aac <HAL_RCC_ClockConfig+0x1c4>)
 8001a52:	4313      	orrs	r3, r2
 8001a54:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0308 	and.w	r3, r3, #8
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d009      	beq.n	8001a76 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a62:	4b12      	ldr	r3, [pc, #72]	; (8001aac <HAL_RCC_ClockConfig+0x1c4>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	691b      	ldr	r3, [r3, #16]
 8001a6e:	00db      	lsls	r3, r3, #3
 8001a70:	490e      	ldr	r1, [pc, #56]	; (8001aac <HAL_RCC_ClockConfig+0x1c4>)
 8001a72:	4313      	orrs	r3, r2
 8001a74:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a76:	f000 f821 	bl	8001abc <HAL_RCC_GetSysClockFreq>
 8001a7a:	4601      	mov	r1, r0
 8001a7c:	4b0b      	ldr	r3, [pc, #44]	; (8001aac <HAL_RCC_ClockConfig+0x1c4>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	091b      	lsrs	r3, r3, #4
 8001a82:	f003 030f 	and.w	r3, r3, #15
 8001a86:	4a0a      	ldr	r2, [pc, #40]	; (8001ab0 <HAL_RCC_ClockConfig+0x1c8>)
 8001a88:	5cd3      	ldrb	r3, [r2, r3]
 8001a8a:	fa21 f303 	lsr.w	r3, r1, r3
 8001a8e:	4a09      	ldr	r2, [pc, #36]	; (8001ab4 <HAL_RCC_ClockConfig+0x1cc>)
 8001a90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a92:	4b09      	ldr	r3, [pc, #36]	; (8001ab8 <HAL_RCC_ClockConfig+0x1d0>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7fe ff54 	bl	8000944 <HAL_InitTick>

  return HAL_OK;
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3710      	adds	r7, #16
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40022000 	.word	0x40022000
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	08002f38 	.word	0x08002f38
 8001ab4:	20000004 	.word	0x20000004
 8001ab8:	20000008 	.word	0x20000008

08001abc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001abc:	b490      	push	{r4, r7}
 8001abe:	b08a      	sub	sp, #40	; 0x28
 8001ac0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001ac2:	4b2a      	ldr	r3, [pc, #168]	; (8001b6c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001ac4:	1d3c      	adds	r4, r7, #4
 8001ac6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ac8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001acc:	4b28      	ldr	r3, [pc, #160]	; (8001b70 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ace:	881b      	ldrh	r3, [r3, #0]
 8001ad0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	61fb      	str	r3, [r7, #28]
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	61bb      	str	r3, [r7, #24]
 8001ada:	2300      	movs	r3, #0
 8001adc:	627b      	str	r3, [r7, #36]	; 0x24
 8001ade:	2300      	movs	r3, #0
 8001ae0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ae6:	4b23      	ldr	r3, [pc, #140]	; (8001b74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	f003 030c 	and.w	r3, r3, #12
 8001af2:	2b04      	cmp	r3, #4
 8001af4:	d002      	beq.n	8001afc <HAL_RCC_GetSysClockFreq+0x40>
 8001af6:	2b08      	cmp	r3, #8
 8001af8:	d003      	beq.n	8001b02 <HAL_RCC_GetSysClockFreq+0x46>
 8001afa:	e02d      	b.n	8001b58 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001afc:	4b1e      	ldr	r3, [pc, #120]	; (8001b78 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001afe:	623b      	str	r3, [r7, #32]
      break;
 8001b00:	e02d      	b.n	8001b5e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	0c9b      	lsrs	r3, r3, #18
 8001b06:	f003 030f 	and.w	r3, r3, #15
 8001b0a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001b0e:	4413      	add	r3, r2
 8001b10:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001b14:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d013      	beq.n	8001b48 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b20:	4b14      	ldr	r3, [pc, #80]	; (8001b74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	0c5b      	lsrs	r3, r3, #17
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001b2e:	4413      	add	r3, r2
 8001b30:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001b34:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	4a0f      	ldr	r2, [pc, #60]	; (8001b78 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b3a:	fb02 f203 	mul.w	r2, r2, r3
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b44:	627b      	str	r3, [r7, #36]	; 0x24
 8001b46:	e004      	b.n	8001b52 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	4a0c      	ldr	r2, [pc, #48]	; (8001b7c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001b4c:	fb02 f303 	mul.w	r3, r2, r3
 8001b50:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b54:	623b      	str	r3, [r7, #32]
      break;
 8001b56:	e002      	b.n	8001b5e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b58:	4b07      	ldr	r3, [pc, #28]	; (8001b78 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b5a:	623b      	str	r3, [r7, #32]
      break;
 8001b5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b5e:	6a3b      	ldr	r3, [r7, #32]
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3728      	adds	r7, #40	; 0x28
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bc90      	pop	{r4, r7}
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	08002f24 	.word	0x08002f24
 8001b70:	08002f34 	.word	0x08002f34
 8001b74:	40021000 	.word	0x40021000
 8001b78:	007a1200 	.word	0x007a1200
 8001b7c:	003d0900 	.word	0x003d0900

08001b80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b84:	4b02      	ldr	r3, [pc, #8]	; (8001b90 <HAL_RCC_GetHCLKFreq+0x10>)
 8001b86:	681b      	ldr	r3, [r3, #0]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bc80      	pop	{r7}
 8001b8e:	4770      	bx	lr
 8001b90:	20000004 	.word	0x20000004

08001b94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b98:	f7ff fff2 	bl	8001b80 <HAL_RCC_GetHCLKFreq>
 8001b9c:	4601      	mov	r1, r0
 8001b9e:	4b05      	ldr	r3, [pc, #20]	; (8001bb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	0a1b      	lsrs	r3, r3, #8
 8001ba4:	f003 0307 	and.w	r3, r3, #7
 8001ba8:	4a03      	ldr	r2, [pc, #12]	; (8001bb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001baa:	5cd3      	ldrb	r3, [r2, r3]
 8001bac:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	08002f48 	.word	0x08002f48

08001bbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001bc0:	f7ff ffde 	bl	8001b80 <HAL_RCC_GetHCLKFreq>
 8001bc4:	4601      	mov	r1, r0
 8001bc6:	4b05      	ldr	r3, [pc, #20]	; (8001bdc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	0adb      	lsrs	r3, r3, #11
 8001bcc:	f003 0307 	and.w	r3, r3, #7
 8001bd0:	4a03      	ldr	r2, [pc, #12]	; (8001be0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bd2:	5cd3      	ldrb	r3, [r2, r3]
 8001bd4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	08002f48 	.word	0x08002f48

08001be4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001bec:	4b0a      	ldr	r3, [pc, #40]	; (8001c18 <RCC_Delay+0x34>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a0a      	ldr	r2, [pc, #40]	; (8001c1c <RCC_Delay+0x38>)
 8001bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8001bf6:	0a5b      	lsrs	r3, r3, #9
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	fb02 f303 	mul.w	r3, r2, r3
 8001bfe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c00:	bf00      	nop
  }
  while (Delay --);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	1e5a      	subs	r2, r3, #1
 8001c06:	60fa      	str	r2, [r7, #12]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d1f9      	bne.n	8001c00 <RCC_Delay+0x1c>
}
 8001c0c:	bf00      	nop
 8001c0e:	3714      	adds	r7, #20
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bc80      	pop	{r7}
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	20000004 	.word	0x20000004
 8001c1c:	10624dd3 	.word	0x10624dd3

08001c20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d101      	bne.n	8001c32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e03f      	b.n	8001cb2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d106      	bne.n	8001c4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f7fe fd02 	bl	8000650 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2224      	movs	r2, #36	; 0x24
 8001c50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	68da      	ldr	r2, [r3, #12]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f000 fc2d 	bl	80024c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	691a      	ldr	r2, [r3, #16]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001c78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	695a      	ldr	r2, [r3, #20]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001c88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	68da      	ldr	r2, [r3, #12]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2220      	movs	r2, #32
 8001ca4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2220      	movs	r2, #32
 8001cac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
	...

08001cbc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b086      	sub	sp, #24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	60b9      	str	r1, [r7, #8]
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	2b20      	cmp	r3, #32
 8001cd4:	d153      	bne.n	8001d7e <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d002      	beq.n	8001ce2 <HAL_UART_Transmit_DMA+0x26>
 8001cdc:	88fb      	ldrh	r3, [r7, #6]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d101      	bne.n	8001ce6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e04c      	b.n	8001d80 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d101      	bne.n	8001cf4 <HAL_UART_Transmit_DMA+0x38>
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	e045      	b.n	8001d80 <HAL_UART_Transmit_DMA+0xc4>
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8001cfc:	68ba      	ldr	r2, [r7, #8]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	88fa      	ldrh	r2, [r7, #6]
 8001d06:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	88fa      	ldrh	r2, [r7, #6]
 8001d0c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2200      	movs	r2, #0
 8001d12:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2221      	movs	r2, #33	; 0x21
 8001d18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d20:	4a19      	ldr	r2, [pc, #100]	; (8001d88 <HAL_UART_Transmit_DMA+0xcc>)
 8001d22:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d28:	4a18      	ldr	r2, [pc, #96]	; (8001d8c <HAL_UART_Transmit_DMA+0xd0>)
 8001d2a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d30:	4a17      	ldr	r2, [pc, #92]	; (8001d90 <HAL_UART_Transmit_DMA+0xd4>)
 8001d32:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d38:	2200      	movs	r2, #0
 8001d3a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8001d3c:	f107 0308 	add.w	r3, r7, #8
 8001d40:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	6819      	ldr	r1, [r3, #0]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	3304      	adds	r3, #4
 8001d50:	461a      	mov	r2, r3
 8001d52:	88fb      	ldrh	r3, [r7, #6]
 8001d54:	f7fe ffcc 	bl	8000cf0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d60:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2200      	movs	r2, #0
 8001d66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	695a      	ldr	r2, [r3, #20]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d78:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	e000      	b.n	8001d80 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8001d7e:	2302      	movs	r3, #2
  }
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3718      	adds	r7, #24
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	080020d5 	.word	0x080020d5
 8001d8c:	08002127 	.word	0x08002127
 8001d90:	080021c7 	.word	0x080021c7

08001d94 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b086      	sub	sp, #24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	4613      	mov	r3, r2
 8001da0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	2b20      	cmp	r3, #32
 8001dac:	d166      	bne.n	8001e7c <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d002      	beq.n	8001dba <HAL_UART_Receive_DMA+0x26>
 8001db4:	88fb      	ldrh	r3, [r7, #6]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d101      	bne.n	8001dbe <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e05f      	b.n	8001e7e <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d101      	bne.n	8001dcc <HAL_UART_Receive_DMA+0x38>
 8001dc8:	2302      	movs	r3, #2
 8001dca:	e058      	b.n	8001e7e <HAL_UART_Receive_DMA+0xea>
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8001dd4:	68ba      	ldr	r2, [r7, #8]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	88fa      	ldrh	r2, [r7, #6]
 8001dde:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2200      	movs	r2, #0
 8001de4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2222      	movs	r2, #34	; 0x22
 8001dea:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001df2:	4a25      	ldr	r2, [pc, #148]	; (8001e88 <HAL_UART_Receive_DMA+0xf4>)
 8001df4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dfa:	4a24      	ldr	r2, [pc, #144]	; (8001e8c <HAL_UART_Receive_DMA+0xf8>)
 8001dfc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e02:	4a23      	ldr	r2, [pc, #140]	; (8001e90 <HAL_UART_Receive_DMA+0xfc>)
 8001e04:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 8001e0e:	f107 0308 	add.w	r3, r7, #8
 8001e12:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	3304      	adds	r3, #4
 8001e1e:	4619      	mov	r1, r3
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	88fb      	ldrh	r3, [r7, #6]
 8001e26:	f7fe ff63 	bl	8000cf0 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	613b      	str	r3, [r7, #16]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	613b      	str	r3, [r7, #16]
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	613b      	str	r3, [r7, #16]
 8001e3e:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2200      	movs	r2, #0
 8001e44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	68da      	ldr	r2, [r3, #12]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e56:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	695a      	ldr	r2, [r3, #20]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f042 0201 	orr.w	r2, r2, #1
 8001e66:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	695a      	ldr	r2, [r3, #20]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e76:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	e000      	b.n	8001e7e <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8001e7c:	2302      	movs	r3, #2
  }
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3718      	adds	r7, #24
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	08002143 	.word	0x08002143
 8001e8c:	080021ab 	.word	0x080021ab
 8001e90:	080021c7 	.word	0x080021c7

08001e94 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b088      	sub	sp, #32
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	695b      	ldr	r3, [r3, #20]
 8001eb2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	f003 030f 	and.w	r3, r3, #15
 8001ec2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d10d      	bne.n	8001ee6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	f003 0320 	and.w	r3, r3, #32
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d008      	beq.n	8001ee6 <HAL_UART_IRQHandler+0x52>
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	f003 0320 	and.w	r3, r3, #32
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d003      	beq.n	8001ee6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f000 fa6e 	bl	80023c0 <UART_Receive_IT>
      return;
 8001ee4:	e0cc      	b.n	8002080 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	f000 80ab 	beq.w	8002044 <HAL_UART_IRQHandler+0x1b0>
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	f003 0301 	and.w	r3, r3, #1
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d105      	bne.n	8001f04 <HAL_UART_IRQHandler+0x70>
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	f000 80a0 	beq.w	8002044 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d00a      	beq.n	8001f24 <HAL_UART_IRQHandler+0x90>
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d005      	beq.n	8001f24 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f1c:	f043 0201 	orr.w	r2, r3, #1
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	f003 0304 	and.w	r3, r3, #4
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d00a      	beq.n	8001f44 <HAL_UART_IRQHandler+0xb0>
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	f003 0301 	and.w	r3, r3, #1
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d005      	beq.n	8001f44 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f3c:	f043 0202 	orr.w	r2, r3, #2
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d00a      	beq.n	8001f64 <HAL_UART_IRQHandler+0xd0>
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	f003 0301 	and.w	r3, r3, #1
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d005      	beq.n	8001f64 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f5c:	f043 0204 	orr.w	r2, r3, #4
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	f003 0308 	and.w	r3, r3, #8
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d00a      	beq.n	8001f84 <HAL_UART_IRQHandler+0xf0>
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	f003 0301 	and.w	r3, r3, #1
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d005      	beq.n	8001f84 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f7c:	f043 0208 	orr.w	r2, r3, #8
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d078      	beq.n	800207e <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	f003 0320 	and.w	r3, r3, #32
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d007      	beq.n	8001fa6 <HAL_UART_IRQHandler+0x112>
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	f003 0320 	and.w	r3, r3, #32
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d002      	beq.n	8001fa6 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f000 fa0d 	bl	80023c0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	695b      	ldr	r3, [r3, #20]
 8001fac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	bf14      	ite	ne
 8001fb4:	2301      	movne	r3, #1
 8001fb6:	2300      	moveq	r3, #0
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fc0:	f003 0308 	and.w	r3, r3, #8
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d102      	bne.n	8001fce <HAL_UART_IRQHandler+0x13a>
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d031      	beq.n	8002032 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f000 f958 	bl	8002284 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	695b      	ldr	r3, [r3, #20]
 8001fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d023      	beq.n	800202a <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	695a      	ldr	r2, [r3, #20]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ff0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d013      	beq.n	8002022 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ffe:	4a22      	ldr	r2, [pc, #136]	; (8002088 <HAL_UART_IRQHandler+0x1f4>)
 8002000:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002006:	4618      	mov	r0, r3
 8002008:	f7fe fed2 	bl	8000db0 <HAL_DMA_Abort_IT>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d016      	beq.n	8002040 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800201c:	4610      	mov	r0, r2
 800201e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002020:	e00e      	b.n	8002040 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 f84d 	bl	80020c2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002028:	e00a      	b.n	8002040 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f000 f849 	bl	80020c2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002030:	e006      	b.n	8002040 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f000 f845 	bl	80020c2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800203e:	e01e      	b.n	800207e <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002040:	bf00      	nop
    return;
 8002042:	e01c      	b.n	800207e <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800204a:	2b00      	cmp	r3, #0
 800204c:	d008      	beq.n	8002060 <HAL_UART_IRQHandler+0x1cc>
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002054:	2b00      	cmp	r3, #0
 8002056:	d003      	beq.n	8002060 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f000 f944 	bl	80022e6 <UART_Transmit_IT>
    return;
 800205e:	e00f      	b.n	8002080 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002066:	2b00      	cmp	r3, #0
 8002068:	d00a      	beq.n	8002080 <HAL_UART_IRQHandler+0x1ec>
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002070:	2b00      	cmp	r3, #0
 8002072:	d005      	beq.n	8002080 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f000 f98b 	bl	8002390 <UART_EndTransmit_IT>
    return;
 800207a:	bf00      	nop
 800207c:	e000      	b.n	8002080 <HAL_UART_IRQHandler+0x1ec>
    return;
 800207e:	bf00      	nop
  }
}
 8002080:	3720      	adds	r7, #32
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	080022bf 	.word	0x080022bf

0800208c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002094:	bf00      	nop
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	bc80      	pop	{r7}
 800209c:	4770      	bx	lr

0800209e <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800209e:	b480      	push	{r7}
 80020a0:	b083      	sub	sp, #12
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80020a6:	bf00      	nop
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bc80      	pop	{r7}
 80020ae:	4770      	bx	lr

080020b0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80020b8:	bf00      	nop
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	bc80      	pop	{r7}
 80020c0:	4770      	bx	lr

080020c2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80020c2:	b480      	push	{r7}
 80020c4:	b083      	sub	sp, #12
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80020ca:	bf00      	nop
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bc80      	pop	{r7}
 80020d2:	4770      	bx	lr

080020d4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e0:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0320 	and.w	r3, r3, #32
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d113      	bne.n	8002118 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2200      	movs	r2, #0
 80020f4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	695a      	ldr	r2, [r3, #20]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002104:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	68da      	ldr	r2, [r3, #12]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002114:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002116:	e002      	b.n	800211e <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8002118:	68f8      	ldr	r0, [r7, #12]
 800211a:	f7ff ffb7 	bl	800208c <HAL_UART_TxCpltCallback>
}
 800211e:	bf00      	nop
 8002120:	3710      	adds	r7, #16
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002126:	b580      	push	{r7, lr}
 8002128:	b084      	sub	sp, #16
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002132:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8002134:	68f8      	ldr	r0, [r7, #12]
 8002136:	f7ff ffb2 	bl	800209e <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800213a:	bf00      	nop
 800213c:	3710      	adds	r7, #16
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002142:	b580      	push	{r7, lr}
 8002144:	b084      	sub	sp, #16
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214e:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0320 	and.w	r3, r3, #32
 800215a:	2b00      	cmp	r3, #0
 800215c:	d11e      	bne.n	800219c <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2200      	movs	r2, #0
 8002162:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	68da      	ldr	r2, [r3, #12]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002172:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	695a      	ldr	r2, [r3, #20]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f022 0201 	bic.w	r2, r2, #1
 8002182:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	695a      	ldr	r2, [r3, #20]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002192:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2220      	movs	r2, #32
 8002198:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800219c:	68f8      	ldr	r0, [r7, #12]
 800219e:	f7fe f8bb 	bl	8000318 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80021a2:	bf00      	nop
 80021a4:	3710      	adds	r7, #16
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}

080021aa <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b084      	sub	sp, #16
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80021b8:	68f8      	ldr	r0, [r7, #12]
 80021ba:	f7ff ff79 	bl	80020b0 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80021be:	bf00      	nop
 80021c0:	3710      	adds	r7, #16
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}

080021c6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80021c6:	b580      	push	{r7, lr}
 80021c8:	b084      	sub	sp, #16
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80021ce:	2300      	movs	r3, #0
 80021d0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	695b      	ldr	r3, [r3, #20]
 80021de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	bf14      	ite	ne
 80021e6:	2301      	movne	r3, #1
 80021e8:	2300      	moveq	r3, #0
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	2b21      	cmp	r3, #33	; 0x21
 80021f8:	d108      	bne.n	800220c <UART_DMAError+0x46>
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d005      	beq.n	800220c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	2200      	movs	r2, #0
 8002204:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002206:	68b8      	ldr	r0, [r7, #8]
 8002208:	f000 f827 	bl	800225a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	695b      	ldr	r3, [r3, #20]
 8002212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002216:	2b00      	cmp	r3, #0
 8002218:	bf14      	ite	ne
 800221a:	2301      	movne	r3, #1
 800221c:	2300      	moveq	r3, #0
 800221e:	b2db      	uxtb	r3, r3
 8002220:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2b22      	cmp	r3, #34	; 0x22
 800222c:	d108      	bne.n	8002240 <UART_DMAError+0x7a>
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d005      	beq.n	8002240 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	2200      	movs	r2, #0
 8002238:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800223a:	68b8      	ldr	r0, [r7, #8]
 800223c:	f000 f822 	bl	8002284 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002244:	f043 0210 	orr.w	r2, r3, #16
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800224c:	68b8      	ldr	r0, [r7, #8]
 800224e:	f7ff ff38 	bl	80020c2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002252:	bf00      	nop
 8002254:	3710      	adds	r7, #16
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800225a:	b480      	push	{r7}
 800225c:	b083      	sub	sp, #12
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	68da      	ldr	r2, [r3, #12]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002270:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2220      	movs	r2, #32
 8002276:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800227a:	bf00      	nop
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	bc80      	pop	{r7}
 8002282:	4770      	bx	lr

08002284 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	68da      	ldr	r2, [r3, #12]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800229a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	695a      	ldr	r2, [r3, #20]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f022 0201 	bic.w	r2, r2, #1
 80022aa:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2220      	movs	r2, #32
 80022b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80022b4:	bf00      	nop
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bc80      	pop	{r7}
 80022bc:	4770      	bx	lr

080022be <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	b084      	sub	sp, #16
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2200      	movs	r2, #0
 80022d0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2200      	movs	r2, #0
 80022d6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80022d8:	68f8      	ldr	r0, [r7, #12]
 80022da:	f7ff fef2 	bl	80020c2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80022de:	bf00      	nop
 80022e0:	3710      	adds	r7, #16
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}

080022e6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80022e6:	b480      	push	{r7}
 80022e8:	b085      	sub	sp, #20
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	2b21      	cmp	r3, #33	; 0x21
 80022f8:	d144      	bne.n	8002384 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002302:	d11a      	bne.n	800233a <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a1b      	ldr	r3, [r3, #32]
 8002308:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	881b      	ldrh	r3, [r3, #0]
 800230e:	461a      	mov	r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002318:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	691b      	ldr	r3, [r3, #16]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d105      	bne.n	800232e <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a1b      	ldr	r3, [r3, #32]
 8002326:	1c9a      	adds	r2, r3, #2
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	621a      	str	r2, [r3, #32]
 800232c:	e00e      	b.n	800234c <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a1b      	ldr	r3, [r3, #32]
 8002332:	1c5a      	adds	r2, r3, #1
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	621a      	str	r2, [r3, #32]
 8002338:	e008      	b.n	800234c <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a1b      	ldr	r3, [r3, #32]
 800233e:	1c59      	adds	r1, r3, #1
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	6211      	str	r1, [r2, #32]
 8002344:	781a      	ldrb	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002350:	b29b      	uxth	r3, r3
 8002352:	3b01      	subs	r3, #1
 8002354:	b29b      	uxth	r3, r3
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	4619      	mov	r1, r3
 800235a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800235c:	2b00      	cmp	r3, #0
 800235e:	d10f      	bne.n	8002380 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	68da      	ldr	r2, [r3, #12]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800236e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	68da      	ldr	r2, [r3, #12]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800237e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002380:	2300      	movs	r3, #0
 8002382:	e000      	b.n	8002386 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002384:	2302      	movs	r3, #2
  }
}
 8002386:	4618      	mov	r0, r3
 8002388:	3714      	adds	r7, #20
 800238a:	46bd      	mov	sp, r7
 800238c:	bc80      	pop	{r7}
 800238e:	4770      	bx	lr

08002390 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	68da      	ldr	r2, [r3, #12]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023a6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2220      	movs	r2, #32
 80023ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f7ff fe6b 	bl	800208c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80023b6:	2300      	movs	r3, #0
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3708      	adds	r7, #8
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	2b22      	cmp	r3, #34	; 0x22
 80023d2:	d171      	bne.n	80024b8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023dc:	d123      	bne.n	8002426 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e2:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	691b      	ldr	r3, [r3, #16]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d10e      	bne.n	800240a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023f8:	b29a      	uxth	r2, r3
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002402:	1c9a      	adds	r2, r3, #2
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	629a      	str	r2, [r3, #40]	; 0x28
 8002408:	e029      	b.n	800245e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	b29b      	uxth	r3, r3
 8002412:	b2db      	uxtb	r3, r3
 8002414:	b29a      	uxth	r2, r3
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800241e:	1c5a      	adds	r2, r3, #1
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	629a      	str	r2, [r3, #40]	; 0x28
 8002424:	e01b      	b.n	800245e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d10a      	bne.n	8002444 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	6858      	ldr	r0, [r3, #4]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002438:	1c59      	adds	r1, r3, #1
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	6291      	str	r1, [r2, #40]	; 0x28
 800243e:	b2c2      	uxtb	r2, r0
 8002440:	701a      	strb	r2, [r3, #0]
 8002442:	e00c      	b.n	800245e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	b2da      	uxtb	r2, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002450:	1c58      	adds	r0, r3, #1
 8002452:	6879      	ldr	r1, [r7, #4]
 8002454:	6288      	str	r0, [r1, #40]	; 0x28
 8002456:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800245a:	b2d2      	uxtb	r2, r2
 800245c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002462:	b29b      	uxth	r3, r3
 8002464:	3b01      	subs	r3, #1
 8002466:	b29b      	uxth	r3, r3
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	4619      	mov	r1, r3
 800246c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800246e:	2b00      	cmp	r3, #0
 8002470:	d120      	bne.n	80024b4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	68da      	ldr	r2, [r3, #12]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f022 0220 	bic.w	r2, r2, #32
 8002480:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	68da      	ldr	r2, [r3, #12]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002490:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	695a      	ldr	r2, [r3, #20]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f022 0201 	bic.w	r2, r2, #1
 80024a0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2220      	movs	r2, #32
 80024a6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f7fd ff34 	bl	8000318 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80024b0:	2300      	movs	r3, #0
 80024b2:	e002      	b.n	80024ba <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80024b4:	2300      	movs	r3, #0
 80024b6:	e000      	b.n	80024ba <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80024b8:	2302      	movs	r3, #2
  }
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3710      	adds	r7, #16
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
	...

080024c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	68da      	ldr	r2, [r3, #12]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	430a      	orrs	r2, r1
 80024e0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	689a      	ldr	r2, [r3, #8]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	431a      	orrs	r2, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	695b      	ldr	r3, [r3, #20]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80024fe:	f023 030c 	bic.w	r3, r3, #12
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	6812      	ldr	r2, [r2, #0]
 8002506:	68f9      	ldr	r1, [r7, #12]
 8002508:	430b      	orrs	r3, r1
 800250a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	695b      	ldr	r3, [r3, #20]
 8002512:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	699a      	ldr	r2, [r3, #24]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	430a      	orrs	r2, r1
 8002520:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a52      	ldr	r2, [pc, #328]	; (8002670 <UART_SetConfig+0x1ac>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d14e      	bne.n	80025ca <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800252c:	f7ff fb46 	bl	8001bbc <HAL_RCC_GetPCLK2Freq>
 8002530:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002532:	68ba      	ldr	r2, [r7, #8]
 8002534:	4613      	mov	r3, r2
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	4413      	add	r3, r2
 800253a:	009a      	lsls	r2, r3, #2
 800253c:	441a      	add	r2, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	fbb2 f3f3 	udiv	r3, r2, r3
 8002548:	4a4a      	ldr	r2, [pc, #296]	; (8002674 <UART_SetConfig+0x1b0>)
 800254a:	fba2 2303 	umull	r2, r3, r2, r3
 800254e:	095b      	lsrs	r3, r3, #5
 8002550:	0119      	lsls	r1, r3, #4
 8002552:	68ba      	ldr	r2, [r7, #8]
 8002554:	4613      	mov	r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	4413      	add	r3, r2
 800255a:	009a      	lsls	r2, r3, #2
 800255c:	441a      	add	r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	fbb2 f2f3 	udiv	r2, r2, r3
 8002568:	4b42      	ldr	r3, [pc, #264]	; (8002674 <UART_SetConfig+0x1b0>)
 800256a:	fba3 0302 	umull	r0, r3, r3, r2
 800256e:	095b      	lsrs	r3, r3, #5
 8002570:	2064      	movs	r0, #100	; 0x64
 8002572:	fb00 f303 	mul.w	r3, r0, r3
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	011b      	lsls	r3, r3, #4
 800257a:	3332      	adds	r3, #50	; 0x32
 800257c:	4a3d      	ldr	r2, [pc, #244]	; (8002674 <UART_SetConfig+0x1b0>)
 800257e:	fba2 2303 	umull	r2, r3, r2, r3
 8002582:	095b      	lsrs	r3, r3, #5
 8002584:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002588:	4419      	add	r1, r3
 800258a:	68ba      	ldr	r2, [r7, #8]
 800258c:	4613      	mov	r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	4413      	add	r3, r2
 8002592:	009a      	lsls	r2, r3, #2
 8002594:	441a      	add	r2, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	fbb2 f2f3 	udiv	r2, r2, r3
 80025a0:	4b34      	ldr	r3, [pc, #208]	; (8002674 <UART_SetConfig+0x1b0>)
 80025a2:	fba3 0302 	umull	r0, r3, r3, r2
 80025a6:	095b      	lsrs	r3, r3, #5
 80025a8:	2064      	movs	r0, #100	; 0x64
 80025aa:	fb00 f303 	mul.w	r3, r0, r3
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	011b      	lsls	r3, r3, #4
 80025b2:	3332      	adds	r3, #50	; 0x32
 80025b4:	4a2f      	ldr	r2, [pc, #188]	; (8002674 <UART_SetConfig+0x1b0>)
 80025b6:	fba2 2303 	umull	r2, r3, r2, r3
 80025ba:	095b      	lsrs	r3, r3, #5
 80025bc:	f003 020f 	and.w	r2, r3, #15
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	440a      	add	r2, r1
 80025c6:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80025c8:	e04d      	b.n	8002666 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 80025ca:	f7ff fae3 	bl	8001b94 <HAL_RCC_GetPCLK1Freq>
 80025ce:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80025d0:	68ba      	ldr	r2, [r7, #8]
 80025d2:	4613      	mov	r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	4413      	add	r3, r2
 80025d8:	009a      	lsls	r2, r3, #2
 80025da:	441a      	add	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025e6:	4a23      	ldr	r2, [pc, #140]	; (8002674 <UART_SetConfig+0x1b0>)
 80025e8:	fba2 2303 	umull	r2, r3, r2, r3
 80025ec:	095b      	lsrs	r3, r3, #5
 80025ee:	0119      	lsls	r1, r3, #4
 80025f0:	68ba      	ldr	r2, [r7, #8]
 80025f2:	4613      	mov	r3, r2
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	4413      	add	r3, r2
 80025f8:	009a      	lsls	r2, r3, #2
 80025fa:	441a      	add	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	fbb2 f2f3 	udiv	r2, r2, r3
 8002606:	4b1b      	ldr	r3, [pc, #108]	; (8002674 <UART_SetConfig+0x1b0>)
 8002608:	fba3 0302 	umull	r0, r3, r3, r2
 800260c:	095b      	lsrs	r3, r3, #5
 800260e:	2064      	movs	r0, #100	; 0x64
 8002610:	fb00 f303 	mul.w	r3, r0, r3
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	011b      	lsls	r3, r3, #4
 8002618:	3332      	adds	r3, #50	; 0x32
 800261a:	4a16      	ldr	r2, [pc, #88]	; (8002674 <UART_SetConfig+0x1b0>)
 800261c:	fba2 2303 	umull	r2, r3, r2, r3
 8002620:	095b      	lsrs	r3, r3, #5
 8002622:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002626:	4419      	add	r1, r3
 8002628:	68ba      	ldr	r2, [r7, #8]
 800262a:	4613      	mov	r3, r2
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	4413      	add	r3, r2
 8002630:	009a      	lsls	r2, r3, #2
 8002632:	441a      	add	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	fbb2 f2f3 	udiv	r2, r2, r3
 800263e:	4b0d      	ldr	r3, [pc, #52]	; (8002674 <UART_SetConfig+0x1b0>)
 8002640:	fba3 0302 	umull	r0, r3, r3, r2
 8002644:	095b      	lsrs	r3, r3, #5
 8002646:	2064      	movs	r0, #100	; 0x64
 8002648:	fb00 f303 	mul.w	r3, r0, r3
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	011b      	lsls	r3, r3, #4
 8002650:	3332      	adds	r3, #50	; 0x32
 8002652:	4a08      	ldr	r2, [pc, #32]	; (8002674 <UART_SetConfig+0x1b0>)
 8002654:	fba2 2303 	umull	r2, r3, r2, r3
 8002658:	095b      	lsrs	r3, r3, #5
 800265a:	f003 020f 	and.w	r2, r3, #15
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	440a      	add	r2, r1
 8002664:	609a      	str	r2, [r3, #8]
}
 8002666:	bf00      	nop
 8002668:	3710      	adds	r7, #16
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	40013800 	.word	0x40013800
 8002674:	51eb851f 	.word	0x51eb851f

08002678 <__errno>:
 8002678:	4b01      	ldr	r3, [pc, #4]	; (8002680 <__errno+0x8>)
 800267a:	6818      	ldr	r0, [r3, #0]
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	20000010 	.word	0x20000010

08002684 <__libc_init_array>:
 8002684:	b570      	push	{r4, r5, r6, lr}
 8002686:	2500      	movs	r5, #0
 8002688:	4e0c      	ldr	r6, [pc, #48]	; (80026bc <__libc_init_array+0x38>)
 800268a:	4c0d      	ldr	r4, [pc, #52]	; (80026c0 <__libc_init_array+0x3c>)
 800268c:	1ba4      	subs	r4, r4, r6
 800268e:	10a4      	asrs	r4, r4, #2
 8002690:	42a5      	cmp	r5, r4
 8002692:	d109      	bne.n	80026a8 <__libc_init_array+0x24>
 8002694:	f000 fc34 	bl	8002f00 <_init>
 8002698:	2500      	movs	r5, #0
 800269a:	4e0a      	ldr	r6, [pc, #40]	; (80026c4 <__libc_init_array+0x40>)
 800269c:	4c0a      	ldr	r4, [pc, #40]	; (80026c8 <__libc_init_array+0x44>)
 800269e:	1ba4      	subs	r4, r4, r6
 80026a0:	10a4      	asrs	r4, r4, #2
 80026a2:	42a5      	cmp	r5, r4
 80026a4:	d105      	bne.n	80026b2 <__libc_init_array+0x2e>
 80026a6:	bd70      	pop	{r4, r5, r6, pc}
 80026a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80026ac:	4798      	blx	r3
 80026ae:	3501      	adds	r5, #1
 80026b0:	e7ee      	b.n	8002690 <__libc_init_array+0xc>
 80026b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80026b6:	4798      	blx	r3
 80026b8:	3501      	adds	r5, #1
 80026ba:	e7f2      	b.n	80026a2 <__libc_init_array+0x1e>
 80026bc:	08002f84 	.word	0x08002f84
 80026c0:	08002f84 	.word	0x08002f84
 80026c4:	08002f84 	.word	0x08002f84
 80026c8:	08002f88 	.word	0x08002f88

080026cc <memset>:
 80026cc:	4603      	mov	r3, r0
 80026ce:	4402      	add	r2, r0
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d100      	bne.n	80026d6 <memset+0xa>
 80026d4:	4770      	bx	lr
 80026d6:	f803 1b01 	strb.w	r1, [r3], #1
 80026da:	e7f9      	b.n	80026d0 <memset+0x4>

080026dc <siprintf>:
 80026dc:	b40e      	push	{r1, r2, r3}
 80026de:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80026e2:	b500      	push	{lr}
 80026e4:	b09c      	sub	sp, #112	; 0x70
 80026e6:	ab1d      	add	r3, sp, #116	; 0x74
 80026e8:	9002      	str	r0, [sp, #8]
 80026ea:	9006      	str	r0, [sp, #24]
 80026ec:	9107      	str	r1, [sp, #28]
 80026ee:	9104      	str	r1, [sp, #16]
 80026f0:	4808      	ldr	r0, [pc, #32]	; (8002714 <siprintf+0x38>)
 80026f2:	4909      	ldr	r1, [pc, #36]	; (8002718 <siprintf+0x3c>)
 80026f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80026f8:	9105      	str	r1, [sp, #20]
 80026fa:	6800      	ldr	r0, [r0, #0]
 80026fc:	a902      	add	r1, sp, #8
 80026fe:	9301      	str	r3, [sp, #4]
 8002700:	f000 f866 	bl	80027d0 <_svfiprintf_r>
 8002704:	2200      	movs	r2, #0
 8002706:	9b02      	ldr	r3, [sp, #8]
 8002708:	701a      	strb	r2, [r3, #0]
 800270a:	b01c      	add	sp, #112	; 0x70
 800270c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002710:	b003      	add	sp, #12
 8002712:	4770      	bx	lr
 8002714:	20000010 	.word	0x20000010
 8002718:	ffff0208 	.word	0xffff0208

0800271c <__ssputs_r>:
 800271c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002720:	688e      	ldr	r6, [r1, #8]
 8002722:	4682      	mov	sl, r0
 8002724:	429e      	cmp	r6, r3
 8002726:	460c      	mov	r4, r1
 8002728:	4690      	mov	r8, r2
 800272a:	4699      	mov	r9, r3
 800272c:	d837      	bhi.n	800279e <__ssputs_r+0x82>
 800272e:	898a      	ldrh	r2, [r1, #12]
 8002730:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002734:	d031      	beq.n	800279a <__ssputs_r+0x7e>
 8002736:	2302      	movs	r3, #2
 8002738:	6825      	ldr	r5, [r4, #0]
 800273a:	6909      	ldr	r1, [r1, #16]
 800273c:	1a6f      	subs	r7, r5, r1
 800273e:	6965      	ldr	r5, [r4, #20]
 8002740:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002744:	fb95 f5f3 	sdiv	r5, r5, r3
 8002748:	f109 0301 	add.w	r3, r9, #1
 800274c:	443b      	add	r3, r7
 800274e:	429d      	cmp	r5, r3
 8002750:	bf38      	it	cc
 8002752:	461d      	movcc	r5, r3
 8002754:	0553      	lsls	r3, r2, #21
 8002756:	d530      	bpl.n	80027ba <__ssputs_r+0x9e>
 8002758:	4629      	mov	r1, r5
 800275a:	f000 fb37 	bl	8002dcc <_malloc_r>
 800275e:	4606      	mov	r6, r0
 8002760:	b950      	cbnz	r0, 8002778 <__ssputs_r+0x5c>
 8002762:	230c      	movs	r3, #12
 8002764:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002768:	f8ca 3000 	str.w	r3, [sl]
 800276c:	89a3      	ldrh	r3, [r4, #12]
 800276e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002772:	81a3      	strh	r3, [r4, #12]
 8002774:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002778:	463a      	mov	r2, r7
 800277a:	6921      	ldr	r1, [r4, #16]
 800277c:	f000 fab6 	bl	8002cec <memcpy>
 8002780:	89a3      	ldrh	r3, [r4, #12]
 8002782:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002786:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800278a:	81a3      	strh	r3, [r4, #12]
 800278c:	6126      	str	r6, [r4, #16]
 800278e:	443e      	add	r6, r7
 8002790:	6026      	str	r6, [r4, #0]
 8002792:	464e      	mov	r6, r9
 8002794:	6165      	str	r5, [r4, #20]
 8002796:	1bed      	subs	r5, r5, r7
 8002798:	60a5      	str	r5, [r4, #8]
 800279a:	454e      	cmp	r6, r9
 800279c:	d900      	bls.n	80027a0 <__ssputs_r+0x84>
 800279e:	464e      	mov	r6, r9
 80027a0:	4632      	mov	r2, r6
 80027a2:	4641      	mov	r1, r8
 80027a4:	6820      	ldr	r0, [r4, #0]
 80027a6:	f000 faac 	bl	8002d02 <memmove>
 80027aa:	68a3      	ldr	r3, [r4, #8]
 80027ac:	2000      	movs	r0, #0
 80027ae:	1b9b      	subs	r3, r3, r6
 80027b0:	60a3      	str	r3, [r4, #8]
 80027b2:	6823      	ldr	r3, [r4, #0]
 80027b4:	441e      	add	r6, r3
 80027b6:	6026      	str	r6, [r4, #0]
 80027b8:	e7dc      	b.n	8002774 <__ssputs_r+0x58>
 80027ba:	462a      	mov	r2, r5
 80027bc:	f000 fb60 	bl	8002e80 <_realloc_r>
 80027c0:	4606      	mov	r6, r0
 80027c2:	2800      	cmp	r0, #0
 80027c4:	d1e2      	bne.n	800278c <__ssputs_r+0x70>
 80027c6:	6921      	ldr	r1, [r4, #16]
 80027c8:	4650      	mov	r0, sl
 80027ca:	f000 fab3 	bl	8002d34 <_free_r>
 80027ce:	e7c8      	b.n	8002762 <__ssputs_r+0x46>

080027d0 <_svfiprintf_r>:
 80027d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027d4:	461d      	mov	r5, r3
 80027d6:	898b      	ldrh	r3, [r1, #12]
 80027d8:	b09d      	sub	sp, #116	; 0x74
 80027da:	061f      	lsls	r7, r3, #24
 80027dc:	4680      	mov	r8, r0
 80027de:	460c      	mov	r4, r1
 80027e0:	4616      	mov	r6, r2
 80027e2:	d50f      	bpl.n	8002804 <_svfiprintf_r+0x34>
 80027e4:	690b      	ldr	r3, [r1, #16]
 80027e6:	b96b      	cbnz	r3, 8002804 <_svfiprintf_r+0x34>
 80027e8:	2140      	movs	r1, #64	; 0x40
 80027ea:	f000 faef 	bl	8002dcc <_malloc_r>
 80027ee:	6020      	str	r0, [r4, #0]
 80027f0:	6120      	str	r0, [r4, #16]
 80027f2:	b928      	cbnz	r0, 8002800 <_svfiprintf_r+0x30>
 80027f4:	230c      	movs	r3, #12
 80027f6:	f8c8 3000 	str.w	r3, [r8]
 80027fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027fe:	e0c8      	b.n	8002992 <_svfiprintf_r+0x1c2>
 8002800:	2340      	movs	r3, #64	; 0x40
 8002802:	6163      	str	r3, [r4, #20]
 8002804:	2300      	movs	r3, #0
 8002806:	9309      	str	r3, [sp, #36]	; 0x24
 8002808:	2320      	movs	r3, #32
 800280a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800280e:	2330      	movs	r3, #48	; 0x30
 8002810:	f04f 0b01 	mov.w	fp, #1
 8002814:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002818:	9503      	str	r5, [sp, #12]
 800281a:	4637      	mov	r7, r6
 800281c:	463d      	mov	r5, r7
 800281e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002822:	b10b      	cbz	r3, 8002828 <_svfiprintf_r+0x58>
 8002824:	2b25      	cmp	r3, #37	; 0x25
 8002826:	d13e      	bne.n	80028a6 <_svfiprintf_r+0xd6>
 8002828:	ebb7 0a06 	subs.w	sl, r7, r6
 800282c:	d00b      	beq.n	8002846 <_svfiprintf_r+0x76>
 800282e:	4653      	mov	r3, sl
 8002830:	4632      	mov	r2, r6
 8002832:	4621      	mov	r1, r4
 8002834:	4640      	mov	r0, r8
 8002836:	f7ff ff71 	bl	800271c <__ssputs_r>
 800283a:	3001      	adds	r0, #1
 800283c:	f000 80a4 	beq.w	8002988 <_svfiprintf_r+0x1b8>
 8002840:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002842:	4453      	add	r3, sl
 8002844:	9309      	str	r3, [sp, #36]	; 0x24
 8002846:	783b      	ldrb	r3, [r7, #0]
 8002848:	2b00      	cmp	r3, #0
 800284a:	f000 809d 	beq.w	8002988 <_svfiprintf_r+0x1b8>
 800284e:	2300      	movs	r3, #0
 8002850:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002854:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002858:	9304      	str	r3, [sp, #16]
 800285a:	9307      	str	r3, [sp, #28]
 800285c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002860:	931a      	str	r3, [sp, #104]	; 0x68
 8002862:	462f      	mov	r7, r5
 8002864:	2205      	movs	r2, #5
 8002866:	f817 1b01 	ldrb.w	r1, [r7], #1
 800286a:	4850      	ldr	r0, [pc, #320]	; (80029ac <_svfiprintf_r+0x1dc>)
 800286c:	f000 fa30 	bl	8002cd0 <memchr>
 8002870:	9b04      	ldr	r3, [sp, #16]
 8002872:	b9d0      	cbnz	r0, 80028aa <_svfiprintf_r+0xda>
 8002874:	06d9      	lsls	r1, r3, #27
 8002876:	bf44      	itt	mi
 8002878:	2220      	movmi	r2, #32
 800287a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800287e:	071a      	lsls	r2, r3, #28
 8002880:	bf44      	itt	mi
 8002882:	222b      	movmi	r2, #43	; 0x2b
 8002884:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002888:	782a      	ldrb	r2, [r5, #0]
 800288a:	2a2a      	cmp	r2, #42	; 0x2a
 800288c:	d015      	beq.n	80028ba <_svfiprintf_r+0xea>
 800288e:	462f      	mov	r7, r5
 8002890:	2000      	movs	r0, #0
 8002892:	250a      	movs	r5, #10
 8002894:	9a07      	ldr	r2, [sp, #28]
 8002896:	4639      	mov	r1, r7
 8002898:	f811 3b01 	ldrb.w	r3, [r1], #1
 800289c:	3b30      	subs	r3, #48	; 0x30
 800289e:	2b09      	cmp	r3, #9
 80028a0:	d94d      	bls.n	800293e <_svfiprintf_r+0x16e>
 80028a2:	b1b8      	cbz	r0, 80028d4 <_svfiprintf_r+0x104>
 80028a4:	e00f      	b.n	80028c6 <_svfiprintf_r+0xf6>
 80028a6:	462f      	mov	r7, r5
 80028a8:	e7b8      	b.n	800281c <_svfiprintf_r+0x4c>
 80028aa:	4a40      	ldr	r2, [pc, #256]	; (80029ac <_svfiprintf_r+0x1dc>)
 80028ac:	463d      	mov	r5, r7
 80028ae:	1a80      	subs	r0, r0, r2
 80028b0:	fa0b f000 	lsl.w	r0, fp, r0
 80028b4:	4318      	orrs	r0, r3
 80028b6:	9004      	str	r0, [sp, #16]
 80028b8:	e7d3      	b.n	8002862 <_svfiprintf_r+0x92>
 80028ba:	9a03      	ldr	r2, [sp, #12]
 80028bc:	1d11      	adds	r1, r2, #4
 80028be:	6812      	ldr	r2, [r2, #0]
 80028c0:	9103      	str	r1, [sp, #12]
 80028c2:	2a00      	cmp	r2, #0
 80028c4:	db01      	blt.n	80028ca <_svfiprintf_r+0xfa>
 80028c6:	9207      	str	r2, [sp, #28]
 80028c8:	e004      	b.n	80028d4 <_svfiprintf_r+0x104>
 80028ca:	4252      	negs	r2, r2
 80028cc:	f043 0302 	orr.w	r3, r3, #2
 80028d0:	9207      	str	r2, [sp, #28]
 80028d2:	9304      	str	r3, [sp, #16]
 80028d4:	783b      	ldrb	r3, [r7, #0]
 80028d6:	2b2e      	cmp	r3, #46	; 0x2e
 80028d8:	d10c      	bne.n	80028f4 <_svfiprintf_r+0x124>
 80028da:	787b      	ldrb	r3, [r7, #1]
 80028dc:	2b2a      	cmp	r3, #42	; 0x2a
 80028de:	d133      	bne.n	8002948 <_svfiprintf_r+0x178>
 80028e0:	9b03      	ldr	r3, [sp, #12]
 80028e2:	3702      	adds	r7, #2
 80028e4:	1d1a      	adds	r2, r3, #4
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	9203      	str	r2, [sp, #12]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	bfb8      	it	lt
 80028ee:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80028f2:	9305      	str	r3, [sp, #20]
 80028f4:	4d2e      	ldr	r5, [pc, #184]	; (80029b0 <_svfiprintf_r+0x1e0>)
 80028f6:	2203      	movs	r2, #3
 80028f8:	7839      	ldrb	r1, [r7, #0]
 80028fa:	4628      	mov	r0, r5
 80028fc:	f000 f9e8 	bl	8002cd0 <memchr>
 8002900:	b138      	cbz	r0, 8002912 <_svfiprintf_r+0x142>
 8002902:	2340      	movs	r3, #64	; 0x40
 8002904:	1b40      	subs	r0, r0, r5
 8002906:	fa03 f000 	lsl.w	r0, r3, r0
 800290a:	9b04      	ldr	r3, [sp, #16]
 800290c:	3701      	adds	r7, #1
 800290e:	4303      	orrs	r3, r0
 8002910:	9304      	str	r3, [sp, #16]
 8002912:	7839      	ldrb	r1, [r7, #0]
 8002914:	2206      	movs	r2, #6
 8002916:	4827      	ldr	r0, [pc, #156]	; (80029b4 <_svfiprintf_r+0x1e4>)
 8002918:	1c7e      	adds	r6, r7, #1
 800291a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800291e:	f000 f9d7 	bl	8002cd0 <memchr>
 8002922:	2800      	cmp	r0, #0
 8002924:	d038      	beq.n	8002998 <_svfiprintf_r+0x1c8>
 8002926:	4b24      	ldr	r3, [pc, #144]	; (80029b8 <_svfiprintf_r+0x1e8>)
 8002928:	bb13      	cbnz	r3, 8002970 <_svfiprintf_r+0x1a0>
 800292a:	9b03      	ldr	r3, [sp, #12]
 800292c:	3307      	adds	r3, #7
 800292e:	f023 0307 	bic.w	r3, r3, #7
 8002932:	3308      	adds	r3, #8
 8002934:	9303      	str	r3, [sp, #12]
 8002936:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002938:	444b      	add	r3, r9
 800293a:	9309      	str	r3, [sp, #36]	; 0x24
 800293c:	e76d      	b.n	800281a <_svfiprintf_r+0x4a>
 800293e:	fb05 3202 	mla	r2, r5, r2, r3
 8002942:	2001      	movs	r0, #1
 8002944:	460f      	mov	r7, r1
 8002946:	e7a6      	b.n	8002896 <_svfiprintf_r+0xc6>
 8002948:	2300      	movs	r3, #0
 800294a:	250a      	movs	r5, #10
 800294c:	4619      	mov	r1, r3
 800294e:	3701      	adds	r7, #1
 8002950:	9305      	str	r3, [sp, #20]
 8002952:	4638      	mov	r0, r7
 8002954:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002958:	3a30      	subs	r2, #48	; 0x30
 800295a:	2a09      	cmp	r2, #9
 800295c:	d903      	bls.n	8002966 <_svfiprintf_r+0x196>
 800295e:	2b00      	cmp	r3, #0
 8002960:	d0c8      	beq.n	80028f4 <_svfiprintf_r+0x124>
 8002962:	9105      	str	r1, [sp, #20]
 8002964:	e7c6      	b.n	80028f4 <_svfiprintf_r+0x124>
 8002966:	fb05 2101 	mla	r1, r5, r1, r2
 800296a:	2301      	movs	r3, #1
 800296c:	4607      	mov	r7, r0
 800296e:	e7f0      	b.n	8002952 <_svfiprintf_r+0x182>
 8002970:	ab03      	add	r3, sp, #12
 8002972:	9300      	str	r3, [sp, #0]
 8002974:	4622      	mov	r2, r4
 8002976:	4b11      	ldr	r3, [pc, #68]	; (80029bc <_svfiprintf_r+0x1ec>)
 8002978:	a904      	add	r1, sp, #16
 800297a:	4640      	mov	r0, r8
 800297c:	f3af 8000 	nop.w
 8002980:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8002984:	4681      	mov	r9, r0
 8002986:	d1d6      	bne.n	8002936 <_svfiprintf_r+0x166>
 8002988:	89a3      	ldrh	r3, [r4, #12]
 800298a:	065b      	lsls	r3, r3, #25
 800298c:	f53f af35 	bmi.w	80027fa <_svfiprintf_r+0x2a>
 8002990:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002992:	b01d      	add	sp, #116	; 0x74
 8002994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002998:	ab03      	add	r3, sp, #12
 800299a:	9300      	str	r3, [sp, #0]
 800299c:	4622      	mov	r2, r4
 800299e:	4b07      	ldr	r3, [pc, #28]	; (80029bc <_svfiprintf_r+0x1ec>)
 80029a0:	a904      	add	r1, sp, #16
 80029a2:	4640      	mov	r0, r8
 80029a4:	f000 f882 	bl	8002aac <_printf_i>
 80029a8:	e7ea      	b.n	8002980 <_svfiprintf_r+0x1b0>
 80029aa:	bf00      	nop
 80029ac:	08002f50 	.word	0x08002f50
 80029b0:	08002f56 	.word	0x08002f56
 80029b4:	08002f5a 	.word	0x08002f5a
 80029b8:	00000000 	.word	0x00000000
 80029bc:	0800271d 	.word	0x0800271d

080029c0 <_printf_common>:
 80029c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029c4:	4691      	mov	r9, r2
 80029c6:	461f      	mov	r7, r3
 80029c8:	688a      	ldr	r2, [r1, #8]
 80029ca:	690b      	ldr	r3, [r1, #16]
 80029cc:	4606      	mov	r6, r0
 80029ce:	4293      	cmp	r3, r2
 80029d0:	bfb8      	it	lt
 80029d2:	4613      	movlt	r3, r2
 80029d4:	f8c9 3000 	str.w	r3, [r9]
 80029d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80029dc:	460c      	mov	r4, r1
 80029de:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80029e2:	b112      	cbz	r2, 80029ea <_printf_common+0x2a>
 80029e4:	3301      	adds	r3, #1
 80029e6:	f8c9 3000 	str.w	r3, [r9]
 80029ea:	6823      	ldr	r3, [r4, #0]
 80029ec:	0699      	lsls	r1, r3, #26
 80029ee:	bf42      	ittt	mi
 80029f0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80029f4:	3302      	addmi	r3, #2
 80029f6:	f8c9 3000 	strmi.w	r3, [r9]
 80029fa:	6825      	ldr	r5, [r4, #0]
 80029fc:	f015 0506 	ands.w	r5, r5, #6
 8002a00:	d107      	bne.n	8002a12 <_printf_common+0x52>
 8002a02:	f104 0a19 	add.w	sl, r4, #25
 8002a06:	68e3      	ldr	r3, [r4, #12]
 8002a08:	f8d9 2000 	ldr.w	r2, [r9]
 8002a0c:	1a9b      	subs	r3, r3, r2
 8002a0e:	42ab      	cmp	r3, r5
 8002a10:	dc29      	bgt.n	8002a66 <_printf_common+0xa6>
 8002a12:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002a16:	6822      	ldr	r2, [r4, #0]
 8002a18:	3300      	adds	r3, #0
 8002a1a:	bf18      	it	ne
 8002a1c:	2301      	movne	r3, #1
 8002a1e:	0692      	lsls	r2, r2, #26
 8002a20:	d42e      	bmi.n	8002a80 <_printf_common+0xc0>
 8002a22:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002a26:	4639      	mov	r1, r7
 8002a28:	4630      	mov	r0, r6
 8002a2a:	47c0      	blx	r8
 8002a2c:	3001      	adds	r0, #1
 8002a2e:	d021      	beq.n	8002a74 <_printf_common+0xb4>
 8002a30:	6823      	ldr	r3, [r4, #0]
 8002a32:	68e5      	ldr	r5, [r4, #12]
 8002a34:	f003 0306 	and.w	r3, r3, #6
 8002a38:	2b04      	cmp	r3, #4
 8002a3a:	bf18      	it	ne
 8002a3c:	2500      	movne	r5, #0
 8002a3e:	f8d9 2000 	ldr.w	r2, [r9]
 8002a42:	f04f 0900 	mov.w	r9, #0
 8002a46:	bf08      	it	eq
 8002a48:	1aad      	subeq	r5, r5, r2
 8002a4a:	68a3      	ldr	r3, [r4, #8]
 8002a4c:	6922      	ldr	r2, [r4, #16]
 8002a4e:	bf08      	it	eq
 8002a50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002a54:	4293      	cmp	r3, r2
 8002a56:	bfc4      	itt	gt
 8002a58:	1a9b      	subgt	r3, r3, r2
 8002a5a:	18ed      	addgt	r5, r5, r3
 8002a5c:	341a      	adds	r4, #26
 8002a5e:	454d      	cmp	r5, r9
 8002a60:	d11a      	bne.n	8002a98 <_printf_common+0xd8>
 8002a62:	2000      	movs	r0, #0
 8002a64:	e008      	b.n	8002a78 <_printf_common+0xb8>
 8002a66:	2301      	movs	r3, #1
 8002a68:	4652      	mov	r2, sl
 8002a6a:	4639      	mov	r1, r7
 8002a6c:	4630      	mov	r0, r6
 8002a6e:	47c0      	blx	r8
 8002a70:	3001      	adds	r0, #1
 8002a72:	d103      	bne.n	8002a7c <_printf_common+0xbc>
 8002a74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a7c:	3501      	adds	r5, #1
 8002a7e:	e7c2      	b.n	8002a06 <_printf_common+0x46>
 8002a80:	2030      	movs	r0, #48	; 0x30
 8002a82:	18e1      	adds	r1, r4, r3
 8002a84:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002a88:	1c5a      	adds	r2, r3, #1
 8002a8a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002a8e:	4422      	add	r2, r4
 8002a90:	3302      	adds	r3, #2
 8002a92:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002a96:	e7c4      	b.n	8002a22 <_printf_common+0x62>
 8002a98:	2301      	movs	r3, #1
 8002a9a:	4622      	mov	r2, r4
 8002a9c:	4639      	mov	r1, r7
 8002a9e:	4630      	mov	r0, r6
 8002aa0:	47c0      	blx	r8
 8002aa2:	3001      	adds	r0, #1
 8002aa4:	d0e6      	beq.n	8002a74 <_printf_common+0xb4>
 8002aa6:	f109 0901 	add.w	r9, r9, #1
 8002aaa:	e7d8      	b.n	8002a5e <_printf_common+0x9e>

08002aac <_printf_i>:
 8002aac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002ab0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002ab4:	460c      	mov	r4, r1
 8002ab6:	7e09      	ldrb	r1, [r1, #24]
 8002ab8:	b085      	sub	sp, #20
 8002aba:	296e      	cmp	r1, #110	; 0x6e
 8002abc:	4617      	mov	r7, r2
 8002abe:	4606      	mov	r6, r0
 8002ac0:	4698      	mov	r8, r3
 8002ac2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002ac4:	f000 80b3 	beq.w	8002c2e <_printf_i+0x182>
 8002ac8:	d822      	bhi.n	8002b10 <_printf_i+0x64>
 8002aca:	2963      	cmp	r1, #99	; 0x63
 8002acc:	d036      	beq.n	8002b3c <_printf_i+0x90>
 8002ace:	d80a      	bhi.n	8002ae6 <_printf_i+0x3a>
 8002ad0:	2900      	cmp	r1, #0
 8002ad2:	f000 80b9 	beq.w	8002c48 <_printf_i+0x19c>
 8002ad6:	2958      	cmp	r1, #88	; 0x58
 8002ad8:	f000 8083 	beq.w	8002be2 <_printf_i+0x136>
 8002adc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ae0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002ae4:	e032      	b.n	8002b4c <_printf_i+0xa0>
 8002ae6:	2964      	cmp	r1, #100	; 0x64
 8002ae8:	d001      	beq.n	8002aee <_printf_i+0x42>
 8002aea:	2969      	cmp	r1, #105	; 0x69
 8002aec:	d1f6      	bne.n	8002adc <_printf_i+0x30>
 8002aee:	6820      	ldr	r0, [r4, #0]
 8002af0:	6813      	ldr	r3, [r2, #0]
 8002af2:	0605      	lsls	r5, r0, #24
 8002af4:	f103 0104 	add.w	r1, r3, #4
 8002af8:	d52a      	bpl.n	8002b50 <_printf_i+0xa4>
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	6011      	str	r1, [r2, #0]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	da03      	bge.n	8002b0a <_printf_i+0x5e>
 8002b02:	222d      	movs	r2, #45	; 0x2d
 8002b04:	425b      	negs	r3, r3
 8002b06:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002b0a:	486f      	ldr	r0, [pc, #444]	; (8002cc8 <_printf_i+0x21c>)
 8002b0c:	220a      	movs	r2, #10
 8002b0e:	e039      	b.n	8002b84 <_printf_i+0xd8>
 8002b10:	2973      	cmp	r1, #115	; 0x73
 8002b12:	f000 809d 	beq.w	8002c50 <_printf_i+0x1a4>
 8002b16:	d808      	bhi.n	8002b2a <_printf_i+0x7e>
 8002b18:	296f      	cmp	r1, #111	; 0x6f
 8002b1a:	d020      	beq.n	8002b5e <_printf_i+0xb2>
 8002b1c:	2970      	cmp	r1, #112	; 0x70
 8002b1e:	d1dd      	bne.n	8002adc <_printf_i+0x30>
 8002b20:	6823      	ldr	r3, [r4, #0]
 8002b22:	f043 0320 	orr.w	r3, r3, #32
 8002b26:	6023      	str	r3, [r4, #0]
 8002b28:	e003      	b.n	8002b32 <_printf_i+0x86>
 8002b2a:	2975      	cmp	r1, #117	; 0x75
 8002b2c:	d017      	beq.n	8002b5e <_printf_i+0xb2>
 8002b2e:	2978      	cmp	r1, #120	; 0x78
 8002b30:	d1d4      	bne.n	8002adc <_printf_i+0x30>
 8002b32:	2378      	movs	r3, #120	; 0x78
 8002b34:	4865      	ldr	r0, [pc, #404]	; (8002ccc <_printf_i+0x220>)
 8002b36:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002b3a:	e055      	b.n	8002be8 <_printf_i+0x13c>
 8002b3c:	6813      	ldr	r3, [r2, #0]
 8002b3e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002b42:	1d19      	adds	r1, r3, #4
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	6011      	str	r1, [r2, #0]
 8002b48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e08c      	b.n	8002c6a <_printf_i+0x1be>
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002b56:	6011      	str	r1, [r2, #0]
 8002b58:	bf18      	it	ne
 8002b5a:	b21b      	sxthne	r3, r3
 8002b5c:	e7cf      	b.n	8002afe <_printf_i+0x52>
 8002b5e:	6813      	ldr	r3, [r2, #0]
 8002b60:	6825      	ldr	r5, [r4, #0]
 8002b62:	1d18      	adds	r0, r3, #4
 8002b64:	6010      	str	r0, [r2, #0]
 8002b66:	0628      	lsls	r0, r5, #24
 8002b68:	d501      	bpl.n	8002b6e <_printf_i+0xc2>
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	e002      	b.n	8002b74 <_printf_i+0xc8>
 8002b6e:	0668      	lsls	r0, r5, #25
 8002b70:	d5fb      	bpl.n	8002b6a <_printf_i+0xbe>
 8002b72:	881b      	ldrh	r3, [r3, #0]
 8002b74:	296f      	cmp	r1, #111	; 0x6f
 8002b76:	bf14      	ite	ne
 8002b78:	220a      	movne	r2, #10
 8002b7a:	2208      	moveq	r2, #8
 8002b7c:	4852      	ldr	r0, [pc, #328]	; (8002cc8 <_printf_i+0x21c>)
 8002b7e:	2100      	movs	r1, #0
 8002b80:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002b84:	6865      	ldr	r5, [r4, #4]
 8002b86:	2d00      	cmp	r5, #0
 8002b88:	60a5      	str	r5, [r4, #8]
 8002b8a:	f2c0 8095 	blt.w	8002cb8 <_printf_i+0x20c>
 8002b8e:	6821      	ldr	r1, [r4, #0]
 8002b90:	f021 0104 	bic.w	r1, r1, #4
 8002b94:	6021      	str	r1, [r4, #0]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d13d      	bne.n	8002c16 <_printf_i+0x16a>
 8002b9a:	2d00      	cmp	r5, #0
 8002b9c:	f040 808e 	bne.w	8002cbc <_printf_i+0x210>
 8002ba0:	4665      	mov	r5, ip
 8002ba2:	2a08      	cmp	r2, #8
 8002ba4:	d10b      	bne.n	8002bbe <_printf_i+0x112>
 8002ba6:	6823      	ldr	r3, [r4, #0]
 8002ba8:	07db      	lsls	r3, r3, #31
 8002baa:	d508      	bpl.n	8002bbe <_printf_i+0x112>
 8002bac:	6923      	ldr	r3, [r4, #16]
 8002bae:	6862      	ldr	r2, [r4, #4]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	bfde      	ittt	le
 8002bb4:	2330      	movle	r3, #48	; 0x30
 8002bb6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002bba:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002bbe:	ebac 0305 	sub.w	r3, ip, r5
 8002bc2:	6123      	str	r3, [r4, #16]
 8002bc4:	f8cd 8000 	str.w	r8, [sp]
 8002bc8:	463b      	mov	r3, r7
 8002bca:	aa03      	add	r2, sp, #12
 8002bcc:	4621      	mov	r1, r4
 8002bce:	4630      	mov	r0, r6
 8002bd0:	f7ff fef6 	bl	80029c0 <_printf_common>
 8002bd4:	3001      	adds	r0, #1
 8002bd6:	d14d      	bne.n	8002c74 <_printf_i+0x1c8>
 8002bd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002bdc:	b005      	add	sp, #20
 8002bde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002be2:	4839      	ldr	r0, [pc, #228]	; (8002cc8 <_printf_i+0x21c>)
 8002be4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002be8:	6813      	ldr	r3, [r2, #0]
 8002bea:	6821      	ldr	r1, [r4, #0]
 8002bec:	1d1d      	adds	r5, r3, #4
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	6015      	str	r5, [r2, #0]
 8002bf2:	060a      	lsls	r2, r1, #24
 8002bf4:	d50b      	bpl.n	8002c0e <_printf_i+0x162>
 8002bf6:	07ca      	lsls	r2, r1, #31
 8002bf8:	bf44      	itt	mi
 8002bfa:	f041 0120 	orrmi.w	r1, r1, #32
 8002bfe:	6021      	strmi	r1, [r4, #0]
 8002c00:	b91b      	cbnz	r3, 8002c0a <_printf_i+0x15e>
 8002c02:	6822      	ldr	r2, [r4, #0]
 8002c04:	f022 0220 	bic.w	r2, r2, #32
 8002c08:	6022      	str	r2, [r4, #0]
 8002c0a:	2210      	movs	r2, #16
 8002c0c:	e7b7      	b.n	8002b7e <_printf_i+0xd2>
 8002c0e:	064d      	lsls	r5, r1, #25
 8002c10:	bf48      	it	mi
 8002c12:	b29b      	uxthmi	r3, r3
 8002c14:	e7ef      	b.n	8002bf6 <_printf_i+0x14a>
 8002c16:	4665      	mov	r5, ip
 8002c18:	fbb3 f1f2 	udiv	r1, r3, r2
 8002c1c:	fb02 3311 	mls	r3, r2, r1, r3
 8002c20:	5cc3      	ldrb	r3, [r0, r3]
 8002c22:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002c26:	460b      	mov	r3, r1
 8002c28:	2900      	cmp	r1, #0
 8002c2a:	d1f5      	bne.n	8002c18 <_printf_i+0x16c>
 8002c2c:	e7b9      	b.n	8002ba2 <_printf_i+0xf6>
 8002c2e:	6813      	ldr	r3, [r2, #0]
 8002c30:	6825      	ldr	r5, [r4, #0]
 8002c32:	1d18      	adds	r0, r3, #4
 8002c34:	6961      	ldr	r1, [r4, #20]
 8002c36:	6010      	str	r0, [r2, #0]
 8002c38:	0628      	lsls	r0, r5, #24
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	d501      	bpl.n	8002c42 <_printf_i+0x196>
 8002c3e:	6019      	str	r1, [r3, #0]
 8002c40:	e002      	b.n	8002c48 <_printf_i+0x19c>
 8002c42:	066a      	lsls	r2, r5, #25
 8002c44:	d5fb      	bpl.n	8002c3e <_printf_i+0x192>
 8002c46:	8019      	strh	r1, [r3, #0]
 8002c48:	2300      	movs	r3, #0
 8002c4a:	4665      	mov	r5, ip
 8002c4c:	6123      	str	r3, [r4, #16]
 8002c4e:	e7b9      	b.n	8002bc4 <_printf_i+0x118>
 8002c50:	6813      	ldr	r3, [r2, #0]
 8002c52:	1d19      	adds	r1, r3, #4
 8002c54:	6011      	str	r1, [r2, #0]
 8002c56:	681d      	ldr	r5, [r3, #0]
 8002c58:	6862      	ldr	r2, [r4, #4]
 8002c5a:	2100      	movs	r1, #0
 8002c5c:	4628      	mov	r0, r5
 8002c5e:	f000 f837 	bl	8002cd0 <memchr>
 8002c62:	b108      	cbz	r0, 8002c68 <_printf_i+0x1bc>
 8002c64:	1b40      	subs	r0, r0, r5
 8002c66:	6060      	str	r0, [r4, #4]
 8002c68:	6863      	ldr	r3, [r4, #4]
 8002c6a:	6123      	str	r3, [r4, #16]
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c72:	e7a7      	b.n	8002bc4 <_printf_i+0x118>
 8002c74:	6923      	ldr	r3, [r4, #16]
 8002c76:	462a      	mov	r2, r5
 8002c78:	4639      	mov	r1, r7
 8002c7a:	4630      	mov	r0, r6
 8002c7c:	47c0      	blx	r8
 8002c7e:	3001      	adds	r0, #1
 8002c80:	d0aa      	beq.n	8002bd8 <_printf_i+0x12c>
 8002c82:	6823      	ldr	r3, [r4, #0]
 8002c84:	079b      	lsls	r3, r3, #30
 8002c86:	d413      	bmi.n	8002cb0 <_printf_i+0x204>
 8002c88:	68e0      	ldr	r0, [r4, #12]
 8002c8a:	9b03      	ldr	r3, [sp, #12]
 8002c8c:	4298      	cmp	r0, r3
 8002c8e:	bfb8      	it	lt
 8002c90:	4618      	movlt	r0, r3
 8002c92:	e7a3      	b.n	8002bdc <_printf_i+0x130>
 8002c94:	2301      	movs	r3, #1
 8002c96:	464a      	mov	r2, r9
 8002c98:	4639      	mov	r1, r7
 8002c9a:	4630      	mov	r0, r6
 8002c9c:	47c0      	blx	r8
 8002c9e:	3001      	adds	r0, #1
 8002ca0:	d09a      	beq.n	8002bd8 <_printf_i+0x12c>
 8002ca2:	3501      	adds	r5, #1
 8002ca4:	68e3      	ldr	r3, [r4, #12]
 8002ca6:	9a03      	ldr	r2, [sp, #12]
 8002ca8:	1a9b      	subs	r3, r3, r2
 8002caa:	42ab      	cmp	r3, r5
 8002cac:	dcf2      	bgt.n	8002c94 <_printf_i+0x1e8>
 8002cae:	e7eb      	b.n	8002c88 <_printf_i+0x1dc>
 8002cb0:	2500      	movs	r5, #0
 8002cb2:	f104 0919 	add.w	r9, r4, #25
 8002cb6:	e7f5      	b.n	8002ca4 <_printf_i+0x1f8>
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d1ac      	bne.n	8002c16 <_printf_i+0x16a>
 8002cbc:	7803      	ldrb	r3, [r0, #0]
 8002cbe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002cc2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002cc6:	e76c      	b.n	8002ba2 <_printf_i+0xf6>
 8002cc8:	08002f61 	.word	0x08002f61
 8002ccc:	08002f72 	.word	0x08002f72

08002cd0 <memchr>:
 8002cd0:	b510      	push	{r4, lr}
 8002cd2:	b2c9      	uxtb	r1, r1
 8002cd4:	4402      	add	r2, r0
 8002cd6:	4290      	cmp	r0, r2
 8002cd8:	4603      	mov	r3, r0
 8002cda:	d101      	bne.n	8002ce0 <memchr+0x10>
 8002cdc:	2300      	movs	r3, #0
 8002cde:	e003      	b.n	8002ce8 <memchr+0x18>
 8002ce0:	781c      	ldrb	r4, [r3, #0]
 8002ce2:	3001      	adds	r0, #1
 8002ce4:	428c      	cmp	r4, r1
 8002ce6:	d1f6      	bne.n	8002cd6 <memchr+0x6>
 8002ce8:	4618      	mov	r0, r3
 8002cea:	bd10      	pop	{r4, pc}

08002cec <memcpy>:
 8002cec:	b510      	push	{r4, lr}
 8002cee:	1e43      	subs	r3, r0, #1
 8002cf0:	440a      	add	r2, r1
 8002cf2:	4291      	cmp	r1, r2
 8002cf4:	d100      	bne.n	8002cf8 <memcpy+0xc>
 8002cf6:	bd10      	pop	{r4, pc}
 8002cf8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002cfc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002d00:	e7f7      	b.n	8002cf2 <memcpy+0x6>

08002d02 <memmove>:
 8002d02:	4288      	cmp	r0, r1
 8002d04:	b510      	push	{r4, lr}
 8002d06:	eb01 0302 	add.w	r3, r1, r2
 8002d0a:	d807      	bhi.n	8002d1c <memmove+0x1a>
 8002d0c:	1e42      	subs	r2, r0, #1
 8002d0e:	4299      	cmp	r1, r3
 8002d10:	d00a      	beq.n	8002d28 <memmove+0x26>
 8002d12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002d16:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002d1a:	e7f8      	b.n	8002d0e <memmove+0xc>
 8002d1c:	4283      	cmp	r3, r0
 8002d1e:	d9f5      	bls.n	8002d0c <memmove+0xa>
 8002d20:	1881      	adds	r1, r0, r2
 8002d22:	1ad2      	subs	r2, r2, r3
 8002d24:	42d3      	cmn	r3, r2
 8002d26:	d100      	bne.n	8002d2a <memmove+0x28>
 8002d28:	bd10      	pop	{r4, pc}
 8002d2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002d2e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002d32:	e7f7      	b.n	8002d24 <memmove+0x22>

08002d34 <_free_r>:
 8002d34:	b538      	push	{r3, r4, r5, lr}
 8002d36:	4605      	mov	r5, r0
 8002d38:	2900      	cmp	r1, #0
 8002d3a:	d043      	beq.n	8002dc4 <_free_r+0x90>
 8002d3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d40:	1f0c      	subs	r4, r1, #4
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	bfb8      	it	lt
 8002d46:	18e4      	addlt	r4, r4, r3
 8002d48:	f000 f8d0 	bl	8002eec <__malloc_lock>
 8002d4c:	4a1e      	ldr	r2, [pc, #120]	; (8002dc8 <_free_r+0x94>)
 8002d4e:	6813      	ldr	r3, [r2, #0]
 8002d50:	4610      	mov	r0, r2
 8002d52:	b933      	cbnz	r3, 8002d62 <_free_r+0x2e>
 8002d54:	6063      	str	r3, [r4, #4]
 8002d56:	6014      	str	r4, [r2, #0]
 8002d58:	4628      	mov	r0, r5
 8002d5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002d5e:	f000 b8c6 	b.w	8002eee <__malloc_unlock>
 8002d62:	42a3      	cmp	r3, r4
 8002d64:	d90b      	bls.n	8002d7e <_free_r+0x4a>
 8002d66:	6821      	ldr	r1, [r4, #0]
 8002d68:	1862      	adds	r2, r4, r1
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	bf01      	itttt	eq
 8002d6e:	681a      	ldreq	r2, [r3, #0]
 8002d70:	685b      	ldreq	r3, [r3, #4]
 8002d72:	1852      	addeq	r2, r2, r1
 8002d74:	6022      	streq	r2, [r4, #0]
 8002d76:	6063      	str	r3, [r4, #4]
 8002d78:	6004      	str	r4, [r0, #0]
 8002d7a:	e7ed      	b.n	8002d58 <_free_r+0x24>
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	685a      	ldr	r2, [r3, #4]
 8002d80:	b10a      	cbz	r2, 8002d86 <_free_r+0x52>
 8002d82:	42a2      	cmp	r2, r4
 8002d84:	d9fa      	bls.n	8002d7c <_free_r+0x48>
 8002d86:	6819      	ldr	r1, [r3, #0]
 8002d88:	1858      	adds	r0, r3, r1
 8002d8a:	42a0      	cmp	r0, r4
 8002d8c:	d10b      	bne.n	8002da6 <_free_r+0x72>
 8002d8e:	6820      	ldr	r0, [r4, #0]
 8002d90:	4401      	add	r1, r0
 8002d92:	1858      	adds	r0, r3, r1
 8002d94:	4282      	cmp	r2, r0
 8002d96:	6019      	str	r1, [r3, #0]
 8002d98:	d1de      	bne.n	8002d58 <_free_r+0x24>
 8002d9a:	6810      	ldr	r0, [r2, #0]
 8002d9c:	6852      	ldr	r2, [r2, #4]
 8002d9e:	4401      	add	r1, r0
 8002da0:	6019      	str	r1, [r3, #0]
 8002da2:	605a      	str	r2, [r3, #4]
 8002da4:	e7d8      	b.n	8002d58 <_free_r+0x24>
 8002da6:	d902      	bls.n	8002dae <_free_r+0x7a>
 8002da8:	230c      	movs	r3, #12
 8002daa:	602b      	str	r3, [r5, #0]
 8002dac:	e7d4      	b.n	8002d58 <_free_r+0x24>
 8002dae:	6820      	ldr	r0, [r4, #0]
 8002db0:	1821      	adds	r1, r4, r0
 8002db2:	428a      	cmp	r2, r1
 8002db4:	bf01      	itttt	eq
 8002db6:	6811      	ldreq	r1, [r2, #0]
 8002db8:	6852      	ldreq	r2, [r2, #4]
 8002dba:	1809      	addeq	r1, r1, r0
 8002dbc:	6021      	streq	r1, [r4, #0]
 8002dbe:	6062      	str	r2, [r4, #4]
 8002dc0:	605c      	str	r4, [r3, #4]
 8002dc2:	e7c9      	b.n	8002d58 <_free_r+0x24>
 8002dc4:	bd38      	pop	{r3, r4, r5, pc}
 8002dc6:	bf00      	nop
 8002dc8:	20000094 	.word	0x20000094

08002dcc <_malloc_r>:
 8002dcc:	b570      	push	{r4, r5, r6, lr}
 8002dce:	1ccd      	adds	r5, r1, #3
 8002dd0:	f025 0503 	bic.w	r5, r5, #3
 8002dd4:	3508      	adds	r5, #8
 8002dd6:	2d0c      	cmp	r5, #12
 8002dd8:	bf38      	it	cc
 8002dda:	250c      	movcc	r5, #12
 8002ddc:	2d00      	cmp	r5, #0
 8002dde:	4606      	mov	r6, r0
 8002de0:	db01      	blt.n	8002de6 <_malloc_r+0x1a>
 8002de2:	42a9      	cmp	r1, r5
 8002de4:	d903      	bls.n	8002dee <_malloc_r+0x22>
 8002de6:	230c      	movs	r3, #12
 8002de8:	6033      	str	r3, [r6, #0]
 8002dea:	2000      	movs	r0, #0
 8002dec:	bd70      	pop	{r4, r5, r6, pc}
 8002dee:	f000 f87d 	bl	8002eec <__malloc_lock>
 8002df2:	4a21      	ldr	r2, [pc, #132]	; (8002e78 <_malloc_r+0xac>)
 8002df4:	6814      	ldr	r4, [r2, #0]
 8002df6:	4621      	mov	r1, r4
 8002df8:	b991      	cbnz	r1, 8002e20 <_malloc_r+0x54>
 8002dfa:	4c20      	ldr	r4, [pc, #128]	; (8002e7c <_malloc_r+0xb0>)
 8002dfc:	6823      	ldr	r3, [r4, #0]
 8002dfe:	b91b      	cbnz	r3, 8002e08 <_malloc_r+0x3c>
 8002e00:	4630      	mov	r0, r6
 8002e02:	f000 f863 	bl	8002ecc <_sbrk_r>
 8002e06:	6020      	str	r0, [r4, #0]
 8002e08:	4629      	mov	r1, r5
 8002e0a:	4630      	mov	r0, r6
 8002e0c:	f000 f85e 	bl	8002ecc <_sbrk_r>
 8002e10:	1c43      	adds	r3, r0, #1
 8002e12:	d124      	bne.n	8002e5e <_malloc_r+0x92>
 8002e14:	230c      	movs	r3, #12
 8002e16:	4630      	mov	r0, r6
 8002e18:	6033      	str	r3, [r6, #0]
 8002e1a:	f000 f868 	bl	8002eee <__malloc_unlock>
 8002e1e:	e7e4      	b.n	8002dea <_malloc_r+0x1e>
 8002e20:	680b      	ldr	r3, [r1, #0]
 8002e22:	1b5b      	subs	r3, r3, r5
 8002e24:	d418      	bmi.n	8002e58 <_malloc_r+0x8c>
 8002e26:	2b0b      	cmp	r3, #11
 8002e28:	d90f      	bls.n	8002e4a <_malloc_r+0x7e>
 8002e2a:	600b      	str	r3, [r1, #0]
 8002e2c:	18cc      	adds	r4, r1, r3
 8002e2e:	50cd      	str	r5, [r1, r3]
 8002e30:	4630      	mov	r0, r6
 8002e32:	f000 f85c 	bl	8002eee <__malloc_unlock>
 8002e36:	f104 000b 	add.w	r0, r4, #11
 8002e3a:	1d23      	adds	r3, r4, #4
 8002e3c:	f020 0007 	bic.w	r0, r0, #7
 8002e40:	1ac3      	subs	r3, r0, r3
 8002e42:	d0d3      	beq.n	8002dec <_malloc_r+0x20>
 8002e44:	425a      	negs	r2, r3
 8002e46:	50e2      	str	r2, [r4, r3]
 8002e48:	e7d0      	b.n	8002dec <_malloc_r+0x20>
 8002e4a:	684b      	ldr	r3, [r1, #4]
 8002e4c:	428c      	cmp	r4, r1
 8002e4e:	bf16      	itet	ne
 8002e50:	6063      	strne	r3, [r4, #4]
 8002e52:	6013      	streq	r3, [r2, #0]
 8002e54:	460c      	movne	r4, r1
 8002e56:	e7eb      	b.n	8002e30 <_malloc_r+0x64>
 8002e58:	460c      	mov	r4, r1
 8002e5a:	6849      	ldr	r1, [r1, #4]
 8002e5c:	e7cc      	b.n	8002df8 <_malloc_r+0x2c>
 8002e5e:	1cc4      	adds	r4, r0, #3
 8002e60:	f024 0403 	bic.w	r4, r4, #3
 8002e64:	42a0      	cmp	r0, r4
 8002e66:	d005      	beq.n	8002e74 <_malloc_r+0xa8>
 8002e68:	1a21      	subs	r1, r4, r0
 8002e6a:	4630      	mov	r0, r6
 8002e6c:	f000 f82e 	bl	8002ecc <_sbrk_r>
 8002e70:	3001      	adds	r0, #1
 8002e72:	d0cf      	beq.n	8002e14 <_malloc_r+0x48>
 8002e74:	6025      	str	r5, [r4, #0]
 8002e76:	e7db      	b.n	8002e30 <_malloc_r+0x64>
 8002e78:	20000094 	.word	0x20000094
 8002e7c:	20000098 	.word	0x20000098

08002e80 <_realloc_r>:
 8002e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e82:	4607      	mov	r7, r0
 8002e84:	4614      	mov	r4, r2
 8002e86:	460e      	mov	r6, r1
 8002e88:	b921      	cbnz	r1, 8002e94 <_realloc_r+0x14>
 8002e8a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002e8e:	4611      	mov	r1, r2
 8002e90:	f7ff bf9c 	b.w	8002dcc <_malloc_r>
 8002e94:	b922      	cbnz	r2, 8002ea0 <_realloc_r+0x20>
 8002e96:	f7ff ff4d 	bl	8002d34 <_free_r>
 8002e9a:	4625      	mov	r5, r4
 8002e9c:	4628      	mov	r0, r5
 8002e9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ea0:	f000 f826 	bl	8002ef0 <_malloc_usable_size_r>
 8002ea4:	42a0      	cmp	r0, r4
 8002ea6:	d20f      	bcs.n	8002ec8 <_realloc_r+0x48>
 8002ea8:	4621      	mov	r1, r4
 8002eaa:	4638      	mov	r0, r7
 8002eac:	f7ff ff8e 	bl	8002dcc <_malloc_r>
 8002eb0:	4605      	mov	r5, r0
 8002eb2:	2800      	cmp	r0, #0
 8002eb4:	d0f2      	beq.n	8002e9c <_realloc_r+0x1c>
 8002eb6:	4631      	mov	r1, r6
 8002eb8:	4622      	mov	r2, r4
 8002eba:	f7ff ff17 	bl	8002cec <memcpy>
 8002ebe:	4631      	mov	r1, r6
 8002ec0:	4638      	mov	r0, r7
 8002ec2:	f7ff ff37 	bl	8002d34 <_free_r>
 8002ec6:	e7e9      	b.n	8002e9c <_realloc_r+0x1c>
 8002ec8:	4635      	mov	r5, r6
 8002eca:	e7e7      	b.n	8002e9c <_realloc_r+0x1c>

08002ecc <_sbrk_r>:
 8002ecc:	b538      	push	{r3, r4, r5, lr}
 8002ece:	2300      	movs	r3, #0
 8002ed0:	4c05      	ldr	r4, [pc, #20]	; (8002ee8 <_sbrk_r+0x1c>)
 8002ed2:	4605      	mov	r5, r0
 8002ed4:	4608      	mov	r0, r1
 8002ed6:	6023      	str	r3, [r4, #0]
 8002ed8:	f7fd fb06 	bl	80004e8 <_sbrk>
 8002edc:	1c43      	adds	r3, r0, #1
 8002ede:	d102      	bne.n	8002ee6 <_sbrk_r+0x1a>
 8002ee0:	6823      	ldr	r3, [r4, #0]
 8002ee2:	b103      	cbz	r3, 8002ee6 <_sbrk_r+0x1a>
 8002ee4:	602b      	str	r3, [r5, #0]
 8002ee6:	bd38      	pop	{r3, r4, r5, pc}
 8002ee8:	20000248 	.word	0x20000248

08002eec <__malloc_lock>:
 8002eec:	4770      	bx	lr

08002eee <__malloc_unlock>:
 8002eee:	4770      	bx	lr

08002ef0 <_malloc_usable_size_r>:
 8002ef0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ef4:	1f18      	subs	r0, r3, #4
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	bfbc      	itt	lt
 8002efa:	580b      	ldrlt	r3, [r1, r0]
 8002efc:	18c0      	addlt	r0, r0, r3
 8002efe:	4770      	bx	lr

08002f00 <_init>:
 8002f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f02:	bf00      	nop
 8002f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f06:	bc08      	pop	{r3}
 8002f08:	469e      	mov	lr, r3
 8002f0a:	4770      	bx	lr

08002f0c <_fini>:
 8002f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f0e:	bf00      	nop
 8002f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f12:	bc08      	pop	{r3}
 8002f14:	469e      	mov	lr, r3
 8002f16:	4770      	bx	lr
