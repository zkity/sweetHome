
curtain.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b60  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08004c6c  08004c6c  00014c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cf0  08004cf0  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08004cf0  08004cf0  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004cf0  08004cf0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004cf0  08004cf0  00014cf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004cf4  08004cf4  00014cf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004cf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  20000078  08004d70  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000328  08004d70  00020328  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000adba  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001aaf  00000000  00000000  0002ae5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bf0  00000000  00000000  0002c910  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b18  00000000  00000000  0002d500  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000147e7  00000000  00000000  0002e018  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000812a  00000000  00000000  000427ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00072aa5  00000000  00000000  0004a929  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bd3ce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035d4  00000000  00000000  000bd44c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08004c54 	.word	0x08004c54

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08004c54 	.word	0x08004c54

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028a:	f1a4 0401 	sub.w	r4, r4, #1
 800028e:	d1e9      	bne.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2uiz>:
 80008e8:	004a      	lsls	r2, r1, #1
 80008ea:	d211      	bcs.n	8000910 <__aeabi_d2uiz+0x28>
 80008ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f0:	d211      	bcs.n	8000916 <__aeabi_d2uiz+0x2e>
 80008f2:	d50d      	bpl.n	8000910 <__aeabi_d2uiz+0x28>
 80008f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008fc:	d40e      	bmi.n	800091c <__aeabi_d2uiz+0x34>
 80008fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000902:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000906:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090a:	fa23 f002 	lsr.w	r0, r3, r2
 800090e:	4770      	bx	lr
 8000910:	f04f 0000 	mov.w	r0, #0
 8000914:	4770      	bx	lr
 8000916:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091a:	d102      	bne.n	8000922 <__aeabi_d2uiz+0x3a>
 800091c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000920:	4770      	bx	lr
 8000922:	f04f 0000 	mov.w	r0, #0
 8000926:	4770      	bx	lr

08000928 <stepper_motor_contoler>:
 * @Param: distance: 电机总共转的半圈数
 * @Param: frequence: 电机转动频率，可取1-100，为了准确最好取可以被100整除的数字, 1代表半圈
 *
 * @Return: 0-没走， 1-开始走
 */
uint8_t stepper_motor_contoler(uint8_t enable, uint8_t direction, uint16_t distance, uint8_t frequence){
 8000928:	b590      	push	{r4, r7, lr}
 800092a:	b085      	sub	sp, #20
 800092c:	af00      	add	r7, sp, #0
 800092e:	4604      	mov	r4, r0
 8000930:	4608      	mov	r0, r1
 8000932:	4611      	mov	r1, r2
 8000934:	461a      	mov	r2, r3
 8000936:	4623      	mov	r3, r4
 8000938:	71fb      	strb	r3, [r7, #7]
 800093a:	4603      	mov	r3, r0
 800093c:	71bb      	strb	r3, [r7, #6]
 800093e:	460b      	mov	r3, r1
 8000940:	80bb      	strh	r3, [r7, #4]
 8000942:	4613      	mov	r3, r2
 8000944:	70fb      	strb	r3, [r7, #3]
	if(distance == 0){
 8000946:	88bb      	ldrh	r3, [r7, #4]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d101      	bne.n	8000950 <stepper_motor_contoler+0x28>
		return 0;
 800094c:	2300      	movs	r3, #0
 800094e:	e058      	b.n	8000a02 <stepper_motor_contoler+0xda>
	}
	motor_on = 1;
 8000950:	4b2e      	ldr	r3, [pc, #184]	; (8000a0c <stepper_motor_contoler+0xe4>)
 8000952:	2201      	movs	r2, #1
 8000954:	701a      	strb	r2, [r3, #0]
	pwm_counter_idx = 0;
 8000956:	4b2e      	ldr	r3, [pc, #184]	; (8000a10 <stepper_motor_contoler+0xe8>)
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
	// 控制点击是否允许空转
	if(enable == 0){
 800095c:	79fb      	ldrb	r3, [r7, #7]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d105      	bne.n	800096e <stepper_motor_contoler+0x46>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8000962:	2201      	movs	r2, #1
 8000964:	2108      	movs	r1, #8
 8000966:	482b      	ldr	r0, [pc, #172]	; (8000a14 <stepper_motor_contoler+0xec>)
 8000968:	f001 fcb2 	bl	80022d0 <HAL_GPIO_WritePin>
 800096c:	e004      	b.n	8000978 <stepper_motor_contoler+0x50>
	}else{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 800096e:	2200      	movs	r2, #0
 8000970:	2108      	movs	r1, #8
 8000972:	4828      	ldr	r0, [pc, #160]	; (8000a14 <stepper_motor_contoler+0xec>)
 8000974:	f001 fcac 	bl	80022d0 <HAL_GPIO_WritePin>
	}
	// 控制电机正转或反转
	if(direction == 0){
 8000978:	79bb      	ldrb	r3, [r7, #6]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d105      	bne.n	800098a <stepper_motor_contoler+0x62>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800097e:	2201      	movs	r2, #1
 8000980:	2110      	movs	r1, #16
 8000982:	4824      	ldr	r0, [pc, #144]	; (8000a14 <stepper_motor_contoler+0xec>)
 8000984:	f001 fca4 	bl	80022d0 <HAL_GPIO_WritePin>
 8000988:	e004      	b.n	8000994 <stepper_motor_contoler+0x6c>
	}else{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800098a:	2200      	movs	r2, #0
 800098c:	2110      	movs	r1, #16
 800098e:	4821      	ldr	r0, [pc, #132]	; (8000a14 <stepper_motor_contoler+0xec>)
 8000990:	f001 fc9e 	bl	80022d0 <HAL_GPIO_WritePin>
	}
	uint8_t reg_freq = 0;
 8000994:	2300      	movs	r3, #0
 8000996:	73fb      	strb	r3, [r7, #15]
	// reg_freq = 100 / frequecne;
	reg_freq = 200 / frequence;
 8000998:	78fb      	ldrb	r3, [r7, #3]
 800099a:	22c8      	movs	r2, #200	; 0xc8
 800099c:	fb92 f3f3 	sdiv	r3, r2, r3
 80009a0:	73fb      	strb	r3, [r7, #15]
	// 控制步进电机的转速
	TIM1->ARR = reg_freq-1;
 80009a2:	7bfb      	ldrb	r3, [r7, #15]
 80009a4:	1e5a      	subs	r2, r3, #1
 80009a6:	4b1c      	ldr	r3, [pc, #112]	; (8000a18 <stepper_motor_contoler+0xf0>)
 80009a8:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM1->CCR2 = (uint8_t)(reg_freq * 0.5);
 80009aa:	7bfb      	ldrb	r3, [r7, #15]
 80009ac:	4618      	mov	r0, r3
 80009ae:	f7ff fd1f 	bl	80003f0 <__aeabi_i2d>
 80009b2:	f04f 0200 	mov.w	r2, #0
 80009b6:	4b19      	ldr	r3, [pc, #100]	; (8000a1c <stepper_motor_contoler+0xf4>)
 80009b8:	f7ff fd84 	bl	80004c4 <__aeabi_dmul>
 80009bc:	4603      	mov	r3, r0
 80009be:	460c      	mov	r4, r1
 80009c0:	4618      	mov	r0, r3
 80009c2:	4621      	mov	r1, r4
 80009c4:	f7ff ff90 	bl	80008e8 <__aeabi_d2uiz>
 80009c8:	4603      	mov	r3, r0
 80009ca:	b2da      	uxtb	r2, r3
 80009cc:	4b12      	ldr	r3, [pc, #72]	; (8000a18 <stepper_motor_contoler+0xf0>)
 80009ce:	639a      	str	r2, [r3, #56]	; 0x38

	// 由上述可知，计时器的频率为 80K/reg_freq，则步进电机共走的圈数为T*frequence，同时n = T * f = T * 80K / ( 100 / frequence)
	// 控制电机走的圈数
	pwm_counter = distance * 200;
 80009d0:	88bb      	ldrh	r3, [r7, #4]
 80009d2:	22c8      	movs	r2, #200	; 0xc8
 80009d4:	fb02 f303 	mul.w	r3, r2, r3
 80009d8:	461a      	mov	r2, r3
 80009da:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <stepper_motor_contoler+0xf8>)
 80009dc:	601a      	str	r2, [r3, #0]
	// pwm_counter = distance * 800;

	// 开启时钟中断
	if(HAL_OK != HAL_TIM_Base_Start_IT(&htim1))
 80009de:	4811      	ldr	r0, [pc, #68]	; (8000a24 <stepper_motor_contoler+0xfc>)
 80009e0:	f002 f8d5 	bl	8002b8e <HAL_TIM_Base_Start_IT>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <stepper_motor_contoler+0xc6>
		Error_Handler();
 80009ea:	f000 fc15 	bl	8001218 <Error_Handler>

	// 开启电机的PWM输出
	if(HAL_OK != HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2))
 80009ee:	2104      	movs	r1, #4
 80009f0:	480c      	ldr	r0, [pc, #48]	; (8000a24 <stepper_motor_contoler+0xfc>)
 80009f2:	f002 f94d 	bl	8002c90 <HAL_TIM_PWM_Start>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <stepper_motor_contoler+0xd8>
		Error_Handler();
 80009fc:	f000 fc0c 	bl	8001218 <Error_Handler>

	return 1;
 8000a00:	2301      	movs	r3, #1
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3714      	adds	r7, #20
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd90      	pop	{r4, r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	200000a0 	.word	0x200000a0
 8000a10:	2000009c 	.word	0x2000009c
 8000a14:	40010800 	.word	0x40010800
 8000a18:	40012c00 	.word	0x40012c00
 8000a1c:	3fe00000 	.word	0x3fe00000
 8000a20:	20000098 	.word	0x20000098
 8000a24:	2000024c 	.word	0x2000024c

08000a28 <copyMat>:

// 复制数组
void copyMat(uint8_t *a, uint8_t *b, uint8_t len){
 8000a28:	b480      	push	{r7}
 8000a2a:	b087      	sub	sp, #28
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	60f8      	str	r0, [r7, #12]
 8000a30:	60b9      	str	r1, [r7, #8]
 8000a32:	4613      	mov	r3, r2
 8000a34:	71fb      	strb	r3, [r7, #7]
	for(int i = 0; i< len; i++){
 8000a36:	2300      	movs	r3, #0
 8000a38:	617b      	str	r3, [r7, #20]
 8000a3a:	e00a      	b.n	8000a52 <copyMat+0x2a>
		b[i] = a[i];
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	68fa      	ldr	r2, [r7, #12]
 8000a40:	441a      	add	r2, r3
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	68b9      	ldr	r1, [r7, #8]
 8000a46:	440b      	add	r3, r1
 8000a48:	7812      	ldrb	r2, [r2, #0]
 8000a4a:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i< len; i++){
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	3301      	adds	r3, #1
 8000a50:	617b      	str	r3, [r7, #20]
 8000a52:	79fb      	ldrb	r3, [r7, #7]
 8000a54:	697a      	ldr	r2, [r7, #20]
 8000a56:	429a      	cmp	r2, r3
 8000a58:	dbf0      	blt.n	8000a3c <copyMat+0x14>
	}
}
 8000a5a:	bf00      	nop
 8000a5c:	371c      	adds	r7, #28
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bc80      	pop	{r7}
 8000a62:	4770      	bx	lr

08000a64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a64:	b590      	push	{r4, r7, lr}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a6a:	f000 fee1 	bl	8001830 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a6e:	f000 f9ad 	bl	8000dcc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a72:	f000 fb1b 	bl	80010ac <MX_GPIO_Init>
  MX_DMA_Init();
 8000a76:	f000 fae3 	bl	8001040 <MX_DMA_Init>
  MX_TIM1_Init();
 8000a7a:	f000 f9ed 	bl	8000e58 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000a7e:	f000 fa8b 	bl	8000f98 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000a82:	f000 fab3 	bl	8000fec <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  // 串口1使用DMA方式循环接收数据
  HAL_UART_Receive_DMA(&huart1,\
 8000a86:	2205      	movs	r2, #5
 8000a88:	49ad      	ldr	r1, [pc, #692]	; (8000d40 <main+0x2dc>)
 8000a8a:	48ae      	ldr	r0, [pc, #696]	; (8000d44 <main+0x2e0>)
 8000a8c:	f003 f82c 	bl	8003ae8 <HAL_UART_Receive_DMA>
		  	  	  	   ZB_rec_buf,\
  					   ZB_RECEIVE_DATA_LEN);

  sendToLogByDMA("init curtain\n");
 8000a90:	4aad      	ldr	r2, [pc, #692]	; (8000d48 <main+0x2e4>)
 8000a92:	4bae      	ldr	r3, [pc, #696]	; (8000d4c <main+0x2e8>)
 8000a94:	4614      	mov	r4, r2
 8000a96:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000a98:	6020      	str	r0, [r4, #0]
 8000a9a:	6061      	str	r1, [r4, #4]
 8000a9c:	60a2      	str	r2, [r4, #8]
 8000a9e:	881b      	ldrh	r3, [r3, #0]
 8000aa0:	81a3      	strh	r3, [r4, #12]
 8000aa2:	230d      	movs	r3, #13
 8000aa4:	b29b      	uxth	r3, r3
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	49a7      	ldr	r1, [pc, #668]	; (8000d48 <main+0x2e4>)
 8000aaa:	48a9      	ldr	r0, [pc, #676]	; (8000d50 <main+0x2ec>)
 8000aac:	f002 ffb0 	bl	8003a10 <HAL_UART_Transmit_DMA>
  HAL_Delay(50);
 8000ab0:	2032      	movs	r0, #50	; 0x32
 8000ab2:	f000 ff1f 	bl	80018f4 <HAL_Delay>
  sendToLogByDMA("%c\n", DEVICE_ADDRESS);
 8000ab6:	2364      	movs	r3, #100	; 0x64
 8000ab8:	461a      	mov	r2, r3
 8000aba:	49a6      	ldr	r1, [pc, #664]	; (8000d54 <main+0x2f0>)
 8000abc:	48a2      	ldr	r0, [pc, #648]	; (8000d48 <main+0x2e4>)
 8000abe:	f003 fcb7 	bl	8004430 <siprintf>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	b29b      	uxth	r3, r3
 8000ac6:	461a      	mov	r2, r3
 8000ac8:	499f      	ldr	r1, [pc, #636]	; (8000d48 <main+0x2e4>)
 8000aca:	48a1      	ldr	r0, [pc, #644]	; (8000d50 <main+0x2ec>)
 8000acc:	f002 ffa0 	bl	8003a10 <HAL_UART_Transmit_DMA>
 
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t zb_cache[ZB_RECEIVE_DATA_LEN] = {0};
 8000ad0:	463b      	mov	r3, r7
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
 8000ad6:	711a      	strb	r2, [r3, #4]
  while (1)
  {
	  // ZigBee接收到指令
	  if(is_ZB_rec == 1){
 8000ad8:	4b9f      	ldr	r3, [pc, #636]	; (8000d58 <main+0x2f4>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	d1fb      	bne.n	8000ad8 <main+0x74>
		  // sendToLogByDMA("zb get data! %c, %c, %c, %c, %c\n", ZB_rec_buf[0], ZB_rec_buf[1], ZB_rec_buf[2], ZB_rec_buf[3], ZB_rec_buf[4]);
		  // HAL_Delay(50);
		  // 将指令复制到cache
	  	  copyMat(ZB_rec_buf, zb_cache, ZB_RECEIVE_DATA_LEN);
 8000ae0:	463b      	mov	r3, r7
 8000ae2:	2205      	movs	r2, #5
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4896      	ldr	r0, [pc, #600]	; (8000d40 <main+0x2dc>)
 8000ae8:	f7ff ff9e 	bl	8000a28 <copyMat>
	  	  is_ZB_rec = 0;
 8000aec:	4b9a      	ldr	r3, [pc, #616]	; (8000d58 <main+0x2f4>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	701a      	strb	r2, [r3, #0]
	  	  // 若已近处理则抛弃
	  	  if(zb_cache[1] == cmd_idx){
 8000af2:	787a      	ldrb	r2, [r7, #1]
 8000af4:	4b99      	ldr	r3, [pc, #612]	; (8000d5c <main+0x2f8>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	f000 815a 	beq.w	8000db2 <main+0x34e>
	  		  continue;
	  	  }else{
	  		  cmd_idx = zb_cache[1];
 8000afe:	787a      	ldrb	r2, [r7, #1]
 8000b00:	4b96      	ldr	r3, [pc, #600]	; (8000d5c <main+0x2f8>)
 8000b02:	701a      	strb	r2, [r3, #0]
			  // sendToLogByDMA("zb get data!\n");
			  // HAL_Delay(50);
	  		  // 处理指令，配对
	  		  if(zb_cache[2] == 'a'){
 8000b04:	78bb      	ldrb	r3, [r7, #2]
 8000b06:	2b61      	cmp	r3, #97	; 0x61
 8000b08:	d139      	bne.n	8000b7e <main+0x11a>
	  			  if((DEVICE_PAIR == zb_cache[3]) && (DEVICE_TYPE == zb_cache[4])){
 8000b0a:	78fb      	ldrb	r3, [r7, #3]
 8000b0c:	226f      	movs	r2, #111	; 0x6f
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d107      	bne.n	8000b22 <main+0xbe>
 8000b12:	793b      	ldrb	r3, [r7, #4]
 8000b14:	2263      	movs	r2, #99	; 0x63
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d103      	bne.n	8000b22 <main+0xbe>
	  				  zb_send[2] = 'T';
 8000b1a:	4b91      	ldr	r3, [pc, #580]	; (8000d60 <main+0x2fc>)
 8000b1c:	2254      	movs	r2, #84	; 0x54
 8000b1e:	709a      	strb	r2, [r3, #2]
 8000b20:	e002      	b.n	8000b28 <main+0xc4>
	  			  }else{
	  				  zb_send[2] = 'F';
 8000b22:	4b8f      	ldr	r3, [pc, #572]	; (8000d60 <main+0x2fc>)
 8000b24:	2246      	movs	r2, #70	; 0x46
 8000b26:	709a      	strb	r2, [r3, #2]
	  			  }
	  			  zb_send[0] = DEVICE_ADDRESS;
 8000b28:	2264      	movs	r2, #100	; 0x64
 8000b2a:	4b8d      	ldr	r3, [pc, #564]	; (8000d60 <main+0x2fc>)
 8000b2c:	701a      	strb	r2, [r3, #0]
	  			  zb_send[1] = cmd_idx;
 8000b2e:	4b8b      	ldr	r3, [pc, #556]	; (8000d5c <main+0x2f8>)
 8000b30:	781a      	ldrb	r2, [r3, #0]
 8000b32:	4b8b      	ldr	r3, [pc, #556]	; (8000d60 <main+0x2fc>)
 8000b34:	705a      	strb	r2, [r3, #1]
	  			  zb_send[3] = '|';
 8000b36:	4b8a      	ldr	r3, [pc, #552]	; (8000d60 <main+0x2fc>)
 8000b38:	227c      	movs	r2, #124	; 0x7c
 8000b3a:	70da      	strb	r2, [r3, #3]
				  sendToLogByDMA("zb send data!\n");
 8000b3c:	4a82      	ldr	r2, [pc, #520]	; (8000d48 <main+0x2e4>)
 8000b3e:	4b89      	ldr	r3, [pc, #548]	; (8000d64 <main+0x300>)
 8000b40:	4614      	mov	r4, r2
 8000b42:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000b44:	6020      	str	r0, [r4, #0]
 8000b46:	6061      	str	r1, [r4, #4]
 8000b48:	60a2      	str	r2, [r4, #8]
 8000b4a:	881a      	ldrh	r2, [r3, #0]
 8000b4c:	789b      	ldrb	r3, [r3, #2]
 8000b4e:	81a2      	strh	r2, [r4, #12]
 8000b50:	73a3      	strb	r3, [r4, #14]
 8000b52:	230e      	movs	r3, #14
 8000b54:	b29b      	uxth	r3, r3
 8000b56:	461a      	mov	r2, r3
 8000b58:	497b      	ldr	r1, [pc, #492]	; (8000d48 <main+0x2e4>)
 8000b5a:	487d      	ldr	r0, [pc, #500]	; (8000d50 <main+0x2ec>)
 8000b5c:	f002 ff58 	bl	8003a10 <HAL_UART_Transmit_DMA>
				  HAL_Delay(50);
 8000b60:	2032      	movs	r0, #50	; 0x32
 8000b62:	f000 fec7 	bl	80018f4 <HAL_Delay>
	  			  sendToZBByDMA(zb_send);
 8000b66:	497e      	ldr	r1, [pc, #504]	; (8000d60 <main+0x2fc>)
 8000b68:	487f      	ldr	r0, [pc, #508]	; (8000d68 <main+0x304>)
 8000b6a:	f003 fc61 	bl	8004430 <siprintf>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	b29b      	uxth	r3, r3
 8000b72:	461a      	mov	r2, r3
 8000b74:	497c      	ldr	r1, [pc, #496]	; (8000d68 <main+0x304>)
 8000b76:	4873      	ldr	r0, [pc, #460]	; (8000d44 <main+0x2e0>)
 8000b78:	f002 ff4a 	bl	8003a10 <HAL_UART_Transmit_DMA>
 8000b7c:	e7ac      	b.n	8000ad8 <main+0x74>
	  		  // 处理指令，控制窗帘的状态
	  		  }else if(zb_cache[2] == 'o'){
 8000b7e:	78bb      	ldrb	r3, [r7, #2]
 8000b80:	2b6f      	cmp	r3, #111	; 0x6f
 8000b82:	f040 8085 	bne.w	8000c90 <main+0x22c>
	  			  uint8_t circle = 0;
 8000b86:	2300      	movs	r3, #0
 8000b88:	71fb      	strb	r3, [r7, #7]
	  			  uint8_t dir = 0;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	71bb      	strb	r3, [r7, #6]
	  			  // 全部打开
	  			  if(zb_cache[3] == 'a'){
 8000b8e:	78fb      	ldrb	r3, [r7, #3]
 8000b90:	2b61      	cmp	r3, #97	; 0x61
 8000b92:	d11a      	bne.n	8000bca <main+0x166>
	  				  dir = 0;
 8000b94:	2300      	movs	r3, #0
 8000b96:	71bb      	strb	r3, [r7, #6]
	  				  if(status == 'a'){
 8000b98:	4b74      	ldr	r3, [pc, #464]	; (8000d6c <main+0x308>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	2b61      	cmp	r3, #97	; 0x61
 8000b9e:	d102      	bne.n	8000ba6 <main+0x142>
	  					  circle = 0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	71fb      	strb	r3, [r7, #7]
 8000ba4:	e00d      	b.n	8000bc2 <main+0x15e>
	  				  }else if(status == 'c'){
 8000ba6:	4b71      	ldr	r3, [pc, #452]	; (8000d6c <main+0x308>)
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	2b63      	cmp	r3, #99	; 0x63
 8000bac:	d103      	bne.n	8000bb6 <main+0x152>
	  					  circle = FULL_CIRCLE/2;
 8000bae:	2334      	movs	r3, #52	; 0x34
 8000bb0:	085b      	lsrs	r3, r3, #1
 8000bb2:	71fb      	strb	r3, [r7, #7]
 8000bb4:	e005      	b.n	8000bc2 <main+0x15e>
	  				  }else if(status == 'e'){
 8000bb6:	4b6d      	ldr	r3, [pc, #436]	; (8000d6c <main+0x308>)
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	2b65      	cmp	r3, #101	; 0x65
 8000bbc:	d101      	bne.n	8000bc2 <main+0x15e>
	  					  circle = FULL_CIRCLE;
 8000bbe:	2334      	movs	r3, #52	; 0x34
 8000bc0:	71fb      	strb	r3, [r7, #7]
	  				  }
	  				  status = 'a';
 8000bc2:	4b6a      	ldr	r3, [pc, #424]	; (8000d6c <main+0x308>)
 8000bc4:	2261      	movs	r2, #97	; 0x61
 8000bc6:	701a      	strb	r2, [r3, #0]
 8000bc8:	e03f      	b.n	8000c4a <main+0x1e6>
	  			  // 打开一半
	  			  }else if(zb_cache[3] == 'c'){
 8000bca:	78fb      	ldrb	r3, [r7, #3]
 8000bcc:	2b63      	cmp	r3, #99	; 0x63
 8000bce:	d11f      	bne.n	8000c10 <main+0x1ac>
	  				  if(status == 'a'){
 8000bd0:	4b66      	ldr	r3, [pc, #408]	; (8000d6c <main+0x308>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	2b61      	cmp	r3, #97	; 0x61
 8000bd6:	d105      	bne.n	8000be4 <main+0x180>
	  					  circle = FULL_CIRCLE/2;
 8000bd8:	2334      	movs	r3, #52	; 0x34
 8000bda:	085b      	lsrs	r3, r3, #1
 8000bdc:	71fb      	strb	r3, [r7, #7]
	  					  dir = 1;
 8000bde:	2301      	movs	r3, #1
 8000be0:	71bb      	strb	r3, [r7, #6]
 8000be2:	e011      	b.n	8000c08 <main+0x1a4>
	  				  }else if(status == 'c'){
 8000be4:	4b61      	ldr	r3, [pc, #388]	; (8000d6c <main+0x308>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	2b63      	cmp	r3, #99	; 0x63
 8000bea:	d104      	bne.n	8000bf6 <main+0x192>
	  					  circle = 0;
 8000bec:	2300      	movs	r3, #0
 8000bee:	71fb      	strb	r3, [r7, #7]
	  					  dir = 0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	71bb      	strb	r3, [r7, #6]
 8000bf4:	e008      	b.n	8000c08 <main+0x1a4>
	  				  }else if(status == 'e'){
 8000bf6:	4b5d      	ldr	r3, [pc, #372]	; (8000d6c <main+0x308>)
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	2b65      	cmp	r3, #101	; 0x65
 8000bfc:	d104      	bne.n	8000c08 <main+0x1a4>
	  					  circle = FULL_CIRCLE/2;
 8000bfe:	2334      	movs	r3, #52	; 0x34
 8000c00:	085b      	lsrs	r3, r3, #1
 8000c02:	71fb      	strb	r3, [r7, #7]
	  					  dir = 0;
 8000c04:	2300      	movs	r3, #0
 8000c06:	71bb      	strb	r3, [r7, #6]
	  				  }
	  				  status = 'c';
 8000c08:	4b58      	ldr	r3, [pc, #352]	; (8000d6c <main+0x308>)
 8000c0a:	2263      	movs	r2, #99	; 0x63
 8000c0c:	701a      	strb	r2, [r3, #0]
 8000c0e:	e01c      	b.n	8000c4a <main+0x1e6>
	  			  // 全部关闭
	  			  }else if(zb_cache[3] == 'e'){
 8000c10:	78fb      	ldrb	r3, [r7, #3]
 8000c12:	2b65      	cmp	r3, #101	; 0x65
 8000c14:	d119      	bne.n	8000c4a <main+0x1e6>
	  				  dir = 1;
 8000c16:	2301      	movs	r3, #1
 8000c18:	71bb      	strb	r3, [r7, #6]
	  				  if(status == 'a'){
 8000c1a:	4b54      	ldr	r3, [pc, #336]	; (8000d6c <main+0x308>)
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	2b61      	cmp	r3, #97	; 0x61
 8000c20:	d102      	bne.n	8000c28 <main+0x1c4>
	  					  circle = FULL_CIRCLE;
 8000c22:	2334      	movs	r3, #52	; 0x34
 8000c24:	71fb      	strb	r3, [r7, #7]
 8000c26:	e00d      	b.n	8000c44 <main+0x1e0>
	  				  }else if(status == 'c'){
 8000c28:	4b50      	ldr	r3, [pc, #320]	; (8000d6c <main+0x308>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	2b63      	cmp	r3, #99	; 0x63
 8000c2e:	d103      	bne.n	8000c38 <main+0x1d4>
	  					  circle = FULL_CIRCLE/2;
 8000c30:	2334      	movs	r3, #52	; 0x34
 8000c32:	085b      	lsrs	r3, r3, #1
 8000c34:	71fb      	strb	r3, [r7, #7]
 8000c36:	e005      	b.n	8000c44 <main+0x1e0>
	  				  }else if(status == 'e'){
 8000c38:	4b4c      	ldr	r3, [pc, #304]	; (8000d6c <main+0x308>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	2b65      	cmp	r3, #101	; 0x65
 8000c3e:	d101      	bne.n	8000c44 <main+0x1e0>
	  					  circle = 0;
 8000c40:	2300      	movs	r3, #0
 8000c42:	71fb      	strb	r3, [r7, #7]
	  				  }
	  				  status = 'e';
 8000c44:	4b49      	ldr	r3, [pc, #292]	; (8000d6c <main+0x308>)
 8000c46:	2265      	movs	r2, #101	; 0x65
 8000c48:	701a      	strb	r2, [r3, #0]
	  			  }
	  			  stepper_motor_contoler(1, dir, circle, 1);
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	b29a      	uxth	r2, r3
 8000c4e:	79b9      	ldrb	r1, [r7, #6]
 8000c50:	2301      	movs	r3, #1
 8000c52:	2001      	movs	r0, #1
 8000c54:	f7ff fe68 	bl	8000928 <stepper_motor_contoler>
	  			  zb_send[0] = DEVICE_ADDRESS;
 8000c58:	2264      	movs	r2, #100	; 0x64
 8000c5a:	4b41      	ldr	r3, [pc, #260]	; (8000d60 <main+0x2fc>)
 8000c5c:	701a      	strb	r2, [r3, #0]
	  			  zb_send[1] = cmd_idx;
 8000c5e:	4b3f      	ldr	r3, [pc, #252]	; (8000d5c <main+0x2f8>)
 8000c60:	781a      	ldrb	r2, [r3, #0]
 8000c62:	4b3f      	ldr	r3, [pc, #252]	; (8000d60 <main+0x2fc>)
 8000c64:	705a      	strb	r2, [r3, #1]
	  			  zb_send[2] = 'T';
 8000c66:	4b3e      	ldr	r3, [pc, #248]	; (8000d60 <main+0x2fc>)
 8000c68:	2254      	movs	r2, #84	; 0x54
 8000c6a:	709a      	strb	r2, [r3, #2]
	  			  zb_send[3] = '|';
 8000c6c:	4b3c      	ldr	r3, [pc, #240]	; (8000d60 <main+0x2fc>)
 8000c6e:	227c      	movs	r2, #124	; 0x7c
 8000c70:	70da      	strb	r2, [r3, #3]
	  			  sendToZBByDMA(zb_send);
 8000c72:	493b      	ldr	r1, [pc, #236]	; (8000d60 <main+0x2fc>)
 8000c74:	483c      	ldr	r0, [pc, #240]	; (8000d68 <main+0x304>)
 8000c76:	f003 fbdb 	bl	8004430 <siprintf>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	b29b      	uxth	r3, r3
 8000c7e:	461a      	mov	r2, r3
 8000c80:	4939      	ldr	r1, [pc, #228]	; (8000d68 <main+0x304>)
 8000c82:	4830      	ldr	r0, [pc, #192]	; (8000d44 <main+0x2e0>)
 8000c84:	f002 fec4 	bl	8003a10 <HAL_UART_Transmit_DMA>
	  			  HAL_Delay(100);
 8000c88:	2064      	movs	r0, #100	; 0x64
 8000c8a:	f000 fe33 	bl	80018f4 <HAL_Delay>
 8000c8e:	e723      	b.n	8000ad8 <main+0x74>
	  			  // sendToLogByDMA("montor go %d, %d, %s\n", dir, circle, zb_send);
	  		  // 处理指令，返回窗帘的状态
	  		  }else if(zb_cache[2] == 'p'){
 8000c90:	78bb      	ldrb	r3, [r7, #2]
 8000c92:	2b70      	cmp	r3, #112	; 0x70
 8000c94:	d119      	bne.n	8000cca <main+0x266>
	  			  zb_send[0] = DEVICE_ADDRESS;
 8000c96:	2264      	movs	r2, #100	; 0x64
 8000c98:	4b31      	ldr	r3, [pc, #196]	; (8000d60 <main+0x2fc>)
 8000c9a:	701a      	strb	r2, [r3, #0]
	  			  zb_send[1] = cmd_idx;
 8000c9c:	4b2f      	ldr	r3, [pc, #188]	; (8000d5c <main+0x2f8>)
 8000c9e:	781a      	ldrb	r2, [r3, #0]
 8000ca0:	4b2f      	ldr	r3, [pc, #188]	; (8000d60 <main+0x2fc>)
 8000ca2:	705a      	strb	r2, [r3, #1]
	  			  zb_send[2] = status;
 8000ca4:	4b31      	ldr	r3, [pc, #196]	; (8000d6c <main+0x308>)
 8000ca6:	781a      	ldrb	r2, [r3, #0]
 8000ca8:	4b2d      	ldr	r3, [pc, #180]	; (8000d60 <main+0x2fc>)
 8000caa:	709a      	strb	r2, [r3, #2]
	  			  zb_send[3] = '|';
 8000cac:	4b2c      	ldr	r3, [pc, #176]	; (8000d60 <main+0x2fc>)
 8000cae:	227c      	movs	r2, #124	; 0x7c
 8000cb0:	70da      	strb	r2, [r3, #3]
	  			  sendToZBByDMA(zb_send);
 8000cb2:	492b      	ldr	r1, [pc, #172]	; (8000d60 <main+0x2fc>)
 8000cb4:	482c      	ldr	r0, [pc, #176]	; (8000d68 <main+0x304>)
 8000cb6:	f003 fbbb 	bl	8004430 <siprintf>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	b29b      	uxth	r3, r3
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	4929      	ldr	r1, [pc, #164]	; (8000d68 <main+0x304>)
 8000cc2:	4820      	ldr	r0, [pc, #128]	; (8000d44 <main+0x2e0>)
 8000cc4:	f002 fea4 	bl	8003a10 <HAL_UART_Transmit_DMA>
 8000cc8:	e706      	b.n	8000ad8 <main+0x74>
	  		  // 处理指令，控制窗帘的场景
	  		  }else if(zb_cache[2] == 'q'){
 8000cca:	78bb      	ldrb	r3, [r7, #2]
 8000ccc:	2b71      	cmp	r3, #113	; 0x71
 8000cce:	f47f af03 	bne.w	8000ad8 <main+0x74>
	  			  if((zb_cache[3] == 'z') && (zb_cache[4] == 'c')){
 8000cd2:	78fb      	ldrb	r3, [r7, #3]
 8000cd4:	2b7a      	cmp	r3, #122	; 0x7a
 8000cd6:	d124      	bne.n	8000d22 <main+0x2be>
 8000cd8:	793b      	ldrb	r3, [r7, #4]
 8000cda:	2b63      	cmp	r3, #99	; 0x63
 8000cdc:	d121      	bne.n	8000d22 <main+0x2be>
		  			  zb_send[0] = DEVICE_ADDRESS;
 8000cde:	2264      	movs	r2, #100	; 0x64
 8000ce0:	4b1f      	ldr	r3, [pc, #124]	; (8000d60 <main+0x2fc>)
 8000ce2:	701a      	strb	r2, [r3, #0]
		  			  zb_send[1] = cmd_idx;
 8000ce4:	4b1d      	ldr	r3, [pc, #116]	; (8000d5c <main+0x2f8>)
 8000ce6:	781a      	ldrb	r2, [r3, #0]
 8000ce8:	4b1d      	ldr	r3, [pc, #116]	; (8000d60 <main+0x2fc>)
 8000cea:	705a      	strb	r2, [r3, #1]
		  			  zb_send[2] = sce[0];
 8000cec:	4b20      	ldr	r3, [pc, #128]	; (8000d70 <main+0x30c>)
 8000cee:	781a      	ldrb	r2, [r3, #0]
 8000cf0:	4b1b      	ldr	r3, [pc, #108]	; (8000d60 <main+0x2fc>)
 8000cf2:	709a      	strb	r2, [r3, #2]
		  			  zb_send[3] = sce[1];
 8000cf4:	4b1e      	ldr	r3, [pc, #120]	; (8000d70 <main+0x30c>)
 8000cf6:	785a      	ldrb	r2, [r3, #1]
 8000cf8:	4b19      	ldr	r3, [pc, #100]	; (8000d60 <main+0x2fc>)
 8000cfa:	70da      	strb	r2, [r3, #3]
		  			  zb_send[4] = sce[2];
 8000cfc:	4b1c      	ldr	r3, [pc, #112]	; (8000d70 <main+0x30c>)
 8000cfe:	789a      	ldrb	r2, [r3, #2]
 8000d00:	4b17      	ldr	r3, [pc, #92]	; (8000d60 <main+0x2fc>)
 8000d02:	711a      	strb	r2, [r3, #4]
		  			  zb_send[5] = '|';
 8000d04:	4b16      	ldr	r3, [pc, #88]	; (8000d60 <main+0x2fc>)
 8000d06:	227c      	movs	r2, #124	; 0x7c
 8000d08:	715a      	strb	r2, [r3, #5]
		  			  sendToZBByDMA(zb_send);
 8000d0a:	4915      	ldr	r1, [pc, #84]	; (8000d60 <main+0x2fc>)
 8000d0c:	4816      	ldr	r0, [pc, #88]	; (8000d68 <main+0x304>)
 8000d0e:	f003 fb8f 	bl	8004430 <siprintf>
 8000d12:	4603      	mov	r3, r0
 8000d14:	b29b      	uxth	r3, r3
 8000d16:	461a      	mov	r2, r3
 8000d18:	4913      	ldr	r1, [pc, #76]	; (8000d68 <main+0x304>)
 8000d1a:	480a      	ldr	r0, [pc, #40]	; (8000d44 <main+0x2e0>)
 8000d1c:	f002 fe78 	bl	8003a10 <HAL_UART_Transmit_DMA>
 8000d20:	e048      	b.n	8000db4 <main+0x350>
	  			  }else{
	  				  if(zb_cache[3] == 'a'){
 8000d22:	78fb      	ldrb	r3, [r7, #3]
 8000d24:	2b61      	cmp	r3, #97	; 0x61
 8000d26:	d103      	bne.n	8000d30 <main+0x2cc>
	  					  sce[0] = zb_cache[4];
 8000d28:	793a      	ldrb	r2, [r7, #4]
 8000d2a:	4b11      	ldr	r3, [pc, #68]	; (8000d70 <main+0x30c>)
 8000d2c:	701a      	strb	r2, [r3, #0]
 8000d2e:	e027      	b.n	8000d80 <main+0x31c>
	  				  }else if(zb_cache[3] == 'b'){
 8000d30:	78fb      	ldrb	r3, [r7, #3]
 8000d32:	2b62      	cmp	r3, #98	; 0x62
 8000d34:	d11e      	bne.n	8000d74 <main+0x310>
	  					  sce[1] = zb_cache[4];
 8000d36:	793a      	ldrb	r2, [r7, #4]
 8000d38:	4b0d      	ldr	r3, [pc, #52]	; (8000d70 <main+0x30c>)
 8000d3a:	705a      	strb	r2, [r3, #1]
 8000d3c:	e020      	b.n	8000d80 <main+0x31c>
 8000d3e:	bf00      	nop
 8000d40:	2000030c 	.word	0x2000030c
 8000d44:	20000200 	.word	0x20000200
 8000d48:	2000028c 	.word	0x2000028c
 8000d4c:	08004c6c 	.word	0x08004c6c
 8000d50:	200000f4 	.word	0x200000f4
 8000d54:	08004c7c 	.word	0x08004c7c
 8000d58:	200000a1 	.word	0x200000a1
 8000d5c:	20000094 	.word	0x20000094
 8000d60:	20000240 	.word	0x20000240
 8000d64:	08004c80 	.word	0x08004c80
 8000d68:	20000314 	.word	0x20000314
 8000d6c:	20000000 	.word	0x20000000
 8000d70:	20000004 	.word	0x20000004
	  				  }else if(zb_cache[3] == 'c'){
 8000d74:	78fb      	ldrb	r3, [r7, #3]
 8000d76:	2b63      	cmp	r3, #99	; 0x63
 8000d78:	d102      	bne.n	8000d80 <main+0x31c>
	  					  sce[2] = zb_cache[4];
 8000d7a:	793a      	ldrb	r2, [r7, #4]
 8000d7c:	4b0e      	ldr	r3, [pc, #56]	; (8000db8 <main+0x354>)
 8000d7e:	709a      	strb	r2, [r3, #2]
	  				  }
		  			  zb_send[0] = DEVICE_ADDRESS;
 8000d80:	2264      	movs	r2, #100	; 0x64
 8000d82:	4b0e      	ldr	r3, [pc, #56]	; (8000dbc <main+0x358>)
 8000d84:	701a      	strb	r2, [r3, #0]
		  			  zb_send[1] = cmd_idx;
 8000d86:	4b0e      	ldr	r3, [pc, #56]	; (8000dc0 <main+0x35c>)
 8000d88:	781a      	ldrb	r2, [r3, #0]
 8000d8a:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <main+0x358>)
 8000d8c:	705a      	strb	r2, [r3, #1]
		  			  zb_send[2] = 'T';
 8000d8e:	4b0b      	ldr	r3, [pc, #44]	; (8000dbc <main+0x358>)
 8000d90:	2254      	movs	r2, #84	; 0x54
 8000d92:	709a      	strb	r2, [r3, #2]
		  			  zb_send[3] = '|';
 8000d94:	4b09      	ldr	r3, [pc, #36]	; (8000dbc <main+0x358>)
 8000d96:	227c      	movs	r2, #124	; 0x7c
 8000d98:	70da      	strb	r2, [r3, #3]
		  			  sendToZBByDMA(zb_send);
 8000d9a:	4908      	ldr	r1, [pc, #32]	; (8000dbc <main+0x358>)
 8000d9c:	4809      	ldr	r0, [pc, #36]	; (8000dc4 <main+0x360>)
 8000d9e:	f003 fb47 	bl	8004430 <siprintf>
 8000da2:	4603      	mov	r3, r0
 8000da4:	b29b      	uxth	r3, r3
 8000da6:	461a      	mov	r2, r3
 8000da8:	4906      	ldr	r1, [pc, #24]	; (8000dc4 <main+0x360>)
 8000daa:	4807      	ldr	r0, [pc, #28]	; (8000dc8 <main+0x364>)
 8000dac:	f002 fe30 	bl	8003a10 <HAL_UART_Transmit_DMA>
 8000db0:	e692      	b.n	8000ad8 <main+0x74>
	  		  continue;
 8000db2:	bf00      	nop
	  if(is_ZB_rec == 1){
 8000db4:	e690      	b.n	8000ad8 <main+0x74>
 8000db6:	bf00      	nop
 8000db8:	20000004 	.word	0x20000004
 8000dbc:	20000240 	.word	0x20000240
 8000dc0:	20000094 	.word	0x20000094
 8000dc4:	20000314 	.word	0x20000314
 8000dc8:	20000200 	.word	0x20000200

08000dcc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b090      	sub	sp, #64	; 0x40
 8000dd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dd2:	f107 0318 	add.w	r3, r7, #24
 8000dd6:	2228      	movs	r2, #40	; 0x28
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f003 fb20 	bl	8004420 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000de0:	1d3b      	adds	r3, r7, #4
 8000de2:	2200      	movs	r2, #0
 8000de4:	601a      	str	r2, [r3, #0]
 8000de6:	605a      	str	r2, [r3, #4]
 8000de8:	609a      	str	r2, [r3, #8]
 8000dea:	60da      	str	r2, [r3, #12]
 8000dec:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dee:	2301      	movs	r3, #1
 8000df0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000df2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000df6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e00:	2302      	movs	r3, #2
 8000e02:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e08:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e0a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e10:	f107 0318 	add.w	r3, r7, #24
 8000e14:	4618      	mov	r0, r3
 8000e16:	f001 fa73 	bl	8002300 <HAL_RCC_OscConfig>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000e20:	f000 f9fa 	bl	8001218 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e24:	230f      	movs	r3, #15
 8000e26:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e34:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e36:	2300      	movs	r3, #0
 8000e38:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e3a:	1d3b      	adds	r3, r7, #4
 8000e3c:	2102      	movs	r1, #2
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f001 fcde 	bl	8002800 <HAL_RCC_ClockConfig>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000e4a:	f000 f9e5 	bl	8001218 <Error_Handler>
  }
}
 8000e4e:	bf00      	nop
 8000e50:	3740      	adds	r7, #64	; 0x40
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
	...

08000e58 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b096      	sub	sp, #88	; 0x58
 8000e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e5e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000e62:	2200      	movs	r2, #0
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	605a      	str	r2, [r3, #4]
 8000e68:	609a      	str	r2, [r3, #8]
 8000e6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e6c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	601a      	str	r2, [r3, #0]
 8000e7e:	605a      	str	r2, [r3, #4]
 8000e80:	609a      	str	r2, [r3, #8]
 8000e82:	60da      	str	r2, [r3, #12]
 8000e84:	611a      	str	r2, [r3, #16]
 8000e86:	615a      	str	r2, [r3, #20]
 8000e88:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e8a:	1d3b      	adds	r3, r7, #4
 8000e8c:	2220      	movs	r2, #32
 8000e8e:	2100      	movs	r1, #0
 8000e90:	4618      	mov	r0, r3
 8000e92:	f003 fac5 	bl	8004420 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e96:	4b3e      	ldr	r3, [pc, #248]	; (8000f90 <MX_TIM1_Init+0x138>)
 8000e98:	4a3e      	ldr	r2, [pc, #248]	; (8000f94 <MX_TIM1_Init+0x13c>)
 8000e9a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 900-1;
 8000e9c:	4b3c      	ldr	r3, [pc, #240]	; (8000f90 <MX_TIM1_Init+0x138>)
 8000e9e:	f240 3283 	movw	r2, #899	; 0x383
 8000ea2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ea4:	4b3a      	ldr	r3, [pc, #232]	; (8000f90 <MX_TIM1_Init+0x138>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000eaa:	4b39      	ldr	r3, [pc, #228]	; (8000f90 <MX_TIM1_Init+0x138>)
 8000eac:	2263      	movs	r2, #99	; 0x63
 8000eae:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eb0:	4b37      	ldr	r3, [pc, #220]	; (8000f90 <MX_TIM1_Init+0x138>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000eb6:	4b36      	ldr	r3, [pc, #216]	; (8000f90 <MX_TIM1_Init+0x138>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ebc:	4b34      	ldr	r3, [pc, #208]	; (8000f90 <MX_TIM1_Init+0x138>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ec2:	4833      	ldr	r0, [pc, #204]	; (8000f90 <MX_TIM1_Init+0x138>)
 8000ec4:	f001 fe38 	bl	8002b38 <HAL_TIM_Base_Init>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000ece:	f000 f9a3 	bl	8001218 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ed2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ed6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ed8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000edc:	4619      	mov	r1, r3
 8000ede:	482c      	ldr	r0, [pc, #176]	; (8000f90 <MX_TIM1_Init+0x138>)
 8000ee0:	f002 f922 	bl	8003128 <HAL_TIM_ConfigClockSource>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000eea:	f000 f995 	bl	8001218 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000eee:	4828      	ldr	r0, [pc, #160]	; (8000f90 <MX_TIM1_Init+0x138>)
 8000ef0:	f001 fe9a 	bl	8002c28 <HAL_TIM_PWM_Init>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000efa:	f000 f98d 	bl	8001218 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000efe:	2300      	movs	r3, #0
 8000f00:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f02:	2300      	movs	r3, #0
 8000f04:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f06:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4820      	ldr	r0, [pc, #128]	; (8000f90 <MX_TIM1_Init+0x138>)
 8000f0e:	f002 fc8b 	bl	8003828 <HAL_TIMEx_MasterConfigSynchronization>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000f18:	f000 f97e 	bl	8001218 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f1c:	2360      	movs	r3, #96	; 0x60
 8000f1e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000f20:	2300      	movs	r3, #0
 8000f22:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f24:	2300      	movs	r3, #0
 8000f26:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f30:	2300      	movs	r3, #0
 8000f32:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f34:	2300      	movs	r3, #0
 8000f36:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f3c:	2204      	movs	r2, #4
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4813      	ldr	r0, [pc, #76]	; (8000f90 <MX_TIM1_Init+0x138>)
 8000f42:	f002 f82b 	bl	8002f9c <HAL_TIM_PWM_ConfigChannel>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000f4c:	f000 f964 	bl	8001218 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f50:	2300      	movs	r3, #0
 8000f52:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f54:	2300      	movs	r3, #0
 8000f56:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f60:	2300      	movs	r3, #0
 8000f62:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f68:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f6e:	1d3b      	adds	r3, r7, #4
 8000f70:	4619      	mov	r1, r3
 8000f72:	4807      	ldr	r0, [pc, #28]	; (8000f90 <MX_TIM1_Init+0x138>)
 8000f74:	f002 fc9c 	bl	80038b0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000f7e:	f000 f94b 	bl	8001218 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000f82:	4803      	ldr	r0, [pc, #12]	; (8000f90 <MX_TIM1_Init+0x138>)
 8000f84:	f000 f9be 	bl	8001304 <HAL_TIM_MspPostInit>

}
 8000f88:	bf00      	nop
 8000f8a:	3758      	adds	r7, #88	; 0x58
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	2000024c 	.word	0x2000024c
 8000f94:	40012c00 	.word	0x40012c00

08000f98 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f9c:	4b11      	ldr	r3, [pc, #68]	; (8000fe4 <MX_USART1_UART_Init+0x4c>)
 8000f9e:	4a12      	ldr	r2, [pc, #72]	; (8000fe8 <MX_USART1_UART_Init+0x50>)
 8000fa0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000fa2:	4b10      	ldr	r3, [pc, #64]	; (8000fe4 <MX_USART1_UART_Init+0x4c>)
 8000fa4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fa8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000faa:	4b0e      	ldr	r3, [pc, #56]	; (8000fe4 <MX_USART1_UART_Init+0x4c>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fb0:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <MX_USART1_UART_Init+0x4c>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fb6:	4b0b      	ldr	r3, [pc, #44]	; (8000fe4 <MX_USART1_UART_Init+0x4c>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fbc:	4b09      	ldr	r3, [pc, #36]	; (8000fe4 <MX_USART1_UART_Init+0x4c>)
 8000fbe:	220c      	movs	r2, #12
 8000fc0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fc2:	4b08      	ldr	r3, [pc, #32]	; (8000fe4 <MX_USART1_UART_Init+0x4c>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fc8:	4b06      	ldr	r3, [pc, #24]	; (8000fe4 <MX_USART1_UART_Init+0x4c>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fce:	4805      	ldr	r0, [pc, #20]	; (8000fe4 <MX_USART1_UART_Init+0x4c>)
 8000fd0:	f002 fcd1 	bl	8003976 <HAL_UART_Init>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000fda:	f000 f91d 	bl	8001218 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	20000200 	.word	0x20000200
 8000fe8:	40013800 	.word	0x40013800

08000fec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ff0:	4b11      	ldr	r3, [pc, #68]	; (8001038 <MX_USART3_UART_Init+0x4c>)
 8000ff2:	4a12      	ldr	r2, [pc, #72]	; (800103c <MX_USART3_UART_Init+0x50>)
 8000ff4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ff6:	4b10      	ldr	r3, [pc, #64]	; (8001038 <MX_USART3_UART_Init+0x4c>)
 8000ff8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ffc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ffe:	4b0e      	ldr	r3, [pc, #56]	; (8001038 <MX_USART3_UART_Init+0x4c>)
 8001000:	2200      	movs	r2, #0
 8001002:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001004:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <MX_USART3_UART_Init+0x4c>)
 8001006:	2200      	movs	r2, #0
 8001008:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800100a:	4b0b      	ldr	r3, [pc, #44]	; (8001038 <MX_USART3_UART_Init+0x4c>)
 800100c:	2200      	movs	r2, #0
 800100e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001010:	4b09      	ldr	r3, [pc, #36]	; (8001038 <MX_USART3_UART_Init+0x4c>)
 8001012:	220c      	movs	r2, #12
 8001014:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001016:	4b08      	ldr	r3, [pc, #32]	; (8001038 <MX_USART3_UART_Init+0x4c>)
 8001018:	2200      	movs	r2, #0
 800101a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800101c:	4b06      	ldr	r3, [pc, #24]	; (8001038 <MX_USART3_UART_Init+0x4c>)
 800101e:	2200      	movs	r2, #0
 8001020:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001022:	4805      	ldr	r0, [pc, #20]	; (8001038 <MX_USART3_UART_Init+0x4c>)
 8001024:	f002 fca7 	bl	8003976 <HAL_UART_Init>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800102e:	f000 f8f3 	bl	8001218 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	200000f4 	.word	0x200000f4
 800103c:	40004800 	.word	0x40004800

08001040 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001046:	4b18      	ldr	r3, [pc, #96]	; (80010a8 <MX_DMA_Init+0x68>)
 8001048:	695b      	ldr	r3, [r3, #20]
 800104a:	4a17      	ldr	r2, [pc, #92]	; (80010a8 <MX_DMA_Init+0x68>)
 800104c:	f043 0301 	orr.w	r3, r3, #1
 8001050:	6153      	str	r3, [r2, #20]
 8001052:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <MX_DMA_Init+0x68>)
 8001054:	695b      	ldr	r3, [r3, #20]
 8001056:	f003 0301 	and.w	r3, r3, #1
 800105a:	607b      	str	r3, [r7, #4]
 800105c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800105e:	2200      	movs	r2, #0
 8001060:	2100      	movs	r1, #0
 8001062:	200c      	movs	r0, #12
 8001064:	f000 fd3f 	bl	8001ae6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001068:	200c      	movs	r0, #12
 800106a:	f000 fd58 	bl	8001b1e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800106e:	2200      	movs	r2, #0
 8001070:	2100      	movs	r1, #0
 8001072:	200d      	movs	r0, #13
 8001074:	f000 fd37 	bl	8001ae6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001078:	200d      	movs	r0, #13
 800107a:	f000 fd50 	bl	8001b1e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800107e:	2200      	movs	r2, #0
 8001080:	2100      	movs	r1, #0
 8001082:	200e      	movs	r0, #14
 8001084:	f000 fd2f 	bl	8001ae6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001088:	200e      	movs	r0, #14
 800108a:	f000 fd48 	bl	8001b1e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800108e:	2200      	movs	r2, #0
 8001090:	2100      	movs	r1, #0
 8001092:	200f      	movs	r0, #15
 8001094:	f000 fd27 	bl	8001ae6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001098:	200f      	movs	r0, #15
 800109a:	f000 fd40 	bl	8001b1e <HAL_NVIC_EnableIRQ>

}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40021000 	.word	0x40021000

080010ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b088      	sub	sp, #32
 80010b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b2:	f107 0310 	add.w	r3, r7, #16
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]
 80010be:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010c0:	4b26      	ldr	r3, [pc, #152]	; (800115c <MX_GPIO_Init+0xb0>)
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	4a25      	ldr	r2, [pc, #148]	; (800115c <MX_GPIO_Init+0xb0>)
 80010c6:	f043 0320 	orr.w	r3, r3, #32
 80010ca:	6193      	str	r3, [r2, #24]
 80010cc:	4b23      	ldr	r3, [pc, #140]	; (800115c <MX_GPIO_Init+0xb0>)
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	f003 0320 	and.w	r3, r3, #32
 80010d4:	60fb      	str	r3, [r7, #12]
 80010d6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d8:	4b20      	ldr	r3, [pc, #128]	; (800115c <MX_GPIO_Init+0xb0>)
 80010da:	699b      	ldr	r3, [r3, #24]
 80010dc:	4a1f      	ldr	r2, [pc, #124]	; (800115c <MX_GPIO_Init+0xb0>)
 80010de:	f043 0304 	orr.w	r3, r3, #4
 80010e2:	6193      	str	r3, [r2, #24]
 80010e4:	4b1d      	ldr	r3, [pc, #116]	; (800115c <MX_GPIO_Init+0xb0>)
 80010e6:	699b      	ldr	r3, [r3, #24]
 80010e8:	f003 0304 	and.w	r3, r3, #4
 80010ec:	60bb      	str	r3, [r7, #8]
 80010ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f0:	4b1a      	ldr	r3, [pc, #104]	; (800115c <MX_GPIO_Init+0xb0>)
 80010f2:	699b      	ldr	r3, [r3, #24]
 80010f4:	4a19      	ldr	r2, [pc, #100]	; (800115c <MX_GPIO_Init+0xb0>)
 80010f6:	f043 0308 	orr.w	r3, r3, #8
 80010fa:	6193      	str	r3, [r2, #24]
 80010fc:	4b17      	ldr	r3, [pc, #92]	; (800115c <MX_GPIO_Init+0xb0>)
 80010fe:	699b      	ldr	r3, [r3, #24]
 8001100:	f003 0308 	and.w	r3, r3, #8
 8001104:	607b      	str	r3, [r7, #4]
 8001106:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8001108:	2200      	movs	r2, #0
 800110a:	2118      	movs	r1, #24
 800110c:	4814      	ldr	r0, [pc, #80]	; (8001160 <MX_GPIO_Init+0xb4>)
 800110e:	f001 f8df 	bl	80022d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_SET);
 8001112:	2201      	movs	r2, #1
 8001114:	2118      	movs	r1, #24
 8001116:	4813      	ldr	r0, [pc, #76]	; (8001164 <MX_GPIO_Init+0xb8>)
 8001118:	f001 f8da 	bl	80022d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800111c:	2318      	movs	r3, #24
 800111e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001120:	2301      	movs	r3, #1
 8001122:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001128:	2302      	movs	r3, #2
 800112a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112c:	f107 0310 	add.w	r3, r7, #16
 8001130:	4619      	mov	r1, r3
 8001132:	480b      	ldr	r0, [pc, #44]	; (8001160 <MX_GPIO_Init+0xb4>)
 8001134:	f000 ff72 	bl	800201c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001138:	2318      	movs	r3, #24
 800113a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800113c:	2301      	movs	r3, #1
 800113e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001144:	2302      	movs	r3, #2
 8001146:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001148:	f107 0310 	add.w	r3, r7, #16
 800114c:	4619      	mov	r1, r3
 800114e:	4805      	ldr	r0, [pc, #20]	; (8001164 <MX_GPIO_Init+0xb8>)
 8001150:	f000 ff64 	bl	800201c <HAL_GPIO_Init>

}
 8001154:	bf00      	nop
 8001156:	3720      	adds	r7, #32
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	40021000 	.word	0x40021000
 8001160:	40010800 	.word	0x40010800
 8001164:	40010c00 	.word	0x40010c00

08001168 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// 定时器中断回调函数
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1){
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a15      	ldr	r2, [pc, #84]	; (80011cc <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d123      	bne.n	80011c2 <HAL_TIM_PeriodElapsedCallback+0x5a>
		if(motor_on == 1){
 800117a:	4b15      	ldr	r3, [pc, #84]	; (80011d0 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	2b01      	cmp	r3, #1
 8001180:	d11f      	bne.n	80011c2 <HAL_TIM_PeriodElapsedCallback+0x5a>
			if(pwm_counter_idx < pwm_counter){
 8001182:	4b14      	ldr	r3, [pc, #80]	; (80011d4 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	4b14      	ldr	r3, [pc, #80]	; (80011d8 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	429a      	cmp	r2, r3
 800118c:	d205      	bcs.n	800119a <HAL_TIM_PeriodElapsedCallback+0x32>
				pwm_counter_idx ++;
 800118e:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	3301      	adds	r3, #1
 8001194:	4a0f      	ldr	r2, [pc, #60]	; (80011d4 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001196:	6013      	str	r3, [r2, #0]
				if(HAL_OK != HAL_TIM_Base_Stop_IT(&htim1))
					Error_Handler();
			}
		}
	}
}
 8001198:	e013      	b.n	80011c2 <HAL_TIM_PeriodElapsedCallback+0x5a>
				motor_on = 0;
 800119a:	4b0d      	ldr	r3, [pc, #52]	; (80011d0 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800119c:	2200      	movs	r2, #0
 800119e:	701a      	strb	r2, [r3, #0]
				if(HAL_OK != HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2))
 80011a0:	2104      	movs	r1, #4
 80011a2:	480e      	ldr	r0, [pc, #56]	; (80011dc <HAL_TIM_PeriodElapsedCallback+0x74>)
 80011a4:	f001 fda6 	bl	8002cf4 <HAL_TIM_PWM_Stop>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <HAL_TIM_PeriodElapsedCallback+0x4a>
					Error_Handler();
 80011ae:	f000 f833 	bl	8001218 <Error_Handler>
				if(HAL_OK != HAL_TIM_Base_Stop_IT(&htim1))
 80011b2:	480a      	ldr	r0, [pc, #40]	; (80011dc <HAL_TIM_PeriodElapsedCallback+0x74>)
 80011b4:	f001 fd0e 	bl	8002bd4 <HAL_TIM_Base_Stop_IT>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <HAL_TIM_PeriodElapsedCallback+0x5a>
					Error_Handler();
 80011be:	f000 f82b 	bl	8001218 <Error_Handler>
}
 80011c2:	bf00      	nop
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40012c00 	.word	0x40012c00
 80011d0:	200000a0 	.word	0x200000a0
 80011d4:	2000009c 	.word	0x2000009c
 80011d8:	20000098 	.word	0x20000098
 80011dc:	2000024c 	.word	0x2000024c

080011e0 <HAL_UART_RxCpltCallback>:

// 串口1收到数据的回调函数
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1){
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a07      	ldr	r2, [pc, #28]	; (800120c <HAL_UART_RxCpltCallback+0x2c>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d107      	bne.n	8001202 <HAL_UART_RxCpltCallback+0x22>
		// 若接收方为自己则接收

		if(ZB_rec_buf[0] == DEVICE_ADDRESS){
 80011f2:	4b07      	ldr	r3, [pc, #28]	; (8001210 <HAL_UART_RxCpltCallback+0x30>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	2264      	movs	r2, #100	; 0x64
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d102      	bne.n	8001202 <HAL_UART_RxCpltCallback+0x22>
			is_ZB_rec = 1;
 80011fc:	4b05      	ldr	r3, [pc, #20]	; (8001214 <HAL_UART_RxCpltCallback+0x34>)
 80011fe:	2201      	movs	r2, #1
 8001200:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001202:	bf00      	nop
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	bc80      	pop	{r7}
 800120a:	4770      	bx	lr
 800120c:	40013800 	.word	0x40013800
 8001210:	2000030c 	.word	0x2000030c
 8001214:	200000a1 	.word	0x200000a1

08001218 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800121c:	bf00      	nop
 800121e:	46bd      	mov	sp, r7
 8001220:	bc80      	pop	{r7}
 8001222:	4770      	bx	lr

08001224 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001224:	b480      	push	{r7}
 8001226:	b085      	sub	sp, #20
 8001228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800122a:	4b15      	ldr	r3, [pc, #84]	; (8001280 <HAL_MspInit+0x5c>)
 800122c:	699b      	ldr	r3, [r3, #24]
 800122e:	4a14      	ldr	r2, [pc, #80]	; (8001280 <HAL_MspInit+0x5c>)
 8001230:	f043 0301 	orr.w	r3, r3, #1
 8001234:	6193      	str	r3, [r2, #24]
 8001236:	4b12      	ldr	r3, [pc, #72]	; (8001280 <HAL_MspInit+0x5c>)
 8001238:	699b      	ldr	r3, [r3, #24]
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	60bb      	str	r3, [r7, #8]
 8001240:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001242:	4b0f      	ldr	r3, [pc, #60]	; (8001280 <HAL_MspInit+0x5c>)
 8001244:	69db      	ldr	r3, [r3, #28]
 8001246:	4a0e      	ldr	r2, [pc, #56]	; (8001280 <HAL_MspInit+0x5c>)
 8001248:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800124c:	61d3      	str	r3, [r2, #28]
 800124e:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <HAL_MspInit+0x5c>)
 8001250:	69db      	ldr	r3, [r3, #28]
 8001252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001256:	607b      	str	r3, [r7, #4]
 8001258:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800125a:	4b0a      	ldr	r3, [pc, #40]	; (8001284 <HAL_MspInit+0x60>)
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	60fb      	str	r3, [r7, #12]
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001266:	60fb      	str	r3, [r7, #12]
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	4a04      	ldr	r2, [pc, #16]	; (8001284 <HAL_MspInit+0x60>)
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001276:	bf00      	nop
 8001278:	3714      	adds	r7, #20
 800127a:	46bd      	mov	sp, r7
 800127c:	bc80      	pop	{r7}
 800127e:	4770      	bx	lr
 8001280:	40021000 	.word	0x40021000
 8001284:	40010000 	.word	0x40010000

08001288 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a19      	ldr	r2, [pc, #100]	; (80012fc <HAL_TIM_Base_MspInit+0x74>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d12b      	bne.n	80012f2 <HAL_TIM_Base_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800129a:	4b19      	ldr	r3, [pc, #100]	; (8001300 <HAL_TIM_Base_MspInit+0x78>)
 800129c:	699b      	ldr	r3, [r3, #24]
 800129e:	4a18      	ldr	r2, [pc, #96]	; (8001300 <HAL_TIM_Base_MspInit+0x78>)
 80012a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80012a4:	6193      	str	r3, [r2, #24]
 80012a6:	4b16      	ldr	r3, [pc, #88]	; (8001300 <HAL_TIM_Base_MspInit+0x78>)
 80012a8:	699b      	ldr	r3, [r3, #24]
 80012aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 80012b2:	2200      	movs	r2, #0
 80012b4:	2100      	movs	r1, #0
 80012b6:	2018      	movs	r0, #24
 80012b8:	f000 fc15 	bl	8001ae6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80012bc:	2018      	movs	r0, #24
 80012be:	f000 fc2e 	bl	8001b1e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80012c2:	2200      	movs	r2, #0
 80012c4:	2100      	movs	r1, #0
 80012c6:	2019      	movs	r0, #25
 80012c8:	f000 fc0d 	bl	8001ae6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80012cc:	2019      	movs	r0, #25
 80012ce:	f000 fc26 	bl	8001b1e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 80012d2:	2200      	movs	r2, #0
 80012d4:	2100      	movs	r1, #0
 80012d6:	201a      	movs	r0, #26
 80012d8:	f000 fc05 	bl	8001ae6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80012dc:	201a      	movs	r0, #26
 80012de:	f000 fc1e 	bl	8001b1e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80012e2:	2200      	movs	r2, #0
 80012e4:	2100      	movs	r1, #0
 80012e6:	201b      	movs	r0, #27
 80012e8:	f000 fbfd 	bl	8001ae6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80012ec:	201b      	movs	r0, #27
 80012ee:	f000 fc16 	bl	8001b1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80012f2:	bf00      	nop
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40012c00 	.word	0x40012c00
 8001300:	40021000 	.word	0x40021000

08001304 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b088      	sub	sp, #32
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800130c:	f107 0310 	add.w	r3, r7, #16
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	605a      	str	r2, [r3, #4]
 8001316:	609a      	str	r2, [r3, #8]
 8001318:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a10      	ldr	r2, [pc, #64]	; (8001360 <HAL_TIM_MspPostInit+0x5c>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d118      	bne.n	8001356 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001324:	4b0f      	ldr	r3, [pc, #60]	; (8001364 <HAL_TIM_MspPostInit+0x60>)
 8001326:	699b      	ldr	r3, [r3, #24]
 8001328:	4a0e      	ldr	r2, [pc, #56]	; (8001364 <HAL_TIM_MspPostInit+0x60>)
 800132a:	f043 0304 	orr.w	r3, r3, #4
 800132e:	6193      	str	r3, [r2, #24]
 8001330:	4b0c      	ldr	r3, [pc, #48]	; (8001364 <HAL_TIM_MspPostInit+0x60>)
 8001332:	699b      	ldr	r3, [r3, #24]
 8001334:	f003 0304 	and.w	r3, r3, #4
 8001338:	60fb      	str	r3, [r7, #12]
 800133a:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800133c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001340:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001342:	2302      	movs	r3, #2
 8001344:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001346:	2302      	movs	r3, #2
 8001348:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800134a:	f107 0310 	add.w	r3, r7, #16
 800134e:	4619      	mov	r1, r3
 8001350:	4805      	ldr	r0, [pc, #20]	; (8001368 <HAL_TIM_MspPostInit+0x64>)
 8001352:	f000 fe63 	bl	800201c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001356:	bf00      	nop
 8001358:	3720      	adds	r7, #32
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	40012c00 	.word	0x40012c00
 8001364:	40021000 	.word	0x40021000
 8001368:	40010800 	.word	0x40010800

0800136c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b08c      	sub	sp, #48	; 0x30
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001374:	f107 031c 	add.w	r3, r7, #28
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a93      	ldr	r2, [pc, #588]	; (80015d4 <HAL_UART_MspInit+0x268>)
 8001388:	4293      	cmp	r3, r2
 800138a:	f040 8093 	bne.w	80014b4 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800138e:	4b92      	ldr	r3, [pc, #584]	; (80015d8 <HAL_UART_MspInit+0x26c>)
 8001390:	699b      	ldr	r3, [r3, #24]
 8001392:	4a91      	ldr	r2, [pc, #580]	; (80015d8 <HAL_UART_MspInit+0x26c>)
 8001394:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001398:	6193      	str	r3, [r2, #24]
 800139a:	4b8f      	ldr	r3, [pc, #572]	; (80015d8 <HAL_UART_MspInit+0x26c>)
 800139c:	699b      	ldr	r3, [r3, #24]
 800139e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013a2:	61bb      	str	r3, [r7, #24]
 80013a4:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a6:	4b8c      	ldr	r3, [pc, #560]	; (80015d8 <HAL_UART_MspInit+0x26c>)
 80013a8:	699b      	ldr	r3, [r3, #24]
 80013aa:	4a8b      	ldr	r2, [pc, #556]	; (80015d8 <HAL_UART_MspInit+0x26c>)
 80013ac:	f043 0308 	orr.w	r3, r3, #8
 80013b0:	6193      	str	r3, [r2, #24]
 80013b2:	4b89      	ldr	r3, [pc, #548]	; (80015d8 <HAL_UART_MspInit+0x26c>)
 80013b4:	699b      	ldr	r3, [r3, #24]
 80013b6:	f003 0308 	and.w	r3, r3, #8
 80013ba:	617b      	str	r3, [r7, #20]
 80013bc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013be:	2340      	movs	r3, #64	; 0x40
 80013c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c2:	2302      	movs	r3, #2
 80013c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013c6:	2303      	movs	r3, #3
 80013c8:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ca:	f107 031c 	add.w	r3, r7, #28
 80013ce:	4619      	mov	r1, r3
 80013d0:	4882      	ldr	r0, [pc, #520]	; (80015dc <HAL_UART_MspInit+0x270>)
 80013d2:	f000 fe23 	bl	800201c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80013d6:	2380      	movs	r3, #128	; 0x80
 80013d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013da:	2300      	movs	r3, #0
 80013dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e2:	f107 031c 	add.w	r3, r7, #28
 80013e6:	4619      	mov	r1, r3
 80013e8:	487c      	ldr	r0, [pc, #496]	; (80015dc <HAL_UART_MspInit+0x270>)
 80013ea:	f000 fe17 	bl	800201c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 80013ee:	4b7c      	ldr	r3, [pc, #496]	; (80015e0 <HAL_UART_MspInit+0x274>)
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013f6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80013fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013fe:	f043 0304 	orr.w	r3, r3, #4
 8001402:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001404:	4a76      	ldr	r2, [pc, #472]	; (80015e0 <HAL_UART_MspInit+0x274>)
 8001406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001408:	6053      	str	r3, [r2, #4]

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800140a:	4b76      	ldr	r3, [pc, #472]	; (80015e4 <HAL_UART_MspInit+0x278>)
 800140c:	4a76      	ldr	r2, [pc, #472]	; (80015e8 <HAL_UART_MspInit+0x27c>)
 800140e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001410:	4b74      	ldr	r3, [pc, #464]	; (80015e4 <HAL_UART_MspInit+0x278>)
 8001412:	2200      	movs	r2, #0
 8001414:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001416:	4b73      	ldr	r3, [pc, #460]	; (80015e4 <HAL_UART_MspInit+0x278>)
 8001418:	2200      	movs	r2, #0
 800141a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800141c:	4b71      	ldr	r3, [pc, #452]	; (80015e4 <HAL_UART_MspInit+0x278>)
 800141e:	2280      	movs	r2, #128	; 0x80
 8001420:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001422:	4b70      	ldr	r3, [pc, #448]	; (80015e4 <HAL_UART_MspInit+0x278>)
 8001424:	2200      	movs	r2, #0
 8001426:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001428:	4b6e      	ldr	r3, [pc, #440]	; (80015e4 <HAL_UART_MspInit+0x278>)
 800142a:	2200      	movs	r2, #0
 800142c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800142e:	4b6d      	ldr	r3, [pc, #436]	; (80015e4 <HAL_UART_MspInit+0x278>)
 8001430:	2220      	movs	r2, #32
 8001432:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001434:	4b6b      	ldr	r3, [pc, #428]	; (80015e4 <HAL_UART_MspInit+0x278>)
 8001436:	2200      	movs	r2, #0
 8001438:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800143a:	486a      	ldr	r0, [pc, #424]	; (80015e4 <HAL_UART_MspInit+0x278>)
 800143c:	f000 fb8a 	bl	8001b54 <HAL_DMA_Init>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <HAL_UART_MspInit+0xde>
    {
      Error_Handler();
 8001446:	f7ff fee7 	bl	8001218 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a65      	ldr	r2, [pc, #404]	; (80015e4 <HAL_UART_MspInit+0x278>)
 800144e:	635a      	str	r2, [r3, #52]	; 0x34
 8001450:	4a64      	ldr	r2, [pc, #400]	; (80015e4 <HAL_UART_MspInit+0x278>)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001456:	4b65      	ldr	r3, [pc, #404]	; (80015ec <HAL_UART_MspInit+0x280>)
 8001458:	4a65      	ldr	r2, [pc, #404]	; (80015f0 <HAL_UART_MspInit+0x284>)
 800145a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800145c:	4b63      	ldr	r3, [pc, #396]	; (80015ec <HAL_UART_MspInit+0x280>)
 800145e:	2210      	movs	r2, #16
 8001460:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001462:	4b62      	ldr	r3, [pc, #392]	; (80015ec <HAL_UART_MspInit+0x280>)
 8001464:	2200      	movs	r2, #0
 8001466:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001468:	4b60      	ldr	r3, [pc, #384]	; (80015ec <HAL_UART_MspInit+0x280>)
 800146a:	2280      	movs	r2, #128	; 0x80
 800146c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800146e:	4b5f      	ldr	r3, [pc, #380]	; (80015ec <HAL_UART_MspInit+0x280>)
 8001470:	2200      	movs	r2, #0
 8001472:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001474:	4b5d      	ldr	r3, [pc, #372]	; (80015ec <HAL_UART_MspInit+0x280>)
 8001476:	2200      	movs	r2, #0
 8001478:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800147a:	4b5c      	ldr	r3, [pc, #368]	; (80015ec <HAL_UART_MspInit+0x280>)
 800147c:	2200      	movs	r2, #0
 800147e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001480:	4b5a      	ldr	r3, [pc, #360]	; (80015ec <HAL_UART_MspInit+0x280>)
 8001482:	2200      	movs	r2, #0
 8001484:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001486:	4859      	ldr	r0, [pc, #356]	; (80015ec <HAL_UART_MspInit+0x280>)
 8001488:	f000 fb64 	bl	8001b54 <HAL_DMA_Init>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8001492:	f7ff fec1 	bl	8001218 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a54      	ldr	r2, [pc, #336]	; (80015ec <HAL_UART_MspInit+0x280>)
 800149a:	631a      	str	r2, [r3, #48]	; 0x30
 800149c:	4a53      	ldr	r2, [pc, #332]	; (80015ec <HAL_UART_MspInit+0x280>)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80014a2:	2200      	movs	r2, #0
 80014a4:	2101      	movs	r1, #1
 80014a6:	2025      	movs	r0, #37	; 0x25
 80014a8:	f000 fb1d 	bl	8001ae6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80014ac:	2025      	movs	r0, #37	; 0x25
 80014ae:	f000 fb36 	bl	8001b1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80014b2:	e08b      	b.n	80015cc <HAL_UART_MspInit+0x260>
  else if(huart->Instance==USART3)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a4e      	ldr	r2, [pc, #312]	; (80015f4 <HAL_UART_MspInit+0x288>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	f040 8086 	bne.w	80015cc <HAL_UART_MspInit+0x260>
    __HAL_RCC_USART3_CLK_ENABLE();
 80014c0:	4b45      	ldr	r3, [pc, #276]	; (80015d8 <HAL_UART_MspInit+0x26c>)
 80014c2:	69db      	ldr	r3, [r3, #28]
 80014c4:	4a44      	ldr	r2, [pc, #272]	; (80015d8 <HAL_UART_MspInit+0x26c>)
 80014c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014ca:	61d3      	str	r3, [r2, #28]
 80014cc:	4b42      	ldr	r3, [pc, #264]	; (80015d8 <HAL_UART_MspInit+0x26c>)
 80014ce:	69db      	ldr	r3, [r3, #28]
 80014d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014d4:	613b      	str	r3, [r7, #16]
 80014d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d8:	4b3f      	ldr	r3, [pc, #252]	; (80015d8 <HAL_UART_MspInit+0x26c>)
 80014da:	699b      	ldr	r3, [r3, #24]
 80014dc:	4a3e      	ldr	r2, [pc, #248]	; (80015d8 <HAL_UART_MspInit+0x26c>)
 80014de:	f043 0308 	orr.w	r3, r3, #8
 80014e2:	6193      	str	r3, [r2, #24]
 80014e4:	4b3c      	ldr	r3, [pc, #240]	; (80015d8 <HAL_UART_MspInit+0x26c>)
 80014e6:	699b      	ldr	r3, [r3, #24]
 80014e8:	f003 0308 	and.w	r3, r3, #8
 80014ec:	60fb      	str	r3, [r7, #12]
 80014ee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80014f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f6:	2302      	movs	r3, #2
 80014f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014fa:	2303      	movs	r3, #3
 80014fc:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014fe:	f107 031c 	add.w	r3, r7, #28
 8001502:	4619      	mov	r1, r3
 8001504:	4835      	ldr	r0, [pc, #212]	; (80015dc <HAL_UART_MspInit+0x270>)
 8001506:	f000 fd89 	bl	800201c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800150a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800150e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001510:	2300      	movs	r3, #0
 8001512:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001514:	2300      	movs	r3, #0
 8001516:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001518:	f107 031c 	add.w	r3, r7, #28
 800151c:	4619      	mov	r1, r3
 800151e:	482f      	ldr	r0, [pc, #188]	; (80015dc <HAL_UART_MspInit+0x270>)
 8001520:	f000 fd7c 	bl	800201c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8001524:	4b34      	ldr	r3, [pc, #208]	; (80015f8 <HAL_UART_MspInit+0x28c>)
 8001526:	4a35      	ldr	r2, [pc, #212]	; (80015fc <HAL_UART_MspInit+0x290>)
 8001528:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800152a:	4b33      	ldr	r3, [pc, #204]	; (80015f8 <HAL_UART_MspInit+0x28c>)
 800152c:	2200      	movs	r2, #0
 800152e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001530:	4b31      	ldr	r3, [pc, #196]	; (80015f8 <HAL_UART_MspInit+0x28c>)
 8001532:	2200      	movs	r2, #0
 8001534:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001536:	4b30      	ldr	r3, [pc, #192]	; (80015f8 <HAL_UART_MspInit+0x28c>)
 8001538:	2280      	movs	r2, #128	; 0x80
 800153a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800153c:	4b2e      	ldr	r3, [pc, #184]	; (80015f8 <HAL_UART_MspInit+0x28c>)
 800153e:	2200      	movs	r2, #0
 8001540:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001542:	4b2d      	ldr	r3, [pc, #180]	; (80015f8 <HAL_UART_MspInit+0x28c>)
 8001544:	2200      	movs	r2, #0
 8001546:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001548:	4b2b      	ldr	r3, [pc, #172]	; (80015f8 <HAL_UART_MspInit+0x28c>)
 800154a:	2220      	movs	r2, #32
 800154c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800154e:	4b2a      	ldr	r3, [pc, #168]	; (80015f8 <HAL_UART_MspInit+0x28c>)
 8001550:	2200      	movs	r2, #0
 8001552:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001554:	4828      	ldr	r0, [pc, #160]	; (80015f8 <HAL_UART_MspInit+0x28c>)
 8001556:	f000 fafd 	bl	8001b54 <HAL_DMA_Init>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <HAL_UART_MspInit+0x1f8>
      Error_Handler();
 8001560:	f7ff fe5a 	bl	8001218 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	4a24      	ldr	r2, [pc, #144]	; (80015f8 <HAL_UART_MspInit+0x28c>)
 8001568:	635a      	str	r2, [r3, #52]	; 0x34
 800156a:	4a23      	ldr	r2, [pc, #140]	; (80015f8 <HAL_UART_MspInit+0x28c>)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8001570:	4b23      	ldr	r3, [pc, #140]	; (8001600 <HAL_UART_MspInit+0x294>)
 8001572:	4a24      	ldr	r2, [pc, #144]	; (8001604 <HAL_UART_MspInit+0x298>)
 8001574:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001576:	4b22      	ldr	r3, [pc, #136]	; (8001600 <HAL_UART_MspInit+0x294>)
 8001578:	2210      	movs	r2, #16
 800157a:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800157c:	4b20      	ldr	r3, [pc, #128]	; (8001600 <HAL_UART_MspInit+0x294>)
 800157e:	2200      	movs	r2, #0
 8001580:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001582:	4b1f      	ldr	r3, [pc, #124]	; (8001600 <HAL_UART_MspInit+0x294>)
 8001584:	2280      	movs	r2, #128	; 0x80
 8001586:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001588:	4b1d      	ldr	r3, [pc, #116]	; (8001600 <HAL_UART_MspInit+0x294>)
 800158a:	2200      	movs	r2, #0
 800158c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800158e:	4b1c      	ldr	r3, [pc, #112]	; (8001600 <HAL_UART_MspInit+0x294>)
 8001590:	2200      	movs	r2, #0
 8001592:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001594:	4b1a      	ldr	r3, [pc, #104]	; (8001600 <HAL_UART_MspInit+0x294>)
 8001596:	2200      	movs	r2, #0
 8001598:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800159a:	4b19      	ldr	r3, [pc, #100]	; (8001600 <HAL_UART_MspInit+0x294>)
 800159c:	2200      	movs	r2, #0
 800159e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80015a0:	4817      	ldr	r0, [pc, #92]	; (8001600 <HAL_UART_MspInit+0x294>)
 80015a2:	f000 fad7 	bl	8001b54 <HAL_DMA_Init>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <HAL_UART_MspInit+0x244>
      Error_Handler();
 80015ac:	f7ff fe34 	bl	8001218 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	4a13      	ldr	r2, [pc, #76]	; (8001600 <HAL_UART_MspInit+0x294>)
 80015b4:	631a      	str	r2, [r3, #48]	; 0x30
 80015b6:	4a12      	ldr	r2, [pc, #72]	; (8001600 <HAL_UART_MspInit+0x294>)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 2, 0);
 80015bc:	2200      	movs	r2, #0
 80015be:	2102      	movs	r1, #2
 80015c0:	2027      	movs	r0, #39	; 0x27
 80015c2:	f000 fa90 	bl	8001ae6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80015c6:	2027      	movs	r0, #39	; 0x27
 80015c8:	f000 faa9 	bl	8001b1e <HAL_NVIC_EnableIRQ>
}
 80015cc:	bf00      	nop
 80015ce:	3730      	adds	r7, #48	; 0x30
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	40013800 	.word	0x40013800
 80015d8:	40021000 	.word	0x40021000
 80015dc:	40010c00 	.word	0x40010c00
 80015e0:	40010000 	.word	0x40010000
 80015e4:	200001bc 	.word	0x200001bc
 80015e8:	40020058 	.word	0x40020058
 80015ec:	20000178 	.word	0x20000178
 80015f0:	40020044 	.word	0x40020044
 80015f4:	40004800 	.word	0x40004800
 80015f8:	200000b0 	.word	0x200000b0
 80015fc:	40020030 	.word	0x40020030
 8001600:	20000134 	.word	0x20000134
 8001604:	4002001c 	.word	0x4002001c

08001608 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	bc80      	pop	{r7}
 8001612:	4770      	bx	lr

08001614 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001618:	e7fe      	b.n	8001618 <HardFault_Handler+0x4>

0800161a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800161a:	b480      	push	{r7}
 800161c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800161e:	e7fe      	b.n	800161e <MemManage_Handler+0x4>

08001620 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001624:	e7fe      	b.n	8001624 <BusFault_Handler+0x4>

08001626 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001626:	b480      	push	{r7}
 8001628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800162a:	e7fe      	b.n	800162a <UsageFault_Handler+0x4>

0800162c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001630:	bf00      	nop
 8001632:	46bd      	mov	sp, r7
 8001634:	bc80      	pop	{r7}
 8001636:	4770      	bx	lr

08001638 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800163c:	bf00      	nop
 800163e:	46bd      	mov	sp, r7
 8001640:	bc80      	pop	{r7}
 8001642:	4770      	bx	lr

08001644 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001648:	bf00      	nop
 800164a:	46bd      	mov	sp, r7
 800164c:	bc80      	pop	{r7}
 800164e:	4770      	bx	lr

08001650 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001654:	f000 f932 	bl	80018bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001658:	bf00      	nop
 800165a:	bd80      	pop	{r7, pc}

0800165c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001660:	4802      	ldr	r0, [pc, #8]	; (800166c <DMA1_Channel2_IRQHandler+0x10>)
 8001662:	f000 fba7 	bl	8001db4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	20000134 	.word	0x20000134

08001670 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001674:	4802      	ldr	r0, [pc, #8]	; (8001680 <DMA1_Channel3_IRQHandler+0x10>)
 8001676:	f000 fb9d 	bl	8001db4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	200000b0 	.word	0x200000b0

08001684 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001688:	4802      	ldr	r0, [pc, #8]	; (8001694 <DMA1_Channel4_IRQHandler+0x10>)
 800168a:	f000 fb93 	bl	8001db4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	20000178 	.word	0x20000178

08001698 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800169c:	4802      	ldr	r0, [pc, #8]	; (80016a8 <DMA1_Channel5_IRQHandler+0x10>)
 800169e:	f000 fb89 	bl	8001db4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	200001bc 	.word	0x200001bc

080016ac <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80016b0:	4802      	ldr	r0, [pc, #8]	; (80016bc <TIM1_BRK_IRQHandler+0x10>)
 80016b2:	f001 fb6b 	bl	8002d8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	2000024c 	.word	0x2000024c

080016c0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80016c4:	4802      	ldr	r0, [pc, #8]	; (80016d0 <TIM1_UP_IRQHandler+0x10>)
 80016c6:	f001 fb61 	bl	8002d8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	2000024c 	.word	0x2000024c

080016d4 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80016d8:	4802      	ldr	r0, [pc, #8]	; (80016e4 <TIM1_TRG_COM_IRQHandler+0x10>)
 80016da:	f001 fb57 	bl	8002d8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	2000024c 	.word	0x2000024c

080016e8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80016ec:	4802      	ldr	r0, [pc, #8]	; (80016f8 <TIM1_CC_IRQHandler+0x10>)
 80016ee:	f001 fb4d 	bl	8002d8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	2000024c 	.word	0x2000024c

080016fc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001700:	4802      	ldr	r0, [pc, #8]	; (800170c <USART1_IRQHandler+0x10>)
 8001702:	f002 fa71 	bl	8003be8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	20000200 	.word	0x20000200

08001710 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001714:	4802      	ldr	r0, [pc, #8]	; (8001720 <USART3_IRQHandler+0x10>)
 8001716:	f002 fa67 	bl	8003be8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	200000f4 	.word	0x200000f4

08001724 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800172c:	4b11      	ldr	r3, [pc, #68]	; (8001774 <_sbrk+0x50>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d102      	bne.n	800173a <_sbrk+0x16>
		heap_end = &end;
 8001734:	4b0f      	ldr	r3, [pc, #60]	; (8001774 <_sbrk+0x50>)
 8001736:	4a10      	ldr	r2, [pc, #64]	; (8001778 <_sbrk+0x54>)
 8001738:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800173a:	4b0e      	ldr	r3, [pc, #56]	; (8001774 <_sbrk+0x50>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001740:	4b0c      	ldr	r3, [pc, #48]	; (8001774 <_sbrk+0x50>)
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	4413      	add	r3, r2
 8001748:	466a      	mov	r2, sp
 800174a:	4293      	cmp	r3, r2
 800174c:	d907      	bls.n	800175e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800174e:	f002 fe3d 	bl	80043cc <__errno>
 8001752:	4602      	mov	r2, r0
 8001754:	230c      	movs	r3, #12
 8001756:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001758:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800175c:	e006      	b.n	800176c <_sbrk+0x48>
	}

	heap_end += incr;
 800175e:	4b05      	ldr	r3, [pc, #20]	; (8001774 <_sbrk+0x50>)
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4413      	add	r3, r2
 8001766:	4a03      	ldr	r2, [pc, #12]	; (8001774 <_sbrk+0x50>)
 8001768:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800176a:	68fb      	ldr	r3, [r7, #12]
}
 800176c:	4618      	mov	r0, r3
 800176e:	3710      	adds	r7, #16
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	200000a4 	.word	0x200000a4
 8001778:	20000328 	.word	0x20000328

0800177c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001780:	4b15      	ldr	r3, [pc, #84]	; (80017d8 <SystemInit+0x5c>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a14      	ldr	r2, [pc, #80]	; (80017d8 <SystemInit+0x5c>)
 8001786:	f043 0301 	orr.w	r3, r3, #1
 800178a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800178c:	4b12      	ldr	r3, [pc, #72]	; (80017d8 <SystemInit+0x5c>)
 800178e:	685a      	ldr	r2, [r3, #4]
 8001790:	4911      	ldr	r1, [pc, #68]	; (80017d8 <SystemInit+0x5c>)
 8001792:	4b12      	ldr	r3, [pc, #72]	; (80017dc <SystemInit+0x60>)
 8001794:	4013      	ands	r3, r2
 8001796:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001798:	4b0f      	ldr	r3, [pc, #60]	; (80017d8 <SystemInit+0x5c>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a0e      	ldr	r2, [pc, #56]	; (80017d8 <SystemInit+0x5c>)
 800179e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80017a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017a6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80017a8:	4b0b      	ldr	r3, [pc, #44]	; (80017d8 <SystemInit+0x5c>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a0a      	ldr	r2, [pc, #40]	; (80017d8 <SystemInit+0x5c>)
 80017ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017b2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80017b4:	4b08      	ldr	r3, [pc, #32]	; (80017d8 <SystemInit+0x5c>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	4a07      	ldr	r2, [pc, #28]	; (80017d8 <SystemInit+0x5c>)
 80017ba:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80017be:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80017c0:	4b05      	ldr	r3, [pc, #20]	; (80017d8 <SystemInit+0x5c>)
 80017c2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80017c6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80017c8:	4b05      	ldr	r3, [pc, #20]	; (80017e0 <SystemInit+0x64>)
 80017ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017ce:	609a      	str	r2, [r3, #8]
#endif 
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bc80      	pop	{r7}
 80017d6:	4770      	bx	lr
 80017d8:	40021000 	.word	0x40021000
 80017dc:	f8ff0000 	.word	0xf8ff0000
 80017e0:	e000ed00 	.word	0xe000ed00

080017e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80017e4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80017e6:	e003      	b.n	80017f0 <LoopCopyDataInit>

080017e8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80017e8:	4b0b      	ldr	r3, [pc, #44]	; (8001818 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80017ea:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80017ec:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80017ee:	3104      	adds	r1, #4

080017f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80017f0:	480a      	ldr	r0, [pc, #40]	; (800181c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80017f2:	4b0b      	ldr	r3, [pc, #44]	; (8001820 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80017f4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80017f6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80017f8:	d3f6      	bcc.n	80017e8 <CopyDataInit>
  ldr r2, =_sbss
 80017fa:	4a0a      	ldr	r2, [pc, #40]	; (8001824 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80017fc:	e002      	b.n	8001804 <LoopFillZerobss>

080017fe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80017fe:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001800:	f842 3b04 	str.w	r3, [r2], #4

08001804 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001804:	4b08      	ldr	r3, [pc, #32]	; (8001828 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001806:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001808:	d3f9      	bcc.n	80017fe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800180a:	f7ff ffb7 	bl	800177c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800180e:	f002 fde3 	bl	80043d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001812:	f7ff f927 	bl	8000a64 <main>
  bx lr
 8001816:	4770      	bx	lr
  ldr r3, =_sidata
 8001818:	08004cf8 	.word	0x08004cf8
  ldr r0, =_sdata
 800181c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001820:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 8001824:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 8001828:	20000328 	.word	0x20000328

0800182c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800182c:	e7fe      	b.n	800182c <ADC1_2_IRQHandler>
	...

08001830 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001834:	4b08      	ldr	r3, [pc, #32]	; (8001858 <HAL_Init+0x28>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a07      	ldr	r2, [pc, #28]	; (8001858 <HAL_Init+0x28>)
 800183a:	f043 0310 	orr.w	r3, r3, #16
 800183e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001840:	2003      	movs	r0, #3
 8001842:	f000 f945 	bl	8001ad0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001846:	2000      	movs	r0, #0
 8001848:	f000 f808 	bl	800185c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800184c:	f7ff fcea 	bl	8001224 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001850:	2300      	movs	r3, #0
}
 8001852:	4618      	mov	r0, r3
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	40022000 	.word	0x40022000

0800185c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001864:	4b12      	ldr	r3, [pc, #72]	; (80018b0 <HAL_InitTick+0x54>)
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	4b12      	ldr	r3, [pc, #72]	; (80018b4 <HAL_InitTick+0x58>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	4619      	mov	r1, r3
 800186e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001872:	fbb3 f3f1 	udiv	r3, r3, r1
 8001876:	fbb2 f3f3 	udiv	r3, r2, r3
 800187a:	4618      	mov	r0, r3
 800187c:	f000 f95d 	bl	8001b3a <HAL_SYSTICK_Config>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e00e      	b.n	80018a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2b0f      	cmp	r3, #15
 800188e:	d80a      	bhi.n	80018a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001890:	2200      	movs	r2, #0
 8001892:	6879      	ldr	r1, [r7, #4]
 8001894:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001898:	f000 f925 	bl	8001ae6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800189c:	4a06      	ldr	r2, [pc, #24]	; (80018b8 <HAL_InitTick+0x5c>)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018a2:	2300      	movs	r3, #0
 80018a4:	e000      	b.n	80018a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3708      	adds	r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	20000008 	.word	0x20000008
 80018b4:	20000010 	.word	0x20000010
 80018b8:	2000000c 	.word	0x2000000c

080018bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018c0:	4b05      	ldr	r3, [pc, #20]	; (80018d8 <HAL_IncTick+0x1c>)
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	461a      	mov	r2, r3
 80018c6:	4b05      	ldr	r3, [pc, #20]	; (80018dc <HAL_IncTick+0x20>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4413      	add	r3, r2
 80018cc:	4a03      	ldr	r2, [pc, #12]	; (80018dc <HAL_IncTick+0x20>)
 80018ce:	6013      	str	r3, [r2, #0]
}
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bc80      	pop	{r7}
 80018d6:	4770      	bx	lr
 80018d8:	20000010 	.word	0x20000010
 80018dc:	20000320 	.word	0x20000320

080018e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  return uwTick;
 80018e4:	4b02      	ldr	r3, [pc, #8]	; (80018f0 <HAL_GetTick+0x10>)
 80018e6:	681b      	ldr	r3, [r3, #0]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bc80      	pop	{r7}
 80018ee:	4770      	bx	lr
 80018f0:	20000320 	.word	0x20000320

080018f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018fc:	f7ff fff0 	bl	80018e0 <HAL_GetTick>
 8001900:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800190c:	d005      	beq.n	800191a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800190e:	4b09      	ldr	r3, [pc, #36]	; (8001934 <HAL_Delay+0x40>)
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	461a      	mov	r2, r3
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	4413      	add	r3, r2
 8001918:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800191a:	bf00      	nop
 800191c:	f7ff ffe0 	bl	80018e0 <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	68fa      	ldr	r2, [r7, #12]
 8001928:	429a      	cmp	r2, r3
 800192a:	d8f7      	bhi.n	800191c <HAL_Delay+0x28>
  {
  }
}
 800192c:	bf00      	nop
 800192e:	3710      	adds	r7, #16
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	20000010 	.word	0x20000010

08001938 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001938:	b480      	push	{r7}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f003 0307 	and.w	r3, r3, #7
 8001946:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001948:	4b0c      	ldr	r3, [pc, #48]	; (800197c <__NVIC_SetPriorityGrouping+0x44>)
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800194e:	68ba      	ldr	r2, [r7, #8]
 8001950:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001954:	4013      	ands	r3, r2
 8001956:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001960:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001964:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001968:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800196a:	4a04      	ldr	r2, [pc, #16]	; (800197c <__NVIC_SetPriorityGrouping+0x44>)
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	60d3      	str	r3, [r2, #12]
}
 8001970:	bf00      	nop
 8001972:	3714      	adds	r7, #20
 8001974:	46bd      	mov	sp, r7
 8001976:	bc80      	pop	{r7}
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	e000ed00 	.word	0xe000ed00

08001980 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001984:	4b04      	ldr	r3, [pc, #16]	; (8001998 <__NVIC_GetPriorityGrouping+0x18>)
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	0a1b      	lsrs	r3, r3, #8
 800198a:	f003 0307 	and.w	r3, r3, #7
}
 800198e:	4618      	mov	r0, r3
 8001990:	46bd      	mov	sp, r7
 8001992:	bc80      	pop	{r7}
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	e000ed00 	.word	0xe000ed00

0800199c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	db0b      	blt.n	80019c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ae:	79fb      	ldrb	r3, [r7, #7]
 80019b0:	f003 021f 	and.w	r2, r3, #31
 80019b4:	4906      	ldr	r1, [pc, #24]	; (80019d0 <__NVIC_EnableIRQ+0x34>)
 80019b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ba:	095b      	lsrs	r3, r3, #5
 80019bc:	2001      	movs	r0, #1
 80019be:	fa00 f202 	lsl.w	r2, r0, r2
 80019c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019c6:	bf00      	nop
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bc80      	pop	{r7}
 80019ce:	4770      	bx	lr
 80019d0:	e000e100 	.word	0xe000e100

080019d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	4603      	mov	r3, r0
 80019dc:	6039      	str	r1, [r7, #0]
 80019de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	db0a      	blt.n	80019fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	b2da      	uxtb	r2, r3
 80019ec:	490c      	ldr	r1, [pc, #48]	; (8001a20 <__NVIC_SetPriority+0x4c>)
 80019ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f2:	0112      	lsls	r2, r2, #4
 80019f4:	b2d2      	uxtb	r2, r2
 80019f6:	440b      	add	r3, r1
 80019f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019fc:	e00a      	b.n	8001a14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	b2da      	uxtb	r2, r3
 8001a02:	4908      	ldr	r1, [pc, #32]	; (8001a24 <__NVIC_SetPriority+0x50>)
 8001a04:	79fb      	ldrb	r3, [r7, #7]
 8001a06:	f003 030f 	and.w	r3, r3, #15
 8001a0a:	3b04      	subs	r3, #4
 8001a0c:	0112      	lsls	r2, r2, #4
 8001a0e:	b2d2      	uxtb	r2, r2
 8001a10:	440b      	add	r3, r1
 8001a12:	761a      	strb	r2, [r3, #24]
}
 8001a14:	bf00      	nop
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bc80      	pop	{r7}
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	e000e100 	.word	0xe000e100
 8001a24:	e000ed00 	.word	0xe000ed00

08001a28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b089      	sub	sp, #36	; 0x24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	f003 0307 	and.w	r3, r3, #7
 8001a3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	f1c3 0307 	rsb	r3, r3, #7
 8001a42:	2b04      	cmp	r3, #4
 8001a44:	bf28      	it	cs
 8001a46:	2304      	movcs	r3, #4
 8001a48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	3304      	adds	r3, #4
 8001a4e:	2b06      	cmp	r3, #6
 8001a50:	d902      	bls.n	8001a58 <NVIC_EncodePriority+0x30>
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	3b03      	subs	r3, #3
 8001a56:	e000      	b.n	8001a5a <NVIC_EncodePriority+0x32>
 8001a58:	2300      	movs	r3, #0
 8001a5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	fa02 f303 	lsl.w	r3, r2, r3
 8001a66:	43da      	mvns	r2, r3
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	401a      	ands	r2, r3
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a70:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	fa01 f303 	lsl.w	r3, r1, r3
 8001a7a:	43d9      	mvns	r1, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a80:	4313      	orrs	r3, r2
         );
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3724      	adds	r7, #36	; 0x24
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bc80      	pop	{r7}
 8001a8a:	4770      	bx	lr

08001a8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	3b01      	subs	r3, #1
 8001a98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a9c:	d301      	bcc.n	8001aa2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e00f      	b.n	8001ac2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aa2:	4a0a      	ldr	r2, [pc, #40]	; (8001acc <SysTick_Config+0x40>)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aaa:	210f      	movs	r1, #15
 8001aac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ab0:	f7ff ff90 	bl	80019d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ab4:	4b05      	ldr	r3, [pc, #20]	; (8001acc <SysTick_Config+0x40>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aba:	4b04      	ldr	r3, [pc, #16]	; (8001acc <SysTick_Config+0x40>)
 8001abc:	2207      	movs	r2, #7
 8001abe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ac0:	2300      	movs	r3, #0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	e000e010 	.word	0xe000e010

08001ad0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f7ff ff2d 	bl	8001938 <__NVIC_SetPriorityGrouping>
}
 8001ade:	bf00      	nop
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b086      	sub	sp, #24
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	4603      	mov	r3, r0
 8001aee:	60b9      	str	r1, [r7, #8]
 8001af0:	607a      	str	r2, [r7, #4]
 8001af2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001af4:	2300      	movs	r3, #0
 8001af6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001af8:	f7ff ff42 	bl	8001980 <__NVIC_GetPriorityGrouping>
 8001afc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	68b9      	ldr	r1, [r7, #8]
 8001b02:	6978      	ldr	r0, [r7, #20]
 8001b04:	f7ff ff90 	bl	8001a28 <NVIC_EncodePriority>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b0e:	4611      	mov	r1, r2
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff ff5f 	bl	80019d4 <__NVIC_SetPriority>
}
 8001b16:	bf00      	nop
 8001b18:	3718      	adds	r7, #24
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b082      	sub	sp, #8
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	4603      	mov	r3, r0
 8001b26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7ff ff35 	bl	800199c <__NVIC_EnableIRQ>
}
 8001b32:	bf00      	nop
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b082      	sub	sp, #8
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f7ff ffa2 	bl	8001a8c <SysTick_Config>
 8001b48:	4603      	mov	r3, r0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
	...

08001b54 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b085      	sub	sp, #20
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d101      	bne.n	8001b6a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e043      	b.n	8001bf2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	461a      	mov	r2, r3
 8001b70:	4b22      	ldr	r3, [pc, #136]	; (8001bfc <HAL_DMA_Init+0xa8>)
 8001b72:	4413      	add	r3, r2
 8001b74:	4a22      	ldr	r2, [pc, #136]	; (8001c00 <HAL_DMA_Init+0xac>)
 8001b76:	fba2 2303 	umull	r2, r3, r2, r3
 8001b7a:	091b      	lsrs	r3, r3, #4
 8001b7c:	009a      	lsls	r2, r3, #2
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a1f      	ldr	r2, [pc, #124]	; (8001c04 <HAL_DMA_Init+0xb0>)
 8001b86:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2202      	movs	r2, #2
 8001b8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001b9e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001ba2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001bac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	695b      	ldr	r3, [r3, #20]
 8001bbe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bc4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	69db      	ldr	r3, [r3, #28]
 8001bca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001bcc:	68fa      	ldr	r2, [r7, #12]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	68fa      	ldr	r2, [r7, #12]
 8001bd8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2201      	movs	r2, #1
 8001be4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2200      	movs	r2, #0
 8001bec:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3714      	adds	r7, #20
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bc80      	pop	{r7}
 8001bfa:	4770      	bx	lr
 8001bfc:	bffdfff8 	.word	0xbffdfff8
 8001c00:	cccccccd 	.word	0xcccccccd
 8001c04:	40020000 	.word	0x40020000

08001c08 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	607a      	str	r2, [r7, #4]
 8001c14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c16:	2300      	movs	r3, #0
 8001c18:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d101      	bne.n	8001c28 <HAL_DMA_Start_IT+0x20>
 8001c24:	2302      	movs	r3, #2
 8001c26:	e04a      	b.n	8001cbe <HAL_DMA_Start_IT+0xb6>
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d13a      	bne.n	8001cb0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2202      	movs	r2, #2
 8001c3e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2200      	movs	r2, #0
 8001c46:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f022 0201 	bic.w	r2, r2, #1
 8001c56:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	68b9      	ldr	r1, [r7, #8]
 8001c5e:	68f8      	ldr	r0, [r7, #12]
 8001c60:	f000 f9ae 	bl	8001fc0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d008      	beq.n	8001c7e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f042 020e 	orr.w	r2, r2, #14
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	e00f      	b.n	8001c9e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f022 0204 	bic.w	r2, r2, #4
 8001c8c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f042 020a 	orr.w	r2, r2, #10
 8001c9c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f042 0201 	orr.w	r2, r2, #1
 8001cac:	601a      	str	r2, [r3, #0]
 8001cae:	e005      	b.n	8001cbc <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001cb8:	2302      	movs	r3, #2
 8001cba:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001cbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3718      	adds	r7, #24
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
	...

08001cc8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d005      	beq.n	8001cea <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2204      	movs	r2, #4
 8001ce2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	73fb      	strb	r3, [r7, #15]
 8001ce8:	e051      	b.n	8001d8e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f022 020e 	bic.w	r2, r2, #14
 8001cf8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f022 0201 	bic.w	r2, r2, #1
 8001d08:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a22      	ldr	r2, [pc, #136]	; (8001d98 <HAL_DMA_Abort_IT+0xd0>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d029      	beq.n	8001d68 <HAL_DMA_Abort_IT+0xa0>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a20      	ldr	r2, [pc, #128]	; (8001d9c <HAL_DMA_Abort_IT+0xd4>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d022      	beq.n	8001d64 <HAL_DMA_Abort_IT+0x9c>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a1f      	ldr	r2, [pc, #124]	; (8001da0 <HAL_DMA_Abort_IT+0xd8>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d01a      	beq.n	8001d5e <HAL_DMA_Abort_IT+0x96>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a1d      	ldr	r2, [pc, #116]	; (8001da4 <HAL_DMA_Abort_IT+0xdc>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d012      	beq.n	8001d58 <HAL_DMA_Abort_IT+0x90>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a1c      	ldr	r2, [pc, #112]	; (8001da8 <HAL_DMA_Abort_IT+0xe0>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d00a      	beq.n	8001d52 <HAL_DMA_Abort_IT+0x8a>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a1a      	ldr	r2, [pc, #104]	; (8001dac <HAL_DMA_Abort_IT+0xe4>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d102      	bne.n	8001d4c <HAL_DMA_Abort_IT+0x84>
 8001d46:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001d4a:	e00e      	b.n	8001d6a <HAL_DMA_Abort_IT+0xa2>
 8001d4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d50:	e00b      	b.n	8001d6a <HAL_DMA_Abort_IT+0xa2>
 8001d52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d56:	e008      	b.n	8001d6a <HAL_DMA_Abort_IT+0xa2>
 8001d58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d5c:	e005      	b.n	8001d6a <HAL_DMA_Abort_IT+0xa2>
 8001d5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d62:	e002      	b.n	8001d6a <HAL_DMA_Abort_IT+0xa2>
 8001d64:	2310      	movs	r3, #16
 8001d66:	e000      	b.n	8001d6a <HAL_DMA_Abort_IT+0xa2>
 8001d68:	2301      	movs	r3, #1
 8001d6a:	4a11      	ldr	r2, [pc, #68]	; (8001db0 <HAL_DMA_Abort_IT+0xe8>)
 8001d6c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2201      	movs	r2, #1
 8001d72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d003      	beq.n	8001d8e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	4798      	blx	r3
    } 
  }
  return status;
 8001d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3710      	adds	r7, #16
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40020008 	.word	0x40020008
 8001d9c:	4002001c 	.word	0x4002001c
 8001da0:	40020030 	.word	0x40020030
 8001da4:	40020044 	.word	0x40020044
 8001da8:	40020058 	.word	0x40020058
 8001dac:	4002006c 	.word	0x4002006c
 8001db0:	40020000 	.word	0x40020000

08001db4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd0:	2204      	movs	r2, #4
 8001dd2:	409a      	lsls	r2, r3
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d04f      	beq.n	8001e7c <HAL_DMA_IRQHandler+0xc8>
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	f003 0304 	and.w	r3, r3, #4
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d04a      	beq.n	8001e7c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0320 	and.w	r3, r3, #32
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d107      	bne.n	8001e04 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f022 0204 	bic.w	r2, r2, #4
 8001e02:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a66      	ldr	r2, [pc, #408]	; (8001fa4 <HAL_DMA_IRQHandler+0x1f0>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d029      	beq.n	8001e62 <HAL_DMA_IRQHandler+0xae>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a65      	ldr	r2, [pc, #404]	; (8001fa8 <HAL_DMA_IRQHandler+0x1f4>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d022      	beq.n	8001e5e <HAL_DMA_IRQHandler+0xaa>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a63      	ldr	r2, [pc, #396]	; (8001fac <HAL_DMA_IRQHandler+0x1f8>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d01a      	beq.n	8001e58 <HAL_DMA_IRQHandler+0xa4>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a62      	ldr	r2, [pc, #392]	; (8001fb0 <HAL_DMA_IRQHandler+0x1fc>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d012      	beq.n	8001e52 <HAL_DMA_IRQHandler+0x9e>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a60      	ldr	r2, [pc, #384]	; (8001fb4 <HAL_DMA_IRQHandler+0x200>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d00a      	beq.n	8001e4c <HAL_DMA_IRQHandler+0x98>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a5f      	ldr	r2, [pc, #380]	; (8001fb8 <HAL_DMA_IRQHandler+0x204>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d102      	bne.n	8001e46 <HAL_DMA_IRQHandler+0x92>
 8001e40:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e44:	e00e      	b.n	8001e64 <HAL_DMA_IRQHandler+0xb0>
 8001e46:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001e4a:	e00b      	b.n	8001e64 <HAL_DMA_IRQHandler+0xb0>
 8001e4c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001e50:	e008      	b.n	8001e64 <HAL_DMA_IRQHandler+0xb0>
 8001e52:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e56:	e005      	b.n	8001e64 <HAL_DMA_IRQHandler+0xb0>
 8001e58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e5c:	e002      	b.n	8001e64 <HAL_DMA_IRQHandler+0xb0>
 8001e5e:	2340      	movs	r3, #64	; 0x40
 8001e60:	e000      	b.n	8001e64 <HAL_DMA_IRQHandler+0xb0>
 8001e62:	2304      	movs	r3, #4
 8001e64:	4a55      	ldr	r2, [pc, #340]	; (8001fbc <HAL_DMA_IRQHandler+0x208>)
 8001e66:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	f000 8094 	beq.w	8001f9a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001e7a:	e08e      	b.n	8001f9a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e80:	2202      	movs	r2, #2
 8001e82:	409a      	lsls	r2, r3
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	4013      	ands	r3, r2
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d056      	beq.n	8001f3a <HAL_DMA_IRQHandler+0x186>
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	f003 0302 	and.w	r3, r3, #2
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d051      	beq.n	8001f3a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0320 	and.w	r3, r3, #32
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d10b      	bne.n	8001ebc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f022 020a 	bic.w	r2, r2, #10
 8001eb2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a38      	ldr	r2, [pc, #224]	; (8001fa4 <HAL_DMA_IRQHandler+0x1f0>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d029      	beq.n	8001f1a <HAL_DMA_IRQHandler+0x166>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a37      	ldr	r2, [pc, #220]	; (8001fa8 <HAL_DMA_IRQHandler+0x1f4>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d022      	beq.n	8001f16 <HAL_DMA_IRQHandler+0x162>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a35      	ldr	r2, [pc, #212]	; (8001fac <HAL_DMA_IRQHandler+0x1f8>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d01a      	beq.n	8001f10 <HAL_DMA_IRQHandler+0x15c>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a34      	ldr	r2, [pc, #208]	; (8001fb0 <HAL_DMA_IRQHandler+0x1fc>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d012      	beq.n	8001f0a <HAL_DMA_IRQHandler+0x156>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a32      	ldr	r2, [pc, #200]	; (8001fb4 <HAL_DMA_IRQHandler+0x200>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d00a      	beq.n	8001f04 <HAL_DMA_IRQHandler+0x150>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a31      	ldr	r2, [pc, #196]	; (8001fb8 <HAL_DMA_IRQHandler+0x204>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d102      	bne.n	8001efe <HAL_DMA_IRQHandler+0x14a>
 8001ef8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001efc:	e00e      	b.n	8001f1c <HAL_DMA_IRQHandler+0x168>
 8001efe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f02:	e00b      	b.n	8001f1c <HAL_DMA_IRQHandler+0x168>
 8001f04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f08:	e008      	b.n	8001f1c <HAL_DMA_IRQHandler+0x168>
 8001f0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f0e:	e005      	b.n	8001f1c <HAL_DMA_IRQHandler+0x168>
 8001f10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f14:	e002      	b.n	8001f1c <HAL_DMA_IRQHandler+0x168>
 8001f16:	2320      	movs	r3, #32
 8001f18:	e000      	b.n	8001f1c <HAL_DMA_IRQHandler+0x168>
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	4a27      	ldr	r2, [pc, #156]	; (8001fbc <HAL_DMA_IRQHandler+0x208>)
 8001f1e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d034      	beq.n	8001f9a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001f38:	e02f      	b.n	8001f9a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3e:	2208      	movs	r2, #8
 8001f40:	409a      	lsls	r2, r3
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	4013      	ands	r3, r2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d028      	beq.n	8001f9c <HAL_DMA_IRQHandler+0x1e8>
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	f003 0308 	and.w	r3, r3, #8
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d023      	beq.n	8001f9c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f022 020e 	bic.w	r2, r2, #14
 8001f62:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f6c:	2101      	movs	r1, #1
 8001f6e:	fa01 f202 	lsl.w	r2, r1, r2
 8001f72:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d004      	beq.n	8001f9c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	4798      	blx	r3
    }
  }
  return;
 8001f9a:	bf00      	nop
 8001f9c:	bf00      	nop
}
 8001f9e:	3710      	adds	r7, #16
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	40020008 	.word	0x40020008
 8001fa8:	4002001c 	.word	0x4002001c
 8001fac:	40020030 	.word	0x40020030
 8001fb0:	40020044 	.word	0x40020044
 8001fb4:	40020058 	.word	0x40020058
 8001fb8:	4002006c 	.word	0x4002006c
 8001fbc:	40020000 	.word	0x40020000

08001fc0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b085      	sub	sp, #20
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]
 8001fcc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fd6:	2101      	movs	r1, #1
 8001fd8:	fa01 f202 	lsl.w	r2, r1, r2
 8001fdc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	683a      	ldr	r2, [r7, #0]
 8001fe4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	2b10      	cmp	r3, #16
 8001fec:	d108      	bne.n	8002000 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	68ba      	ldr	r2, [r7, #8]
 8001ffc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001ffe:	e007      	b.n	8002010 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	68ba      	ldr	r2, [r7, #8]
 8002006:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	60da      	str	r2, [r3, #12]
}
 8002010:	bf00      	nop
 8002012:	3714      	adds	r7, #20
 8002014:	46bd      	mov	sp, r7
 8002016:	bc80      	pop	{r7}
 8002018:	4770      	bx	lr
	...

0800201c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800201c:	b480      	push	{r7}
 800201e:	b08b      	sub	sp, #44	; 0x2c
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002026:	2300      	movs	r3, #0
 8002028:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800202a:	2300      	movs	r3, #0
 800202c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800202e:	e127      	b.n	8002280 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002030:	2201      	movs	r2, #1
 8002032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	69fa      	ldr	r2, [r7, #28]
 8002040:	4013      	ands	r3, r2
 8002042:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	429a      	cmp	r2, r3
 800204a:	f040 8116 	bne.w	800227a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	2b12      	cmp	r3, #18
 8002054:	d034      	beq.n	80020c0 <HAL_GPIO_Init+0xa4>
 8002056:	2b12      	cmp	r3, #18
 8002058:	d80d      	bhi.n	8002076 <HAL_GPIO_Init+0x5a>
 800205a:	2b02      	cmp	r3, #2
 800205c:	d02b      	beq.n	80020b6 <HAL_GPIO_Init+0x9a>
 800205e:	2b02      	cmp	r3, #2
 8002060:	d804      	bhi.n	800206c <HAL_GPIO_Init+0x50>
 8002062:	2b00      	cmp	r3, #0
 8002064:	d031      	beq.n	80020ca <HAL_GPIO_Init+0xae>
 8002066:	2b01      	cmp	r3, #1
 8002068:	d01c      	beq.n	80020a4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800206a:	e048      	b.n	80020fe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800206c:	2b03      	cmp	r3, #3
 800206e:	d043      	beq.n	80020f8 <HAL_GPIO_Init+0xdc>
 8002070:	2b11      	cmp	r3, #17
 8002072:	d01b      	beq.n	80020ac <HAL_GPIO_Init+0x90>
          break;
 8002074:	e043      	b.n	80020fe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002076:	4a89      	ldr	r2, [pc, #548]	; (800229c <HAL_GPIO_Init+0x280>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d026      	beq.n	80020ca <HAL_GPIO_Init+0xae>
 800207c:	4a87      	ldr	r2, [pc, #540]	; (800229c <HAL_GPIO_Init+0x280>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d806      	bhi.n	8002090 <HAL_GPIO_Init+0x74>
 8002082:	4a87      	ldr	r2, [pc, #540]	; (80022a0 <HAL_GPIO_Init+0x284>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d020      	beq.n	80020ca <HAL_GPIO_Init+0xae>
 8002088:	4a86      	ldr	r2, [pc, #536]	; (80022a4 <HAL_GPIO_Init+0x288>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d01d      	beq.n	80020ca <HAL_GPIO_Init+0xae>
          break;
 800208e:	e036      	b.n	80020fe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002090:	4a85      	ldr	r2, [pc, #532]	; (80022a8 <HAL_GPIO_Init+0x28c>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d019      	beq.n	80020ca <HAL_GPIO_Init+0xae>
 8002096:	4a85      	ldr	r2, [pc, #532]	; (80022ac <HAL_GPIO_Init+0x290>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d016      	beq.n	80020ca <HAL_GPIO_Init+0xae>
 800209c:	4a84      	ldr	r2, [pc, #528]	; (80022b0 <HAL_GPIO_Init+0x294>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d013      	beq.n	80020ca <HAL_GPIO_Init+0xae>
          break;
 80020a2:	e02c      	b.n	80020fe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	623b      	str	r3, [r7, #32]
          break;
 80020aa:	e028      	b.n	80020fe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	3304      	adds	r3, #4
 80020b2:	623b      	str	r3, [r7, #32]
          break;
 80020b4:	e023      	b.n	80020fe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	3308      	adds	r3, #8
 80020bc:	623b      	str	r3, [r7, #32]
          break;
 80020be:	e01e      	b.n	80020fe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	330c      	adds	r3, #12
 80020c6:	623b      	str	r3, [r7, #32]
          break;
 80020c8:	e019      	b.n	80020fe <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d102      	bne.n	80020d8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80020d2:	2304      	movs	r3, #4
 80020d4:	623b      	str	r3, [r7, #32]
          break;
 80020d6:	e012      	b.n	80020fe <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d105      	bne.n	80020ec <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020e0:	2308      	movs	r3, #8
 80020e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	69fa      	ldr	r2, [r7, #28]
 80020e8:	611a      	str	r2, [r3, #16]
          break;
 80020ea:	e008      	b.n	80020fe <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020ec:	2308      	movs	r3, #8
 80020ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	69fa      	ldr	r2, [r7, #28]
 80020f4:	615a      	str	r2, [r3, #20]
          break;
 80020f6:	e002      	b.n	80020fe <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80020f8:	2300      	movs	r3, #0
 80020fa:	623b      	str	r3, [r7, #32]
          break;
 80020fc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	2bff      	cmp	r3, #255	; 0xff
 8002102:	d801      	bhi.n	8002108 <HAL_GPIO_Init+0xec>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	e001      	b.n	800210c <HAL_GPIO_Init+0xf0>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	3304      	adds	r3, #4
 800210c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	2bff      	cmp	r3, #255	; 0xff
 8002112:	d802      	bhi.n	800211a <HAL_GPIO_Init+0xfe>
 8002114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	e002      	b.n	8002120 <HAL_GPIO_Init+0x104>
 800211a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211c:	3b08      	subs	r3, #8
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	210f      	movs	r1, #15
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	fa01 f303 	lsl.w	r3, r1, r3
 800212e:	43db      	mvns	r3, r3
 8002130:	401a      	ands	r2, r3
 8002132:	6a39      	ldr	r1, [r7, #32]
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	fa01 f303 	lsl.w	r3, r1, r3
 800213a:	431a      	orrs	r2, r3
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002148:	2b00      	cmp	r3, #0
 800214a:	f000 8096 	beq.w	800227a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800214e:	4b59      	ldr	r3, [pc, #356]	; (80022b4 <HAL_GPIO_Init+0x298>)
 8002150:	699b      	ldr	r3, [r3, #24]
 8002152:	4a58      	ldr	r2, [pc, #352]	; (80022b4 <HAL_GPIO_Init+0x298>)
 8002154:	f043 0301 	orr.w	r3, r3, #1
 8002158:	6193      	str	r3, [r2, #24]
 800215a:	4b56      	ldr	r3, [pc, #344]	; (80022b4 <HAL_GPIO_Init+0x298>)
 800215c:	699b      	ldr	r3, [r3, #24]
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	60bb      	str	r3, [r7, #8]
 8002164:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002166:	4a54      	ldr	r2, [pc, #336]	; (80022b8 <HAL_GPIO_Init+0x29c>)
 8002168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216a:	089b      	lsrs	r3, r3, #2
 800216c:	3302      	adds	r3, #2
 800216e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002172:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002176:	f003 0303 	and.w	r3, r3, #3
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	220f      	movs	r2, #15
 800217e:	fa02 f303 	lsl.w	r3, r2, r3
 8002182:	43db      	mvns	r3, r3
 8002184:	68fa      	ldr	r2, [r7, #12]
 8002186:	4013      	ands	r3, r2
 8002188:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a4b      	ldr	r2, [pc, #300]	; (80022bc <HAL_GPIO_Init+0x2a0>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d013      	beq.n	80021ba <HAL_GPIO_Init+0x19e>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a4a      	ldr	r2, [pc, #296]	; (80022c0 <HAL_GPIO_Init+0x2a4>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d00d      	beq.n	80021b6 <HAL_GPIO_Init+0x19a>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a49      	ldr	r2, [pc, #292]	; (80022c4 <HAL_GPIO_Init+0x2a8>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d007      	beq.n	80021b2 <HAL_GPIO_Init+0x196>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a48      	ldr	r2, [pc, #288]	; (80022c8 <HAL_GPIO_Init+0x2ac>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d101      	bne.n	80021ae <HAL_GPIO_Init+0x192>
 80021aa:	2303      	movs	r3, #3
 80021ac:	e006      	b.n	80021bc <HAL_GPIO_Init+0x1a0>
 80021ae:	2304      	movs	r3, #4
 80021b0:	e004      	b.n	80021bc <HAL_GPIO_Init+0x1a0>
 80021b2:	2302      	movs	r3, #2
 80021b4:	e002      	b.n	80021bc <HAL_GPIO_Init+0x1a0>
 80021b6:	2301      	movs	r3, #1
 80021b8:	e000      	b.n	80021bc <HAL_GPIO_Init+0x1a0>
 80021ba:	2300      	movs	r3, #0
 80021bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021be:	f002 0203 	and.w	r2, r2, #3
 80021c2:	0092      	lsls	r2, r2, #2
 80021c4:	4093      	lsls	r3, r2
 80021c6:	68fa      	ldr	r2, [r7, #12]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80021cc:	493a      	ldr	r1, [pc, #232]	; (80022b8 <HAL_GPIO_Init+0x29c>)
 80021ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d0:	089b      	lsrs	r3, r3, #2
 80021d2:	3302      	adds	r3, #2
 80021d4:	68fa      	ldr	r2, [r7, #12]
 80021d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d006      	beq.n	80021f4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80021e6:	4b39      	ldr	r3, [pc, #228]	; (80022cc <HAL_GPIO_Init+0x2b0>)
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	4938      	ldr	r1, [pc, #224]	; (80022cc <HAL_GPIO_Init+0x2b0>)
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	600b      	str	r3, [r1, #0]
 80021f2:	e006      	b.n	8002202 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80021f4:	4b35      	ldr	r3, [pc, #212]	; (80022cc <HAL_GPIO_Init+0x2b0>)
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	43db      	mvns	r3, r3
 80021fc:	4933      	ldr	r1, [pc, #204]	; (80022cc <HAL_GPIO_Init+0x2b0>)
 80021fe:	4013      	ands	r3, r2
 8002200:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d006      	beq.n	800221c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800220e:	4b2f      	ldr	r3, [pc, #188]	; (80022cc <HAL_GPIO_Init+0x2b0>)
 8002210:	685a      	ldr	r2, [r3, #4]
 8002212:	492e      	ldr	r1, [pc, #184]	; (80022cc <HAL_GPIO_Init+0x2b0>)
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	4313      	orrs	r3, r2
 8002218:	604b      	str	r3, [r1, #4]
 800221a:	e006      	b.n	800222a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800221c:	4b2b      	ldr	r3, [pc, #172]	; (80022cc <HAL_GPIO_Init+0x2b0>)
 800221e:	685a      	ldr	r2, [r3, #4]
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	43db      	mvns	r3, r3
 8002224:	4929      	ldr	r1, [pc, #164]	; (80022cc <HAL_GPIO_Init+0x2b0>)
 8002226:	4013      	ands	r3, r2
 8002228:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d006      	beq.n	8002244 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002236:	4b25      	ldr	r3, [pc, #148]	; (80022cc <HAL_GPIO_Init+0x2b0>)
 8002238:	689a      	ldr	r2, [r3, #8]
 800223a:	4924      	ldr	r1, [pc, #144]	; (80022cc <HAL_GPIO_Init+0x2b0>)
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	4313      	orrs	r3, r2
 8002240:	608b      	str	r3, [r1, #8]
 8002242:	e006      	b.n	8002252 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002244:	4b21      	ldr	r3, [pc, #132]	; (80022cc <HAL_GPIO_Init+0x2b0>)
 8002246:	689a      	ldr	r2, [r3, #8]
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	43db      	mvns	r3, r3
 800224c:	491f      	ldr	r1, [pc, #124]	; (80022cc <HAL_GPIO_Init+0x2b0>)
 800224e:	4013      	ands	r3, r2
 8002250:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d006      	beq.n	800226c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800225e:	4b1b      	ldr	r3, [pc, #108]	; (80022cc <HAL_GPIO_Init+0x2b0>)
 8002260:	68da      	ldr	r2, [r3, #12]
 8002262:	491a      	ldr	r1, [pc, #104]	; (80022cc <HAL_GPIO_Init+0x2b0>)
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	4313      	orrs	r3, r2
 8002268:	60cb      	str	r3, [r1, #12]
 800226a:	e006      	b.n	800227a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800226c:	4b17      	ldr	r3, [pc, #92]	; (80022cc <HAL_GPIO_Init+0x2b0>)
 800226e:	68da      	ldr	r2, [r3, #12]
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	43db      	mvns	r3, r3
 8002274:	4915      	ldr	r1, [pc, #84]	; (80022cc <HAL_GPIO_Init+0x2b0>)
 8002276:	4013      	ands	r3, r2
 8002278:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800227a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227c:	3301      	adds	r3, #1
 800227e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002286:	fa22 f303 	lsr.w	r3, r2, r3
 800228a:	2b00      	cmp	r3, #0
 800228c:	f47f aed0 	bne.w	8002030 <HAL_GPIO_Init+0x14>
  }
}
 8002290:	bf00      	nop
 8002292:	372c      	adds	r7, #44	; 0x2c
 8002294:	46bd      	mov	sp, r7
 8002296:	bc80      	pop	{r7}
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	10210000 	.word	0x10210000
 80022a0:	10110000 	.word	0x10110000
 80022a4:	10120000 	.word	0x10120000
 80022a8:	10310000 	.word	0x10310000
 80022ac:	10320000 	.word	0x10320000
 80022b0:	10220000 	.word	0x10220000
 80022b4:	40021000 	.word	0x40021000
 80022b8:	40010000 	.word	0x40010000
 80022bc:	40010800 	.word	0x40010800
 80022c0:	40010c00 	.word	0x40010c00
 80022c4:	40011000 	.word	0x40011000
 80022c8:	40011400 	.word	0x40011400
 80022cc:	40010400 	.word	0x40010400

080022d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	460b      	mov	r3, r1
 80022da:	807b      	strh	r3, [r7, #2]
 80022dc:	4613      	mov	r3, r2
 80022de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022e0:	787b      	ldrb	r3, [r7, #1]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d003      	beq.n	80022ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022e6:	887a      	ldrh	r2, [r7, #2]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80022ec:	e003      	b.n	80022f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022ee:	887b      	ldrh	r3, [r7, #2]
 80022f0:	041a      	lsls	r2, r3, #16
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	611a      	str	r2, [r3, #16]
}
 80022f6:	bf00      	nop
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bc80      	pop	{r7}
 80022fe:	4770      	bx	lr

08002300 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b086      	sub	sp, #24
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d101      	bne.n	8002312 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e26c      	b.n	80027ec <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	2b00      	cmp	r3, #0
 800231c:	f000 8087 	beq.w	800242e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002320:	4b92      	ldr	r3, [pc, #584]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f003 030c 	and.w	r3, r3, #12
 8002328:	2b04      	cmp	r3, #4
 800232a:	d00c      	beq.n	8002346 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800232c:	4b8f      	ldr	r3, [pc, #572]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f003 030c 	and.w	r3, r3, #12
 8002334:	2b08      	cmp	r3, #8
 8002336:	d112      	bne.n	800235e <HAL_RCC_OscConfig+0x5e>
 8002338:	4b8c      	ldr	r3, [pc, #560]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002340:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002344:	d10b      	bne.n	800235e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002346:	4b89      	ldr	r3, [pc, #548]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d06c      	beq.n	800242c <HAL_RCC_OscConfig+0x12c>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d168      	bne.n	800242c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e246      	b.n	80027ec <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002366:	d106      	bne.n	8002376 <HAL_RCC_OscConfig+0x76>
 8002368:	4b80      	ldr	r3, [pc, #512]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a7f      	ldr	r2, [pc, #508]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 800236e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002372:	6013      	str	r3, [r2, #0]
 8002374:	e02e      	b.n	80023d4 <HAL_RCC_OscConfig+0xd4>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d10c      	bne.n	8002398 <HAL_RCC_OscConfig+0x98>
 800237e:	4b7b      	ldr	r3, [pc, #492]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a7a      	ldr	r2, [pc, #488]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 8002384:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002388:	6013      	str	r3, [r2, #0]
 800238a:	4b78      	ldr	r3, [pc, #480]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a77      	ldr	r2, [pc, #476]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 8002390:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002394:	6013      	str	r3, [r2, #0]
 8002396:	e01d      	b.n	80023d4 <HAL_RCC_OscConfig+0xd4>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023a0:	d10c      	bne.n	80023bc <HAL_RCC_OscConfig+0xbc>
 80023a2:	4b72      	ldr	r3, [pc, #456]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a71      	ldr	r2, [pc, #452]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 80023a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023ac:	6013      	str	r3, [r2, #0]
 80023ae:	4b6f      	ldr	r3, [pc, #444]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a6e      	ldr	r2, [pc, #440]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 80023b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023b8:	6013      	str	r3, [r2, #0]
 80023ba:	e00b      	b.n	80023d4 <HAL_RCC_OscConfig+0xd4>
 80023bc:	4b6b      	ldr	r3, [pc, #428]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a6a      	ldr	r2, [pc, #424]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 80023c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023c6:	6013      	str	r3, [r2, #0]
 80023c8:	4b68      	ldr	r3, [pc, #416]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a67      	ldr	r2, [pc, #412]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 80023ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023d2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d013      	beq.n	8002404 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023dc:	f7ff fa80 	bl	80018e0 <HAL_GetTick>
 80023e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023e2:	e008      	b.n	80023f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023e4:	f7ff fa7c 	bl	80018e0 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b64      	cmp	r3, #100	; 0x64
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e1fa      	b.n	80027ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023f6:	4b5d      	ldr	r3, [pc, #372]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d0f0      	beq.n	80023e4 <HAL_RCC_OscConfig+0xe4>
 8002402:	e014      	b.n	800242e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002404:	f7ff fa6c 	bl	80018e0 <HAL_GetTick>
 8002408:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800240a:	e008      	b.n	800241e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800240c:	f7ff fa68 	bl	80018e0 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b64      	cmp	r3, #100	; 0x64
 8002418:	d901      	bls.n	800241e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e1e6      	b.n	80027ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800241e:	4b53      	ldr	r3, [pc, #332]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1f0      	bne.n	800240c <HAL_RCC_OscConfig+0x10c>
 800242a:	e000      	b.n	800242e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800242c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	2b00      	cmp	r3, #0
 8002438:	d063      	beq.n	8002502 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800243a:	4b4c      	ldr	r3, [pc, #304]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f003 030c 	and.w	r3, r3, #12
 8002442:	2b00      	cmp	r3, #0
 8002444:	d00b      	beq.n	800245e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002446:	4b49      	ldr	r3, [pc, #292]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f003 030c 	and.w	r3, r3, #12
 800244e:	2b08      	cmp	r3, #8
 8002450:	d11c      	bne.n	800248c <HAL_RCC_OscConfig+0x18c>
 8002452:	4b46      	ldr	r3, [pc, #280]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d116      	bne.n	800248c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800245e:	4b43      	ldr	r3, [pc, #268]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	2b00      	cmp	r3, #0
 8002468:	d005      	beq.n	8002476 <HAL_RCC_OscConfig+0x176>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	2b01      	cmp	r3, #1
 8002470:	d001      	beq.n	8002476 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e1ba      	b.n	80027ec <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002476:	4b3d      	ldr	r3, [pc, #244]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	695b      	ldr	r3, [r3, #20]
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	4939      	ldr	r1, [pc, #228]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 8002486:	4313      	orrs	r3, r2
 8002488:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800248a:	e03a      	b.n	8002502 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	691b      	ldr	r3, [r3, #16]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d020      	beq.n	80024d6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002494:	4b36      	ldr	r3, [pc, #216]	; (8002570 <HAL_RCC_OscConfig+0x270>)
 8002496:	2201      	movs	r2, #1
 8002498:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800249a:	f7ff fa21 	bl	80018e0 <HAL_GetTick>
 800249e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024a0:	e008      	b.n	80024b4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024a2:	f7ff fa1d 	bl	80018e0 <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d901      	bls.n	80024b4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e19b      	b.n	80027ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b4:	4b2d      	ldr	r3, [pc, #180]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d0f0      	beq.n	80024a2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024c0:	4b2a      	ldr	r3, [pc, #168]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	695b      	ldr	r3, [r3, #20]
 80024cc:	00db      	lsls	r3, r3, #3
 80024ce:	4927      	ldr	r1, [pc, #156]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	600b      	str	r3, [r1, #0]
 80024d4:	e015      	b.n	8002502 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024d6:	4b26      	ldr	r3, [pc, #152]	; (8002570 <HAL_RCC_OscConfig+0x270>)
 80024d8:	2200      	movs	r2, #0
 80024da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024dc:	f7ff fa00 	bl	80018e0 <HAL_GetTick>
 80024e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024e2:	e008      	b.n	80024f6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024e4:	f7ff f9fc 	bl	80018e0 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e17a      	b.n	80027ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024f6:	4b1d      	ldr	r3, [pc, #116]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1f0      	bne.n	80024e4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0308 	and.w	r3, r3, #8
 800250a:	2b00      	cmp	r3, #0
 800250c:	d03a      	beq.n	8002584 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	699b      	ldr	r3, [r3, #24]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d019      	beq.n	800254a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002516:	4b17      	ldr	r3, [pc, #92]	; (8002574 <HAL_RCC_OscConfig+0x274>)
 8002518:	2201      	movs	r2, #1
 800251a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800251c:	f7ff f9e0 	bl	80018e0 <HAL_GetTick>
 8002520:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002522:	e008      	b.n	8002536 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002524:	f7ff f9dc 	bl	80018e0 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b02      	cmp	r3, #2
 8002530:	d901      	bls.n	8002536 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e15a      	b.n	80027ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002536:	4b0d      	ldr	r3, [pc, #52]	; (800256c <HAL_RCC_OscConfig+0x26c>)
 8002538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253a:	f003 0302 	and.w	r3, r3, #2
 800253e:	2b00      	cmp	r3, #0
 8002540:	d0f0      	beq.n	8002524 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002542:	2001      	movs	r0, #1
 8002544:	f000 fada 	bl	8002afc <RCC_Delay>
 8002548:	e01c      	b.n	8002584 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800254a:	4b0a      	ldr	r3, [pc, #40]	; (8002574 <HAL_RCC_OscConfig+0x274>)
 800254c:	2200      	movs	r2, #0
 800254e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002550:	f7ff f9c6 	bl	80018e0 <HAL_GetTick>
 8002554:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002556:	e00f      	b.n	8002578 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002558:	f7ff f9c2 	bl	80018e0 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b02      	cmp	r3, #2
 8002564:	d908      	bls.n	8002578 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e140      	b.n	80027ec <HAL_RCC_OscConfig+0x4ec>
 800256a:	bf00      	nop
 800256c:	40021000 	.word	0x40021000
 8002570:	42420000 	.word	0x42420000
 8002574:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002578:	4b9e      	ldr	r3, [pc, #632]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 800257a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257c:	f003 0302 	and.w	r3, r3, #2
 8002580:	2b00      	cmp	r3, #0
 8002582:	d1e9      	bne.n	8002558 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0304 	and.w	r3, r3, #4
 800258c:	2b00      	cmp	r3, #0
 800258e:	f000 80a6 	beq.w	80026de <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002592:	2300      	movs	r3, #0
 8002594:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002596:	4b97      	ldr	r3, [pc, #604]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 8002598:	69db      	ldr	r3, [r3, #28]
 800259a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d10d      	bne.n	80025be <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025a2:	4b94      	ldr	r3, [pc, #592]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 80025a4:	69db      	ldr	r3, [r3, #28]
 80025a6:	4a93      	ldr	r2, [pc, #588]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 80025a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025ac:	61d3      	str	r3, [r2, #28]
 80025ae:	4b91      	ldr	r3, [pc, #580]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 80025b0:	69db      	ldr	r3, [r3, #28]
 80025b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025b6:	60bb      	str	r3, [r7, #8]
 80025b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025ba:	2301      	movs	r3, #1
 80025bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025be:	4b8e      	ldr	r3, [pc, #568]	; (80027f8 <HAL_RCC_OscConfig+0x4f8>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d118      	bne.n	80025fc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025ca:	4b8b      	ldr	r3, [pc, #556]	; (80027f8 <HAL_RCC_OscConfig+0x4f8>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a8a      	ldr	r2, [pc, #552]	; (80027f8 <HAL_RCC_OscConfig+0x4f8>)
 80025d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025d6:	f7ff f983 	bl	80018e0 <HAL_GetTick>
 80025da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025dc:	e008      	b.n	80025f0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025de:	f7ff f97f 	bl	80018e0 <HAL_GetTick>
 80025e2:	4602      	mov	r2, r0
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	2b64      	cmp	r3, #100	; 0x64
 80025ea:	d901      	bls.n	80025f0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e0fd      	b.n	80027ec <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025f0:	4b81      	ldr	r3, [pc, #516]	; (80027f8 <HAL_RCC_OscConfig+0x4f8>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d0f0      	beq.n	80025de <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	2b01      	cmp	r3, #1
 8002602:	d106      	bne.n	8002612 <HAL_RCC_OscConfig+0x312>
 8002604:	4b7b      	ldr	r3, [pc, #492]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 8002606:	6a1b      	ldr	r3, [r3, #32]
 8002608:	4a7a      	ldr	r2, [pc, #488]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 800260a:	f043 0301 	orr.w	r3, r3, #1
 800260e:	6213      	str	r3, [r2, #32]
 8002610:	e02d      	b.n	800266e <HAL_RCC_OscConfig+0x36e>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d10c      	bne.n	8002634 <HAL_RCC_OscConfig+0x334>
 800261a:	4b76      	ldr	r3, [pc, #472]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 800261c:	6a1b      	ldr	r3, [r3, #32]
 800261e:	4a75      	ldr	r2, [pc, #468]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 8002620:	f023 0301 	bic.w	r3, r3, #1
 8002624:	6213      	str	r3, [r2, #32]
 8002626:	4b73      	ldr	r3, [pc, #460]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 8002628:	6a1b      	ldr	r3, [r3, #32]
 800262a:	4a72      	ldr	r2, [pc, #456]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 800262c:	f023 0304 	bic.w	r3, r3, #4
 8002630:	6213      	str	r3, [r2, #32]
 8002632:	e01c      	b.n	800266e <HAL_RCC_OscConfig+0x36e>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	2b05      	cmp	r3, #5
 800263a:	d10c      	bne.n	8002656 <HAL_RCC_OscConfig+0x356>
 800263c:	4b6d      	ldr	r3, [pc, #436]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 800263e:	6a1b      	ldr	r3, [r3, #32]
 8002640:	4a6c      	ldr	r2, [pc, #432]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 8002642:	f043 0304 	orr.w	r3, r3, #4
 8002646:	6213      	str	r3, [r2, #32]
 8002648:	4b6a      	ldr	r3, [pc, #424]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 800264a:	6a1b      	ldr	r3, [r3, #32]
 800264c:	4a69      	ldr	r2, [pc, #420]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 800264e:	f043 0301 	orr.w	r3, r3, #1
 8002652:	6213      	str	r3, [r2, #32]
 8002654:	e00b      	b.n	800266e <HAL_RCC_OscConfig+0x36e>
 8002656:	4b67      	ldr	r3, [pc, #412]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 8002658:	6a1b      	ldr	r3, [r3, #32]
 800265a:	4a66      	ldr	r2, [pc, #408]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 800265c:	f023 0301 	bic.w	r3, r3, #1
 8002660:	6213      	str	r3, [r2, #32]
 8002662:	4b64      	ldr	r3, [pc, #400]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 8002664:	6a1b      	ldr	r3, [r3, #32]
 8002666:	4a63      	ldr	r2, [pc, #396]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 8002668:	f023 0304 	bic.w	r3, r3, #4
 800266c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d015      	beq.n	80026a2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002676:	f7ff f933 	bl	80018e0 <HAL_GetTick>
 800267a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800267c:	e00a      	b.n	8002694 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800267e:	f7ff f92f 	bl	80018e0 <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	f241 3288 	movw	r2, #5000	; 0x1388
 800268c:	4293      	cmp	r3, r2
 800268e:	d901      	bls.n	8002694 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e0ab      	b.n	80027ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002694:	4b57      	ldr	r3, [pc, #348]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 8002696:	6a1b      	ldr	r3, [r3, #32]
 8002698:	f003 0302 	and.w	r3, r3, #2
 800269c:	2b00      	cmp	r3, #0
 800269e:	d0ee      	beq.n	800267e <HAL_RCC_OscConfig+0x37e>
 80026a0:	e014      	b.n	80026cc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026a2:	f7ff f91d 	bl	80018e0 <HAL_GetTick>
 80026a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026a8:	e00a      	b.n	80026c0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026aa:	f7ff f919 	bl	80018e0 <HAL_GetTick>
 80026ae:	4602      	mov	r2, r0
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d901      	bls.n	80026c0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e095      	b.n	80027ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026c0:	4b4c      	ldr	r3, [pc, #304]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 80026c2:	6a1b      	ldr	r3, [r3, #32]
 80026c4:	f003 0302 	and.w	r3, r3, #2
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d1ee      	bne.n	80026aa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80026cc:	7dfb      	ldrb	r3, [r7, #23]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d105      	bne.n	80026de <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026d2:	4b48      	ldr	r3, [pc, #288]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 80026d4:	69db      	ldr	r3, [r3, #28]
 80026d6:	4a47      	ldr	r2, [pc, #284]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 80026d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026dc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	69db      	ldr	r3, [r3, #28]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	f000 8081 	beq.w	80027ea <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026e8:	4b42      	ldr	r3, [pc, #264]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f003 030c 	and.w	r3, r3, #12
 80026f0:	2b08      	cmp	r3, #8
 80026f2:	d061      	beq.n	80027b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	69db      	ldr	r3, [r3, #28]
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d146      	bne.n	800278a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026fc:	4b3f      	ldr	r3, [pc, #252]	; (80027fc <HAL_RCC_OscConfig+0x4fc>)
 80026fe:	2200      	movs	r2, #0
 8002700:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002702:	f7ff f8ed 	bl	80018e0 <HAL_GetTick>
 8002706:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002708:	e008      	b.n	800271c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800270a:	f7ff f8e9 	bl	80018e0 <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	2b02      	cmp	r3, #2
 8002716:	d901      	bls.n	800271c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e067      	b.n	80027ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800271c:	4b35      	ldr	r3, [pc, #212]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d1f0      	bne.n	800270a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6a1b      	ldr	r3, [r3, #32]
 800272c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002730:	d108      	bne.n	8002744 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002732:	4b30      	ldr	r3, [pc, #192]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	492d      	ldr	r1, [pc, #180]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 8002740:	4313      	orrs	r3, r2
 8002742:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002744:	4b2b      	ldr	r3, [pc, #172]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a19      	ldr	r1, [r3, #32]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002754:	430b      	orrs	r3, r1
 8002756:	4927      	ldr	r1, [pc, #156]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 8002758:	4313      	orrs	r3, r2
 800275a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800275c:	4b27      	ldr	r3, [pc, #156]	; (80027fc <HAL_RCC_OscConfig+0x4fc>)
 800275e:	2201      	movs	r2, #1
 8002760:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002762:	f7ff f8bd 	bl	80018e0 <HAL_GetTick>
 8002766:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002768:	e008      	b.n	800277c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800276a:	f7ff f8b9 	bl	80018e0 <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	2b02      	cmp	r3, #2
 8002776:	d901      	bls.n	800277c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e037      	b.n	80027ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800277c:	4b1d      	ldr	r3, [pc, #116]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d0f0      	beq.n	800276a <HAL_RCC_OscConfig+0x46a>
 8002788:	e02f      	b.n	80027ea <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800278a:	4b1c      	ldr	r3, [pc, #112]	; (80027fc <HAL_RCC_OscConfig+0x4fc>)
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002790:	f7ff f8a6 	bl	80018e0 <HAL_GetTick>
 8002794:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002796:	e008      	b.n	80027aa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002798:	f7ff f8a2 	bl	80018e0 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e020      	b.n	80027ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027aa:	4b12      	ldr	r3, [pc, #72]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d1f0      	bne.n	8002798 <HAL_RCC_OscConfig+0x498>
 80027b6:	e018      	b.n	80027ea <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	69db      	ldr	r3, [r3, #28]
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d101      	bne.n	80027c4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e013      	b.n	80027ec <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80027c4:	4b0b      	ldr	r3, [pc, #44]	; (80027f4 <HAL_RCC_OscConfig+0x4f4>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6a1b      	ldr	r3, [r3, #32]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d106      	bne.n	80027e6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d001      	beq.n	80027ea <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e000      	b.n	80027ec <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80027ea:	2300      	movs	r3, #0
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3718      	adds	r7, #24
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	40021000 	.word	0x40021000
 80027f8:	40007000 	.word	0x40007000
 80027fc:	42420060 	.word	0x42420060

08002800 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d101      	bne.n	8002814 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e0d0      	b.n	80029b6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002814:	4b6a      	ldr	r3, [pc, #424]	; (80029c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0307 	and.w	r3, r3, #7
 800281c:	683a      	ldr	r2, [r7, #0]
 800281e:	429a      	cmp	r2, r3
 8002820:	d910      	bls.n	8002844 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002822:	4b67      	ldr	r3, [pc, #412]	; (80029c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f023 0207 	bic.w	r2, r3, #7
 800282a:	4965      	ldr	r1, [pc, #404]	; (80029c0 <HAL_RCC_ClockConfig+0x1c0>)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	4313      	orrs	r3, r2
 8002830:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002832:	4b63      	ldr	r3, [pc, #396]	; (80029c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0307 	and.w	r3, r3, #7
 800283a:	683a      	ldr	r2, [r7, #0]
 800283c:	429a      	cmp	r2, r3
 800283e:	d001      	beq.n	8002844 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e0b8      	b.n	80029b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0302 	and.w	r3, r3, #2
 800284c:	2b00      	cmp	r3, #0
 800284e:	d020      	beq.n	8002892 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0304 	and.w	r3, r3, #4
 8002858:	2b00      	cmp	r3, #0
 800285a:	d005      	beq.n	8002868 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800285c:	4b59      	ldr	r3, [pc, #356]	; (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	4a58      	ldr	r2, [pc, #352]	; (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002862:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002866:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0308 	and.w	r3, r3, #8
 8002870:	2b00      	cmp	r3, #0
 8002872:	d005      	beq.n	8002880 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002874:	4b53      	ldr	r3, [pc, #332]	; (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	4a52      	ldr	r2, [pc, #328]	; (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 800287a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800287e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002880:	4b50      	ldr	r3, [pc, #320]	; (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	494d      	ldr	r1, [pc, #308]	; (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 800288e:	4313      	orrs	r3, r2
 8002890:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	2b00      	cmp	r3, #0
 800289c:	d040      	beq.n	8002920 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d107      	bne.n	80028b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028a6:	4b47      	ldr	r3, [pc, #284]	; (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d115      	bne.n	80028de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e07f      	b.n	80029b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d107      	bne.n	80028ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028be:	4b41      	ldr	r3, [pc, #260]	; (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d109      	bne.n	80028de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e073      	b.n	80029b6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ce:	4b3d      	ldr	r3, [pc, #244]	; (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d101      	bne.n	80028de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e06b      	b.n	80029b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028de:	4b39      	ldr	r3, [pc, #228]	; (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f023 0203 	bic.w	r2, r3, #3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	4936      	ldr	r1, [pc, #216]	; (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028f0:	f7fe fff6 	bl	80018e0 <HAL_GetTick>
 80028f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028f6:	e00a      	b.n	800290e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028f8:	f7fe fff2 	bl	80018e0 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	f241 3288 	movw	r2, #5000	; 0x1388
 8002906:	4293      	cmp	r3, r2
 8002908:	d901      	bls.n	800290e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e053      	b.n	80029b6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800290e:	4b2d      	ldr	r3, [pc, #180]	; (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f003 020c 	and.w	r2, r3, #12
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	429a      	cmp	r2, r3
 800291e:	d1eb      	bne.n	80028f8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002920:	4b27      	ldr	r3, [pc, #156]	; (80029c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0307 	and.w	r3, r3, #7
 8002928:	683a      	ldr	r2, [r7, #0]
 800292a:	429a      	cmp	r2, r3
 800292c:	d210      	bcs.n	8002950 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800292e:	4b24      	ldr	r3, [pc, #144]	; (80029c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f023 0207 	bic.w	r2, r3, #7
 8002936:	4922      	ldr	r1, [pc, #136]	; (80029c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	4313      	orrs	r3, r2
 800293c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800293e:	4b20      	ldr	r3, [pc, #128]	; (80029c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0307 	and.w	r3, r3, #7
 8002946:	683a      	ldr	r2, [r7, #0]
 8002948:	429a      	cmp	r2, r3
 800294a:	d001      	beq.n	8002950 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e032      	b.n	80029b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0304 	and.w	r3, r3, #4
 8002958:	2b00      	cmp	r3, #0
 800295a:	d008      	beq.n	800296e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800295c:	4b19      	ldr	r3, [pc, #100]	; (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	4916      	ldr	r1, [pc, #88]	; (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 800296a:	4313      	orrs	r3, r2
 800296c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0308 	and.w	r3, r3, #8
 8002976:	2b00      	cmp	r3, #0
 8002978:	d009      	beq.n	800298e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800297a:	4b12      	ldr	r3, [pc, #72]	; (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	691b      	ldr	r3, [r3, #16]
 8002986:	00db      	lsls	r3, r3, #3
 8002988:	490e      	ldr	r1, [pc, #56]	; (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 800298a:	4313      	orrs	r3, r2
 800298c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800298e:	f000 f821 	bl	80029d4 <HAL_RCC_GetSysClockFreq>
 8002992:	4601      	mov	r1, r0
 8002994:	4b0b      	ldr	r3, [pc, #44]	; (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	091b      	lsrs	r3, r3, #4
 800299a:	f003 030f 	and.w	r3, r3, #15
 800299e:	4a0a      	ldr	r2, [pc, #40]	; (80029c8 <HAL_RCC_ClockConfig+0x1c8>)
 80029a0:	5cd3      	ldrb	r3, [r2, r3]
 80029a2:	fa21 f303 	lsr.w	r3, r1, r3
 80029a6:	4a09      	ldr	r2, [pc, #36]	; (80029cc <HAL_RCC_ClockConfig+0x1cc>)
 80029a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80029aa:	4b09      	ldr	r3, [pc, #36]	; (80029d0 <HAL_RCC_ClockConfig+0x1d0>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7fe ff54 	bl	800185c <HAL_InitTick>

  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3710      	adds	r7, #16
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	40022000 	.word	0x40022000
 80029c4:	40021000 	.word	0x40021000
 80029c8:	08004ca4 	.word	0x08004ca4
 80029cc:	20000008 	.word	0x20000008
 80029d0:	2000000c 	.word	0x2000000c

080029d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029d4:	b490      	push	{r4, r7}
 80029d6:	b08a      	sub	sp, #40	; 0x28
 80029d8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80029da:	4b2a      	ldr	r3, [pc, #168]	; (8002a84 <HAL_RCC_GetSysClockFreq+0xb0>)
 80029dc:	1d3c      	adds	r4, r7, #4
 80029de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80029e4:	4b28      	ldr	r3, [pc, #160]	; (8002a88 <HAL_RCC_GetSysClockFreq+0xb4>)
 80029e6:	881b      	ldrh	r3, [r3, #0]
 80029e8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029ea:	2300      	movs	r3, #0
 80029ec:	61fb      	str	r3, [r7, #28]
 80029ee:	2300      	movs	r3, #0
 80029f0:	61bb      	str	r3, [r7, #24]
 80029f2:	2300      	movs	r3, #0
 80029f4:	627b      	str	r3, [r7, #36]	; 0x24
 80029f6:	2300      	movs	r3, #0
 80029f8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80029fa:	2300      	movs	r3, #0
 80029fc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80029fe:	4b23      	ldr	r3, [pc, #140]	; (8002a8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	f003 030c 	and.w	r3, r3, #12
 8002a0a:	2b04      	cmp	r3, #4
 8002a0c:	d002      	beq.n	8002a14 <HAL_RCC_GetSysClockFreq+0x40>
 8002a0e:	2b08      	cmp	r3, #8
 8002a10:	d003      	beq.n	8002a1a <HAL_RCC_GetSysClockFreq+0x46>
 8002a12:	e02d      	b.n	8002a70 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a14:	4b1e      	ldr	r3, [pc, #120]	; (8002a90 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a16:	623b      	str	r3, [r7, #32]
      break;
 8002a18:	e02d      	b.n	8002a76 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	0c9b      	lsrs	r3, r3, #18
 8002a1e:	f003 030f 	and.w	r3, r3, #15
 8002a22:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002a26:	4413      	add	r3, r2
 8002a28:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002a2c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d013      	beq.n	8002a60 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a38:	4b14      	ldr	r3, [pc, #80]	; (8002a8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	0c5b      	lsrs	r3, r3, #17
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002a46:	4413      	add	r3, r2
 8002a48:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002a4c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	4a0f      	ldr	r2, [pc, #60]	; (8002a90 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a52:	fb02 f203 	mul.w	r2, r2, r3
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a5c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a5e:	e004      	b.n	8002a6a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	4a0c      	ldr	r2, [pc, #48]	; (8002a94 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a64:	fb02 f303 	mul.w	r3, r2, r3
 8002a68:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6c:	623b      	str	r3, [r7, #32]
      break;
 8002a6e:	e002      	b.n	8002a76 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a70:	4b07      	ldr	r3, [pc, #28]	; (8002a90 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a72:	623b      	str	r3, [r7, #32]
      break;
 8002a74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a76:	6a3b      	ldr	r3, [r7, #32]
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3728      	adds	r7, #40	; 0x28
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bc90      	pop	{r4, r7}
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	08004c90 	.word	0x08004c90
 8002a88:	08004ca0 	.word	0x08004ca0
 8002a8c:	40021000 	.word	0x40021000
 8002a90:	007a1200 	.word	0x007a1200
 8002a94:	003d0900 	.word	0x003d0900

08002a98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a9c:	4b02      	ldr	r3, [pc, #8]	; (8002aa8 <HAL_RCC_GetHCLKFreq+0x10>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bc80      	pop	{r7}
 8002aa6:	4770      	bx	lr
 8002aa8:	20000008 	.word	0x20000008

08002aac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ab0:	f7ff fff2 	bl	8002a98 <HAL_RCC_GetHCLKFreq>
 8002ab4:	4601      	mov	r1, r0
 8002ab6:	4b05      	ldr	r3, [pc, #20]	; (8002acc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	0a1b      	lsrs	r3, r3, #8
 8002abc:	f003 0307 	and.w	r3, r3, #7
 8002ac0:	4a03      	ldr	r2, [pc, #12]	; (8002ad0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ac2:	5cd3      	ldrb	r3, [r2, r3]
 8002ac4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	40021000 	.word	0x40021000
 8002ad0:	08004cb4 	.word	0x08004cb4

08002ad4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ad8:	f7ff ffde 	bl	8002a98 <HAL_RCC_GetHCLKFreq>
 8002adc:	4601      	mov	r1, r0
 8002ade:	4b05      	ldr	r3, [pc, #20]	; (8002af4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	0adb      	lsrs	r3, r3, #11
 8002ae4:	f003 0307 	and.w	r3, r3, #7
 8002ae8:	4a03      	ldr	r2, [pc, #12]	; (8002af8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002aea:	5cd3      	ldrb	r3, [r2, r3]
 8002aec:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	40021000 	.word	0x40021000
 8002af8:	08004cb4 	.word	0x08004cb4

08002afc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b085      	sub	sp, #20
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002b04:	4b0a      	ldr	r3, [pc, #40]	; (8002b30 <RCC_Delay+0x34>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a0a      	ldr	r2, [pc, #40]	; (8002b34 <RCC_Delay+0x38>)
 8002b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b0e:	0a5b      	lsrs	r3, r3, #9
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	fb02 f303 	mul.w	r3, r2, r3
 8002b16:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002b18:	bf00      	nop
  }
  while (Delay --);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	1e5a      	subs	r2, r3, #1
 8002b1e:	60fa      	str	r2, [r7, #12]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d1f9      	bne.n	8002b18 <RCC_Delay+0x1c>
}
 8002b24:	bf00      	nop
 8002b26:	3714      	adds	r7, #20
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bc80      	pop	{r7}
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	20000008 	.word	0x20000008
 8002b34:	10624dd3 	.word	0x10624dd3

08002b38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d101      	bne.n	8002b4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e01d      	b.n	8002b86 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d106      	bne.n	8002b64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f7fe fb92 	bl	8001288 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2202      	movs	r2, #2
 8002b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	3304      	adds	r3, #4
 8002b74:	4619      	mov	r1, r3
 8002b76:	4610      	mov	r0, r2
 8002b78:	f000 fbb2 	bl	80032e0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3708      	adds	r7, #8
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}

08002b8e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	b085      	sub	sp, #20
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	68da      	ldr	r2, [r3, #12]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f042 0201 	orr.w	r2, r2, #1
 8002ba4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f003 0307 	and.w	r3, r3, #7
 8002bb0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2b06      	cmp	r3, #6
 8002bb6:	d007      	beq.n	8002bc8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f042 0201 	orr.w	r2, r2, #1
 8002bc6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3714      	adds	r7, #20
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bc80      	pop	{r7}
 8002bd2:	4770      	bx	lr

08002bd4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	68da      	ldr	r2, [r3, #12]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f022 0201 	bic.w	r2, r2, #1
 8002bea:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	6a1a      	ldr	r2, [r3, #32]
 8002bf2:	f241 1311 	movw	r3, #4369	; 0x1111
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d10f      	bne.n	8002c1c <HAL_TIM_Base_Stop_IT+0x48>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	6a1a      	ldr	r2, [r3, #32]
 8002c02:	f240 4344 	movw	r3, #1092	; 0x444
 8002c06:	4013      	ands	r3, r2
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d107      	bne.n	8002c1c <HAL_TIM_Base_Stop_IT+0x48>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f022 0201 	bic.w	r2, r2, #1
 8002c1a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	370c      	adds	r7, #12
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bc80      	pop	{r7}
 8002c26:	4770      	bx	lr

08002c28 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d101      	bne.n	8002c3a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e01d      	b.n	8002c76 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d106      	bne.n	8002c54 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f000 f815 	bl	8002c7e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2202      	movs	r2, #2
 8002c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	3304      	adds	r3, #4
 8002c64:	4619      	mov	r1, r3
 8002c66:	4610      	mov	r0, r2
 8002c68:	f000 fb3a 	bl	80032e0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3708      	adds	r7, #8
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002c7e:	b480      	push	{r7}
 8002c80:	b083      	sub	sp, #12
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002c86:	bf00      	nop
 8002c88:	370c      	adds	r7, #12
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bc80      	pop	{r7}
 8002c8e:	4770      	bx	lr

08002c90 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	6839      	ldr	r1, [r7, #0]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f000 fd9c 	bl	80037e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a10      	ldr	r2, [pc, #64]	; (8002cf0 <HAL_TIM_PWM_Start+0x60>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d107      	bne.n	8002cc2 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cc0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f003 0307 	and.w	r3, r3, #7
 8002ccc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2b06      	cmp	r3, #6
 8002cd2:	d007      	beq.n	8002ce4 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f042 0201 	orr.w	r2, r2, #1
 8002ce2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3710      	adds	r7, #16
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	40012c00 	.word	0x40012c00

08002cf4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2200      	movs	r2, #0
 8002d04:	6839      	ldr	r1, [r7, #0]
 8002d06:	4618      	mov	r0, r3
 8002d08:	f000 fd6a 	bl	80037e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a1d      	ldr	r2, [pc, #116]	; (8002d88 <HAL_TIM_PWM_Stop+0x94>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d117      	bne.n	8002d46 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	6a1a      	ldr	r2, [r3, #32]
 8002d1c:	f241 1311 	movw	r3, #4369	; 0x1111
 8002d20:	4013      	ands	r3, r2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d10f      	bne.n	8002d46 <HAL_TIM_PWM_Stop+0x52>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	6a1a      	ldr	r2, [r3, #32]
 8002d2c:	f240 4344 	movw	r3, #1092	; 0x444
 8002d30:	4013      	ands	r3, r2
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d107      	bne.n	8002d46 <HAL_TIM_PWM_Stop+0x52>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d44:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	6a1a      	ldr	r2, [r3, #32]
 8002d4c:	f241 1311 	movw	r3, #4369	; 0x1111
 8002d50:	4013      	ands	r3, r2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d10f      	bne.n	8002d76 <HAL_TIM_PWM_Stop+0x82>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	6a1a      	ldr	r2, [r3, #32]
 8002d5c:	f240 4344 	movw	r3, #1092	; 0x444
 8002d60:	4013      	ands	r3, r2
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d107      	bne.n	8002d76 <HAL_TIM_PWM_Stop+0x82>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f022 0201 	bic.w	r2, r2, #1
 8002d74:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002d7e:	2300      	movs	r3, #0
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3708      	adds	r7, #8
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	40012c00 	.word	0x40012c00

08002d8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d122      	bne.n	8002de8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	f003 0302 	and.w	r3, r3, #2
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d11b      	bne.n	8002de8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f06f 0202 	mvn.w	r2, #2
 8002db8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	699b      	ldr	r3, [r3, #24]
 8002dc6:	f003 0303 	and.w	r3, r3, #3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d003      	beq.n	8002dd6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f000 fa6a 	bl	80032a8 <HAL_TIM_IC_CaptureCallback>
 8002dd4:	e005      	b.n	8002de2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 fa5d 	bl	8003296 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f000 fa6c 	bl	80032ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	f003 0304 	and.w	r3, r3, #4
 8002df2:	2b04      	cmp	r3, #4
 8002df4:	d122      	bne.n	8002e3c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	f003 0304 	and.w	r3, r3, #4
 8002e00:	2b04      	cmp	r3, #4
 8002e02:	d11b      	bne.n	8002e3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f06f 0204 	mvn.w	r2, #4
 8002e0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2202      	movs	r2, #2
 8002e12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	699b      	ldr	r3, [r3, #24]
 8002e1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d003      	beq.n	8002e2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f000 fa40 	bl	80032a8 <HAL_TIM_IC_CaptureCallback>
 8002e28:	e005      	b.n	8002e36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f000 fa33 	bl	8003296 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f000 fa42 	bl	80032ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	f003 0308 	and.w	r3, r3, #8
 8002e46:	2b08      	cmp	r3, #8
 8002e48:	d122      	bne.n	8002e90 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	f003 0308 	and.w	r3, r3, #8
 8002e54:	2b08      	cmp	r3, #8
 8002e56:	d11b      	bne.n	8002e90 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f06f 0208 	mvn.w	r2, #8
 8002e60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2204      	movs	r2, #4
 8002e66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	69db      	ldr	r3, [r3, #28]
 8002e6e:	f003 0303 	and.w	r3, r3, #3
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d003      	beq.n	8002e7e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 fa16 	bl	80032a8 <HAL_TIM_IC_CaptureCallback>
 8002e7c:	e005      	b.n	8002e8a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f000 fa09 	bl	8003296 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f000 fa18 	bl	80032ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	f003 0310 	and.w	r3, r3, #16
 8002e9a:	2b10      	cmp	r3, #16
 8002e9c:	d122      	bne.n	8002ee4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	f003 0310 	and.w	r3, r3, #16
 8002ea8:	2b10      	cmp	r3, #16
 8002eaa:	d11b      	bne.n	8002ee4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f06f 0210 	mvn.w	r2, #16
 8002eb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2208      	movs	r2, #8
 8002eba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	69db      	ldr	r3, [r3, #28]
 8002ec2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d003      	beq.n	8002ed2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f000 f9ec 	bl	80032a8 <HAL_TIM_IC_CaptureCallback>
 8002ed0:	e005      	b.n	8002ede <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f000 f9df 	bl	8003296 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f000 f9ee 	bl	80032ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	f003 0301 	and.w	r3, r3, #1
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d10e      	bne.n	8002f10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	f003 0301 	and.w	r3, r3, #1
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d107      	bne.n	8002f10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f06f 0201 	mvn.w	r2, #1
 8002f08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f7fe f92c 	bl	8001168 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f1a:	2b80      	cmp	r3, #128	; 0x80
 8002f1c:	d10e      	bne.n	8002f3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f28:	2b80      	cmp	r3, #128	; 0x80
 8002f2a:	d107      	bne.n	8002f3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f000 fd14 	bl	8003964 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f46:	2b40      	cmp	r3, #64	; 0x40
 8002f48:	d10e      	bne.n	8002f68 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f54:	2b40      	cmp	r3, #64	; 0x40
 8002f56:	d107      	bne.n	8002f68 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 f9b2 	bl	80032cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	f003 0320 	and.w	r3, r3, #32
 8002f72:	2b20      	cmp	r3, #32
 8002f74:	d10e      	bne.n	8002f94 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	f003 0320 	and.w	r3, r3, #32
 8002f80:	2b20      	cmp	r3, #32
 8002f82:	d107      	bne.n	8002f94 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f06f 0220 	mvn.w	r2, #32
 8002f8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f000 fcdf 	bl	8003952 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f94:	bf00      	nop
 8002f96:	3708      	adds	r7, #8
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d101      	bne.n	8002fb6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002fb2:	2302      	movs	r3, #2
 8002fb4:	e0b4      	b.n	8003120 <HAL_TIM_PWM_ConfigChannel+0x184>
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2201      	movs	r2, #1
 8002fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2202      	movs	r2, #2
 8002fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2b0c      	cmp	r3, #12
 8002fca:	f200 809f 	bhi.w	800310c <HAL_TIM_PWM_ConfigChannel+0x170>
 8002fce:	a201      	add	r2, pc, #4	; (adr r2, 8002fd4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fd4:	08003009 	.word	0x08003009
 8002fd8:	0800310d 	.word	0x0800310d
 8002fdc:	0800310d 	.word	0x0800310d
 8002fe0:	0800310d 	.word	0x0800310d
 8002fe4:	08003049 	.word	0x08003049
 8002fe8:	0800310d 	.word	0x0800310d
 8002fec:	0800310d 	.word	0x0800310d
 8002ff0:	0800310d 	.word	0x0800310d
 8002ff4:	0800308b 	.word	0x0800308b
 8002ff8:	0800310d 	.word	0x0800310d
 8002ffc:	0800310d 	.word	0x0800310d
 8003000:	0800310d 	.word	0x0800310d
 8003004:	080030cb 	.word	0x080030cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	68b9      	ldr	r1, [r7, #8]
 800300e:	4618      	mov	r0, r3
 8003010:	f000 f9c8 	bl	80033a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	699a      	ldr	r2, [r3, #24]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f042 0208 	orr.w	r2, r2, #8
 8003022:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	699a      	ldr	r2, [r3, #24]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f022 0204 	bic.w	r2, r2, #4
 8003032:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	6999      	ldr	r1, [r3, #24]
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	691a      	ldr	r2, [r3, #16]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	430a      	orrs	r2, r1
 8003044:	619a      	str	r2, [r3, #24]
      break;
 8003046:	e062      	b.n	800310e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	68b9      	ldr	r1, [r7, #8]
 800304e:	4618      	mov	r0, r3
 8003050:	f000 fa0e 	bl	8003470 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	699a      	ldr	r2, [r3, #24]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003062:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	699a      	ldr	r2, [r3, #24]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003072:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	6999      	ldr	r1, [r3, #24]
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	021a      	lsls	r2, r3, #8
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	430a      	orrs	r2, r1
 8003086:	619a      	str	r2, [r3, #24]
      break;
 8003088:	e041      	b.n	800310e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68b9      	ldr	r1, [r7, #8]
 8003090:	4618      	mov	r0, r3
 8003092:	f000 fa57 	bl	8003544 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	69da      	ldr	r2, [r3, #28]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f042 0208 	orr.w	r2, r2, #8
 80030a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	69da      	ldr	r2, [r3, #28]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f022 0204 	bic.w	r2, r2, #4
 80030b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	69d9      	ldr	r1, [r3, #28]
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	691a      	ldr	r2, [r3, #16]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	430a      	orrs	r2, r1
 80030c6:	61da      	str	r2, [r3, #28]
      break;
 80030c8:	e021      	b.n	800310e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	68b9      	ldr	r1, [r7, #8]
 80030d0:	4618      	mov	r0, r3
 80030d2:	f000 faa1 	bl	8003618 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	69da      	ldr	r2, [r3, #28]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	69da      	ldr	r2, [r3, #28]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	69d9      	ldr	r1, [r3, #28]
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	691b      	ldr	r3, [r3, #16]
 8003100:	021a      	lsls	r2, r3, #8
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	430a      	orrs	r2, r1
 8003108:	61da      	str	r2, [r3, #28]
      break;
 800310a:	e000      	b.n	800310e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800310c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2201      	movs	r2, #1
 8003112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800311e:	2300      	movs	r3, #0
}
 8003120:	4618      	mov	r0, r3
 8003122:	3710      	adds	r7, #16
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003138:	2b01      	cmp	r3, #1
 800313a:	d101      	bne.n	8003140 <HAL_TIM_ConfigClockSource+0x18>
 800313c:	2302      	movs	r3, #2
 800313e:	e0a6      	b.n	800328e <HAL_TIM_ConfigClockSource+0x166>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2202      	movs	r2, #2
 800314c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800315e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003166:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	68fa      	ldr	r2, [r7, #12]
 800316e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2b40      	cmp	r3, #64	; 0x40
 8003176:	d067      	beq.n	8003248 <HAL_TIM_ConfigClockSource+0x120>
 8003178:	2b40      	cmp	r3, #64	; 0x40
 800317a:	d80b      	bhi.n	8003194 <HAL_TIM_ConfigClockSource+0x6c>
 800317c:	2b10      	cmp	r3, #16
 800317e:	d073      	beq.n	8003268 <HAL_TIM_ConfigClockSource+0x140>
 8003180:	2b10      	cmp	r3, #16
 8003182:	d802      	bhi.n	800318a <HAL_TIM_ConfigClockSource+0x62>
 8003184:	2b00      	cmp	r3, #0
 8003186:	d06f      	beq.n	8003268 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003188:	e078      	b.n	800327c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800318a:	2b20      	cmp	r3, #32
 800318c:	d06c      	beq.n	8003268 <HAL_TIM_ConfigClockSource+0x140>
 800318e:	2b30      	cmp	r3, #48	; 0x30
 8003190:	d06a      	beq.n	8003268 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003192:	e073      	b.n	800327c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003194:	2b70      	cmp	r3, #112	; 0x70
 8003196:	d00d      	beq.n	80031b4 <HAL_TIM_ConfigClockSource+0x8c>
 8003198:	2b70      	cmp	r3, #112	; 0x70
 800319a:	d804      	bhi.n	80031a6 <HAL_TIM_ConfigClockSource+0x7e>
 800319c:	2b50      	cmp	r3, #80	; 0x50
 800319e:	d033      	beq.n	8003208 <HAL_TIM_ConfigClockSource+0xe0>
 80031a0:	2b60      	cmp	r3, #96	; 0x60
 80031a2:	d041      	beq.n	8003228 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80031a4:	e06a      	b.n	800327c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80031a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031aa:	d066      	beq.n	800327a <HAL_TIM_ConfigClockSource+0x152>
 80031ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031b0:	d017      	beq.n	80031e2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80031b2:	e063      	b.n	800327c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6818      	ldr	r0, [r3, #0]
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	6899      	ldr	r1, [r3, #8]
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	685a      	ldr	r2, [r3, #4]
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	f000 faed 	bl	80037a2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80031d6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68fa      	ldr	r2, [r7, #12]
 80031de:	609a      	str	r2, [r3, #8]
      break;
 80031e0:	e04c      	b.n	800327c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6818      	ldr	r0, [r3, #0]
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	6899      	ldr	r1, [r3, #8]
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	685a      	ldr	r2, [r3, #4]
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	f000 fad6 	bl	80037a2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	689a      	ldr	r2, [r3, #8]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003204:	609a      	str	r2, [r3, #8]
      break;
 8003206:	e039      	b.n	800327c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6818      	ldr	r0, [r3, #0]
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	6859      	ldr	r1, [r3, #4]
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	461a      	mov	r2, r3
 8003216:	f000 fa4d 	bl	80036b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2150      	movs	r1, #80	; 0x50
 8003220:	4618      	mov	r0, r3
 8003222:	f000 faa4 	bl	800376e <TIM_ITRx_SetConfig>
      break;
 8003226:	e029      	b.n	800327c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6818      	ldr	r0, [r3, #0]
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	6859      	ldr	r1, [r3, #4]
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	461a      	mov	r2, r3
 8003236:	f000 fa6b 	bl	8003710 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	2160      	movs	r1, #96	; 0x60
 8003240:	4618      	mov	r0, r3
 8003242:	f000 fa94 	bl	800376e <TIM_ITRx_SetConfig>
      break;
 8003246:	e019      	b.n	800327c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6818      	ldr	r0, [r3, #0]
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	6859      	ldr	r1, [r3, #4]
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	461a      	mov	r2, r3
 8003256:	f000 fa2d 	bl	80036b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2140      	movs	r1, #64	; 0x40
 8003260:	4618      	mov	r0, r3
 8003262:	f000 fa84 	bl	800376e <TIM_ITRx_SetConfig>
      break;
 8003266:	e009      	b.n	800327c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4619      	mov	r1, r3
 8003272:	4610      	mov	r0, r2
 8003274:	f000 fa7b 	bl	800376e <TIM_ITRx_SetConfig>
      break;
 8003278:	e000      	b.n	800327c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800327a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	3710      	adds	r7, #16
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}

08003296 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003296:	b480      	push	{r7}
 8003298:	b083      	sub	sp, #12
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800329e:	bf00      	nop
 80032a0:	370c      	adds	r7, #12
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bc80      	pop	{r7}
 80032a6:	4770      	bx	lr

080032a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80032b0:	bf00      	nop
 80032b2:	370c      	adds	r7, #12
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bc80      	pop	{r7}
 80032b8:	4770      	bx	lr

080032ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80032ba:	b480      	push	{r7}
 80032bc:	b083      	sub	sp, #12
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80032c2:	bf00      	nop
 80032c4:	370c      	adds	r7, #12
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bc80      	pop	{r7}
 80032ca:	4770      	bx	lr

080032cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80032d4:	bf00      	nop
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	bc80      	pop	{r7}
 80032dc:	4770      	bx	lr
	...

080032e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b085      	sub	sp, #20
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4a29      	ldr	r2, [pc, #164]	; (8003398 <TIM_Base_SetConfig+0xb8>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d00b      	beq.n	8003310 <TIM_Base_SetConfig+0x30>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032fe:	d007      	beq.n	8003310 <TIM_Base_SetConfig+0x30>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	4a26      	ldr	r2, [pc, #152]	; (800339c <TIM_Base_SetConfig+0xbc>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d003      	beq.n	8003310 <TIM_Base_SetConfig+0x30>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4a25      	ldr	r2, [pc, #148]	; (80033a0 <TIM_Base_SetConfig+0xc0>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d108      	bne.n	8003322 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003316:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	68fa      	ldr	r2, [r7, #12]
 800331e:	4313      	orrs	r3, r2
 8003320:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a1c      	ldr	r2, [pc, #112]	; (8003398 <TIM_Base_SetConfig+0xb8>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d00b      	beq.n	8003342 <TIM_Base_SetConfig+0x62>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003330:	d007      	beq.n	8003342 <TIM_Base_SetConfig+0x62>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a19      	ldr	r2, [pc, #100]	; (800339c <TIM_Base_SetConfig+0xbc>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d003      	beq.n	8003342 <TIM_Base_SetConfig+0x62>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a18      	ldr	r2, [pc, #96]	; (80033a0 <TIM_Base_SetConfig+0xc0>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d108      	bne.n	8003354 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003348:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	68fa      	ldr	r2, [r7, #12]
 8003350:	4313      	orrs	r3, r2
 8003352:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	695b      	ldr	r3, [r3, #20]
 800335e:	4313      	orrs	r3, r2
 8003360:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	68fa      	ldr	r2, [r7, #12]
 8003366:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	689a      	ldr	r2, [r3, #8]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a07      	ldr	r2, [pc, #28]	; (8003398 <TIM_Base_SetConfig+0xb8>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d103      	bne.n	8003388 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	691a      	ldr	r2, [r3, #16]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	615a      	str	r2, [r3, #20]
}
 800338e:	bf00      	nop
 8003390:	3714      	adds	r7, #20
 8003392:	46bd      	mov	sp, r7
 8003394:	bc80      	pop	{r7}
 8003396:	4770      	bx	lr
 8003398:	40012c00 	.word	0x40012c00
 800339c:	40000400 	.word	0x40000400
 80033a0:	40000800 	.word	0x40000800

080033a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b087      	sub	sp, #28
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a1b      	ldr	r3, [r3, #32]
 80033b2:	f023 0201 	bic.w	r2, r3, #1
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a1b      	ldr	r3, [r3, #32]
 80033be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	699b      	ldr	r3, [r3, #24]
 80033ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f023 0303 	bic.w	r3, r3, #3
 80033da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	68fa      	ldr	r2, [r7, #12]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	f023 0302 	bic.w	r3, r3, #2
 80033ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	697a      	ldr	r2, [r7, #20]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	4a1c      	ldr	r2, [pc, #112]	; (800346c <TIM_OC1_SetConfig+0xc8>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d10c      	bne.n	800341a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	f023 0308 	bic.w	r3, r3, #8
 8003406:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	697a      	ldr	r2, [r7, #20]
 800340e:	4313      	orrs	r3, r2
 8003410:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	f023 0304 	bic.w	r3, r3, #4
 8003418:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a13      	ldr	r2, [pc, #76]	; (800346c <TIM_OC1_SetConfig+0xc8>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d111      	bne.n	8003446 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003428:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003430:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	693a      	ldr	r2, [r7, #16]
 8003438:	4313      	orrs	r3, r2
 800343a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	699b      	ldr	r3, [r3, #24]
 8003440:	693a      	ldr	r2, [r7, #16]
 8003442:	4313      	orrs	r3, r2
 8003444:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	693a      	ldr	r2, [r7, #16]
 800344a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	68fa      	ldr	r2, [r7, #12]
 8003450:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	685a      	ldr	r2, [r3, #4]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	697a      	ldr	r2, [r7, #20]
 800345e:	621a      	str	r2, [r3, #32]
}
 8003460:	bf00      	nop
 8003462:	371c      	adds	r7, #28
 8003464:	46bd      	mov	sp, r7
 8003466:	bc80      	pop	{r7}
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	40012c00 	.word	0x40012c00

08003470 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003470:	b480      	push	{r7}
 8003472:	b087      	sub	sp, #28
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a1b      	ldr	r3, [r3, #32]
 800347e:	f023 0210 	bic.w	r2, r3, #16
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a1b      	ldr	r3, [r3, #32]
 800348a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	699b      	ldr	r3, [r3, #24]
 8003496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800349e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	021b      	lsls	r3, r3, #8
 80034ae:	68fa      	ldr	r2, [r7, #12]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	f023 0320 	bic.w	r3, r3, #32
 80034ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	011b      	lsls	r3, r3, #4
 80034c2:	697a      	ldr	r2, [r7, #20]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	4a1d      	ldr	r2, [pc, #116]	; (8003540 <TIM_OC2_SetConfig+0xd0>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d10d      	bne.n	80034ec <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	011b      	lsls	r3, r3, #4
 80034de:	697a      	ldr	r2, [r7, #20]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	4a14      	ldr	r2, [pc, #80]	; (8003540 <TIM_OC2_SetConfig+0xd0>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d113      	bne.n	800351c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003502:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	695b      	ldr	r3, [r3, #20]
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	693a      	ldr	r2, [r7, #16]
 800350c:	4313      	orrs	r3, r2
 800350e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	699b      	ldr	r3, [r3, #24]
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	693a      	ldr	r2, [r7, #16]
 8003518:	4313      	orrs	r3, r2
 800351a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	693a      	ldr	r2, [r7, #16]
 8003520:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	68fa      	ldr	r2, [r7, #12]
 8003526:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	685a      	ldr	r2, [r3, #4]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	697a      	ldr	r2, [r7, #20]
 8003534:	621a      	str	r2, [r3, #32]
}
 8003536:	bf00      	nop
 8003538:	371c      	adds	r7, #28
 800353a:	46bd      	mov	sp, r7
 800353c:	bc80      	pop	{r7}
 800353e:	4770      	bx	lr
 8003540:	40012c00 	.word	0x40012c00

08003544 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003544:	b480      	push	{r7}
 8003546:	b087      	sub	sp, #28
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a1b      	ldr	r3, [r3, #32]
 8003552:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a1b      	ldr	r3, [r3, #32]
 800355e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	69db      	ldr	r3, [r3, #28]
 800356a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003572:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f023 0303 	bic.w	r3, r3, #3
 800357a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	68fa      	ldr	r2, [r7, #12]
 8003582:	4313      	orrs	r3, r2
 8003584:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800358c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	021b      	lsls	r3, r3, #8
 8003594:	697a      	ldr	r2, [r7, #20]
 8003596:	4313      	orrs	r3, r2
 8003598:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a1d      	ldr	r2, [pc, #116]	; (8003614 <TIM_OC3_SetConfig+0xd0>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d10d      	bne.n	80035be <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80035a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	021b      	lsls	r3, r3, #8
 80035b0:	697a      	ldr	r2, [r7, #20]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80035bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a14      	ldr	r2, [pc, #80]	; (8003614 <TIM_OC3_SetConfig+0xd0>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d113      	bne.n	80035ee <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80035cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80035d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	695b      	ldr	r3, [r3, #20]
 80035da:	011b      	lsls	r3, r3, #4
 80035dc:	693a      	ldr	r2, [r7, #16]
 80035de:	4313      	orrs	r3, r2
 80035e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	699b      	ldr	r3, [r3, #24]
 80035e6:	011b      	lsls	r3, r3, #4
 80035e8:	693a      	ldr	r2, [r7, #16]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	693a      	ldr	r2, [r7, #16]
 80035f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	68fa      	ldr	r2, [r7, #12]
 80035f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	685a      	ldr	r2, [r3, #4]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	697a      	ldr	r2, [r7, #20]
 8003606:	621a      	str	r2, [r3, #32]
}
 8003608:	bf00      	nop
 800360a:	371c      	adds	r7, #28
 800360c:	46bd      	mov	sp, r7
 800360e:	bc80      	pop	{r7}
 8003610:	4770      	bx	lr
 8003612:	bf00      	nop
 8003614:	40012c00 	.word	0x40012c00

08003618 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003618:	b480      	push	{r7}
 800361a:	b087      	sub	sp, #28
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a1b      	ldr	r3, [r3, #32]
 8003626:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a1b      	ldr	r3, [r3, #32]
 8003632:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	69db      	ldr	r3, [r3, #28]
 800363e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003646:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800364e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	021b      	lsls	r3, r3, #8
 8003656:	68fa      	ldr	r2, [r7, #12]
 8003658:	4313      	orrs	r3, r2
 800365a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003662:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	031b      	lsls	r3, r3, #12
 800366a:	693a      	ldr	r2, [r7, #16]
 800366c:	4313      	orrs	r3, r2
 800366e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4a0f      	ldr	r2, [pc, #60]	; (80036b0 <TIM_OC4_SetConfig+0x98>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d109      	bne.n	800368c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800367e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	695b      	ldr	r3, [r3, #20]
 8003684:	019b      	lsls	r3, r3, #6
 8003686:	697a      	ldr	r2, [r7, #20]
 8003688:	4313      	orrs	r3, r2
 800368a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	697a      	ldr	r2, [r7, #20]
 8003690:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	68fa      	ldr	r2, [r7, #12]
 8003696:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	685a      	ldr	r2, [r3, #4]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	693a      	ldr	r2, [r7, #16]
 80036a4:	621a      	str	r2, [r3, #32]
}
 80036a6:	bf00      	nop
 80036a8:	371c      	adds	r7, #28
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bc80      	pop	{r7}
 80036ae:	4770      	bx	lr
 80036b0:	40012c00 	.word	0x40012c00

080036b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b087      	sub	sp, #28
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	60b9      	str	r1, [r7, #8]
 80036be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6a1b      	ldr	r3, [r3, #32]
 80036c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6a1b      	ldr	r3, [r3, #32]
 80036ca:	f023 0201 	bic.w	r2, r3, #1
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	699b      	ldr	r3, [r3, #24]
 80036d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	011b      	lsls	r3, r3, #4
 80036e4:	693a      	ldr	r2, [r7, #16]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	f023 030a 	bic.w	r3, r3, #10
 80036f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80036f2:	697a      	ldr	r2, [r7, #20]
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	693a      	ldr	r2, [r7, #16]
 80036fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	697a      	ldr	r2, [r7, #20]
 8003704:	621a      	str	r2, [r3, #32]
}
 8003706:	bf00      	nop
 8003708:	371c      	adds	r7, #28
 800370a:	46bd      	mov	sp, r7
 800370c:	bc80      	pop	{r7}
 800370e:	4770      	bx	lr

08003710 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003710:	b480      	push	{r7}
 8003712:	b087      	sub	sp, #28
 8003714:	af00      	add	r7, sp, #0
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6a1b      	ldr	r3, [r3, #32]
 8003720:	f023 0210 	bic.w	r2, r3, #16
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	699b      	ldr	r3, [r3, #24]
 800372c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6a1b      	ldr	r3, [r3, #32]
 8003732:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800373a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	031b      	lsls	r3, r3, #12
 8003740:	697a      	ldr	r2, [r7, #20]
 8003742:	4313      	orrs	r3, r2
 8003744:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800374c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	011b      	lsls	r3, r3, #4
 8003752:	693a      	ldr	r2, [r7, #16]
 8003754:	4313      	orrs	r3, r2
 8003756:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	697a      	ldr	r2, [r7, #20]
 800375c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	693a      	ldr	r2, [r7, #16]
 8003762:	621a      	str	r2, [r3, #32]
}
 8003764:	bf00      	nop
 8003766:	371c      	adds	r7, #28
 8003768:	46bd      	mov	sp, r7
 800376a:	bc80      	pop	{r7}
 800376c:	4770      	bx	lr

0800376e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800376e:	b480      	push	{r7}
 8003770:	b085      	sub	sp, #20
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
 8003776:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003784:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003786:	683a      	ldr	r2, [r7, #0]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	4313      	orrs	r3, r2
 800378c:	f043 0307 	orr.w	r3, r3, #7
 8003790:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	68fa      	ldr	r2, [r7, #12]
 8003796:	609a      	str	r2, [r3, #8]
}
 8003798:	bf00      	nop
 800379a:	3714      	adds	r7, #20
 800379c:	46bd      	mov	sp, r7
 800379e:	bc80      	pop	{r7}
 80037a0:	4770      	bx	lr

080037a2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80037a2:	b480      	push	{r7}
 80037a4:	b087      	sub	sp, #28
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	60f8      	str	r0, [r7, #12]
 80037aa:	60b9      	str	r1, [r7, #8]
 80037ac:	607a      	str	r2, [r7, #4]
 80037ae:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037bc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	021a      	lsls	r2, r3, #8
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	431a      	orrs	r2, r3
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	697a      	ldr	r2, [r7, #20]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	697a      	ldr	r2, [r7, #20]
 80037d4:	609a      	str	r2, [r3, #8]
}
 80037d6:	bf00      	nop
 80037d8:	371c      	adds	r7, #28
 80037da:	46bd      	mov	sp, r7
 80037dc:	bc80      	pop	{r7}
 80037de:	4770      	bx	lr

080037e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b087      	sub	sp, #28
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	60b9      	str	r1, [r7, #8]
 80037ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	f003 031f 	and.w	r3, r3, #31
 80037f2:	2201      	movs	r2, #1
 80037f4:	fa02 f303 	lsl.w	r3, r2, r3
 80037f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6a1a      	ldr	r2, [r3, #32]
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	43db      	mvns	r3, r3
 8003802:	401a      	ands	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6a1a      	ldr	r2, [r3, #32]
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	f003 031f 	and.w	r3, r3, #31
 8003812:	6879      	ldr	r1, [r7, #4]
 8003814:	fa01 f303 	lsl.w	r3, r1, r3
 8003818:	431a      	orrs	r2, r3
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	621a      	str	r2, [r3, #32]
}
 800381e:	bf00      	nop
 8003820:	371c      	adds	r7, #28
 8003822:	46bd      	mov	sp, r7
 8003824:	bc80      	pop	{r7}
 8003826:	4770      	bx	lr

08003828 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003828:	b480      	push	{r7}
 800382a:	b085      	sub	sp, #20
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003838:	2b01      	cmp	r3, #1
 800383a:	d101      	bne.n	8003840 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800383c:	2302      	movs	r3, #2
 800383e:	e032      	b.n	80038a6 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2202      	movs	r2, #2
 800384c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003866:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68fa      	ldr	r2, [r7, #12]
 800386e:	4313      	orrs	r3, r2
 8003870:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003878:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	68ba      	ldr	r2, [r7, #8]
 8003880:	4313      	orrs	r3, r2
 8003882:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	68fa      	ldr	r2, [r7, #12]
 800388a:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	68ba      	ldr	r2, [r7, #8]
 8003892:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3714      	adds	r7, #20
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bc80      	pop	{r7}
 80038ae:	4770      	bx	lr

080038b0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b085      	sub	sp, #20
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80038ba:	2300      	movs	r3, #0
 80038bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d101      	bne.n	80038cc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80038c8:	2302      	movs	r3, #2
 80038ca:	e03d      	b.n	8003948 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	4313      	orrs	r3, r2
 80038e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4313      	orrs	r3, r2
 800390a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	4313      	orrs	r3, r2
 8003918:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	695b      	ldr	r3, [r3, #20]
 8003924:	4313      	orrs	r3, r2
 8003926:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	69db      	ldr	r3, [r3, #28]
 8003932:	4313      	orrs	r3, r2
 8003934:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	68fa      	ldr	r2, [r7, #12]
 800393c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003946:	2300      	movs	r3, #0
}
 8003948:	4618      	mov	r0, r3
 800394a:	3714      	adds	r7, #20
 800394c:	46bd      	mov	sp, r7
 800394e:	bc80      	pop	{r7}
 8003950:	4770      	bx	lr

08003952 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003952:	b480      	push	{r7}
 8003954:	b083      	sub	sp, #12
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800395a:	bf00      	nop
 800395c:	370c      	adds	r7, #12
 800395e:	46bd      	mov	sp, r7
 8003960:	bc80      	pop	{r7}
 8003962:	4770      	bx	lr

08003964 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800396c:	bf00      	nop
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	bc80      	pop	{r7}
 8003974:	4770      	bx	lr

08003976 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003976:	b580      	push	{r7, lr}
 8003978:	b082      	sub	sp, #8
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d101      	bne.n	8003988 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e03f      	b.n	8003a08 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800398e:	b2db      	uxtb	r3, r3
 8003990:	2b00      	cmp	r3, #0
 8003992:	d106      	bne.n	80039a2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f7fd fce5 	bl	800136c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2224      	movs	r2, #36	; 0x24
 80039a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	68da      	ldr	r2, [r3, #12]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039b8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 fc2c 	bl	8004218 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	691a      	ldr	r2, [r3, #16]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039ce:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	695a      	ldr	r2, [r3, #20]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039de:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68da      	ldr	r2, [r3, #12]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039ee:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2220      	movs	r2, #32
 80039fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2220      	movs	r2, #32
 8003a02:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003a06:	2300      	movs	r3, #0
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3708      	adds	r7, #8
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b086      	sub	sp, #24
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	60b9      	str	r1, [r7, #8]
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	2b20      	cmp	r3, #32
 8003a28:	d153      	bne.n	8003ad2 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d002      	beq.n	8003a36 <HAL_UART_Transmit_DMA+0x26>
 8003a30:	88fb      	ldrh	r3, [r7, #6]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d101      	bne.n	8003a3a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e04c      	b.n	8003ad4 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d101      	bne.n	8003a48 <HAL_UART_Transmit_DMA+0x38>
 8003a44:	2302      	movs	r3, #2
 8003a46:	e045      	b.n	8003ad4 <HAL_UART_Transmit_DMA+0xc4>
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8003a50:	68ba      	ldr	r2, [r7, #8]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	88fa      	ldrh	r2, [r7, #6]
 8003a5a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	88fa      	ldrh	r2, [r7, #6]
 8003a60:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2200      	movs	r2, #0
 8003a66:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2221      	movs	r2, #33	; 0x21
 8003a6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a74:	4a19      	ldr	r2, [pc, #100]	; (8003adc <HAL_UART_Transmit_DMA+0xcc>)
 8003a76:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7c:	4a18      	ldr	r2, [pc, #96]	; (8003ae0 <HAL_UART_Transmit_DMA+0xd0>)
 8003a7e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a84:	4a17      	ldr	r2, [pc, #92]	; (8003ae4 <HAL_UART_Transmit_DMA+0xd4>)
 8003a86:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8003a90:	f107 0308 	add.w	r3, r7, #8
 8003a94:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	6819      	ldr	r1, [r3, #0]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	3304      	adds	r3, #4
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	88fb      	ldrh	r3, [r7, #6]
 8003aa8:	f7fe f8ae 	bl	8001c08 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ab4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	695a      	ldr	r2, [r3, #20]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003acc:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	e000      	b.n	8003ad4 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8003ad2:	2302      	movs	r3, #2
  }
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3718      	adds	r7, #24
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	08003e29 	.word	0x08003e29
 8003ae0:	08003e7b 	.word	0x08003e7b
 8003ae4:	08003f1b 	.word	0x08003f1b

08003ae8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b086      	sub	sp, #24
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	4613      	mov	r3, r2
 8003af4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	2b20      	cmp	r3, #32
 8003b00:	d166      	bne.n	8003bd0 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d002      	beq.n	8003b0e <HAL_UART_Receive_DMA+0x26>
 8003b08:	88fb      	ldrh	r3, [r7, #6]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d101      	bne.n	8003b12 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e05f      	b.n	8003bd2 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d101      	bne.n	8003b20 <HAL_UART_Receive_DMA+0x38>
 8003b1c:	2302      	movs	r3, #2
 8003b1e:	e058      	b.n	8003bd2 <HAL_UART_Receive_DMA+0xea>
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003b28:	68ba      	ldr	r2, [r7, #8]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	88fa      	ldrh	r2, [r7, #6]
 8003b32:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2200      	movs	r2, #0
 8003b38:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2222      	movs	r2, #34	; 0x22
 8003b3e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b46:	4a25      	ldr	r2, [pc, #148]	; (8003bdc <HAL_UART_Receive_DMA+0xf4>)
 8003b48:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b4e:	4a24      	ldr	r2, [pc, #144]	; (8003be0 <HAL_UART_Receive_DMA+0xf8>)
 8003b50:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b56:	4a23      	ldr	r2, [pc, #140]	; (8003be4 <HAL_UART_Receive_DMA+0xfc>)
 8003b58:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b5e:	2200      	movs	r2, #0
 8003b60:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 8003b62:	f107 0308 	add.w	r3, r7, #8
 8003b66:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	3304      	adds	r3, #4
 8003b72:	4619      	mov	r1, r3
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	88fb      	ldrh	r3, [r7, #6]
 8003b7a:	f7fe f845 	bl	8001c08 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8003b7e:	2300      	movs	r3, #0
 8003b80:	613b      	str	r3, [r7, #16]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	613b      	str	r3, [r7, #16]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	613b      	str	r3, [r7, #16]
 8003b92:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68da      	ldr	r2, [r3, #12]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003baa:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	695a      	ldr	r2, [r3, #20]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f042 0201 	orr.w	r2, r2, #1
 8003bba:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	695a      	ldr	r2, [r3, #20]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bca:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	e000      	b.n	8003bd2 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8003bd0:	2302      	movs	r3, #2
  }
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3718      	adds	r7, #24
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	08003e97 	.word	0x08003e97
 8003be0:	08003eff 	.word	0x08003eff
 8003be4:	08003f1b 	.word	0x08003f1b

08003be8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b088      	sub	sp, #32
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	695b      	ldr	r3, [r3, #20]
 8003c06:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	f003 030f 	and.w	r3, r3, #15
 8003c16:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d10d      	bne.n	8003c3a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	f003 0320 	and.w	r3, r3, #32
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d008      	beq.n	8003c3a <HAL_UART_IRQHandler+0x52>
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	f003 0320 	and.w	r3, r3, #32
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d003      	beq.n	8003c3a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 fa6e 	bl	8004114 <UART_Receive_IT>
      return;
 8003c38:	e0cc      	b.n	8003dd4 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	f000 80ab 	beq.w	8003d98 <HAL_UART_IRQHandler+0x1b0>
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	f003 0301 	and.w	r3, r3, #1
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d105      	bne.n	8003c58 <HAL_UART_IRQHandler+0x70>
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	f000 80a0 	beq.w	8003d98 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	f003 0301 	and.w	r3, r3, #1
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d00a      	beq.n	8003c78 <HAL_UART_IRQHandler+0x90>
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d005      	beq.n	8003c78 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c70:	f043 0201 	orr.w	r2, r3, #1
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	f003 0304 	and.w	r3, r3, #4
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d00a      	beq.n	8003c98 <HAL_UART_IRQHandler+0xb0>
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	f003 0301 	and.w	r3, r3, #1
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d005      	beq.n	8003c98 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c90:	f043 0202 	orr.w	r2, r3, #2
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	f003 0302 	and.w	r3, r3, #2
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00a      	beq.n	8003cb8 <HAL_UART_IRQHandler+0xd0>
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	f003 0301 	and.w	r3, r3, #1
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d005      	beq.n	8003cb8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cb0:	f043 0204 	orr.w	r2, r3, #4
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	f003 0308 	and.w	r3, r3, #8
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d00a      	beq.n	8003cd8 <HAL_UART_IRQHandler+0xf0>
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	f003 0301 	and.w	r3, r3, #1
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d005      	beq.n	8003cd8 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cd0:	f043 0208 	orr.w	r2, r3, #8
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d078      	beq.n	8003dd2 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	f003 0320 	and.w	r3, r3, #32
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d007      	beq.n	8003cfa <HAL_UART_IRQHandler+0x112>
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	f003 0320 	and.w	r3, r3, #32
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d002      	beq.n	8003cfa <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f000 fa0d 	bl	8004114 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	695b      	ldr	r3, [r3, #20]
 8003d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	bf14      	ite	ne
 8003d08:	2301      	movne	r3, #1
 8003d0a:	2300      	moveq	r3, #0
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d14:	f003 0308 	and.w	r3, r3, #8
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d102      	bne.n	8003d22 <HAL_UART_IRQHandler+0x13a>
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d031      	beq.n	8003d86 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 f958 	bl	8003fd8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	695b      	ldr	r3, [r3, #20]
 8003d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d023      	beq.n	8003d7e <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	695a      	ldr	r2, [r3, #20]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d44:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d013      	beq.n	8003d76 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d52:	4a22      	ldr	r2, [pc, #136]	; (8003ddc <HAL_UART_IRQHandler+0x1f4>)
 8003d54:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f7fd ffb4 	bl	8001cc8 <HAL_DMA_Abort_IT>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d016      	beq.n	8003d94 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003d70:	4610      	mov	r0, r2
 8003d72:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d74:	e00e      	b.n	8003d94 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 f84d 	bl	8003e16 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d7c:	e00a      	b.n	8003d94 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f000 f849 	bl	8003e16 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d84:	e006      	b.n	8003d94 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f000 f845 	bl	8003e16 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003d92:	e01e      	b.n	8003dd2 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d94:	bf00      	nop
    return;
 8003d96:	e01c      	b.n	8003dd2 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d008      	beq.n	8003db4 <HAL_UART_IRQHandler+0x1cc>
 8003da2:	69bb      	ldr	r3, [r7, #24]
 8003da4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d003      	beq.n	8003db4 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f000 f944 	bl	800403a <UART_Transmit_IT>
    return;
 8003db2:	e00f      	b.n	8003dd4 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d00a      	beq.n	8003dd4 <HAL_UART_IRQHandler+0x1ec>
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d005      	beq.n	8003dd4 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f000 f98b 	bl	80040e4 <UART_EndTransmit_IT>
    return;
 8003dce:	bf00      	nop
 8003dd0:	e000      	b.n	8003dd4 <HAL_UART_IRQHandler+0x1ec>
    return;
 8003dd2:	bf00      	nop
  }
}
 8003dd4:	3720      	adds	r7, #32
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	08004013 	.word	0x08004013

08003de0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003de8:	bf00      	nop
 8003dea:	370c      	adds	r7, #12
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bc80      	pop	{r7}
 8003df0:	4770      	bx	lr

08003df2 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003df2:	b480      	push	{r7}
 8003df4:	b083      	sub	sp, #12
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003dfa:	bf00      	nop
 8003dfc:	370c      	adds	r7, #12
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bc80      	pop	{r7}
 8003e02:	4770      	bx	lr

08003e04 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003e0c:	bf00      	nop
 8003e0e:	370c      	adds	r7, #12
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bc80      	pop	{r7}
 8003e14:	4770      	bx	lr

08003e16 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e16:	b480      	push	{r7}
 8003e18:	b083      	sub	sp, #12
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003e1e:	bf00      	nop
 8003e20:	370c      	adds	r7, #12
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bc80      	pop	{r7}
 8003e26:	4770      	bx	lr

08003e28 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e34:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0320 	and.w	r3, r3, #32
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d113      	bne.n	8003e6c <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2200      	movs	r2, #0
 8003e48:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	695a      	ldr	r2, [r3, #20]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e58:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	68da      	ldr	r2, [r3, #12]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e68:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003e6a:	e002      	b.n	8003e72 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8003e6c:	68f8      	ldr	r0, [r7, #12]
 8003e6e:	f7ff ffb7 	bl	8003de0 <HAL_UART_TxCpltCallback>
}
 8003e72:	bf00      	nop
 8003e74:	3710      	adds	r7, #16
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}

08003e7a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003e7a:	b580      	push	{r7, lr}
 8003e7c:	b084      	sub	sp, #16
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e86:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003e88:	68f8      	ldr	r0, [r7, #12]
 8003e8a:	f7ff ffb2 	bl	8003df2 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e8e:	bf00      	nop
 8003e90:	3710      	adds	r7, #16
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}

08003e96 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003e96:	b580      	push	{r7, lr}
 8003e98:	b084      	sub	sp, #16
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea2:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0320 	and.w	r3, r3, #32
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d11e      	bne.n	8003ef0 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	68da      	ldr	r2, [r3, #12]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ec6:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	695a      	ldr	r2, [r3, #20]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f022 0201 	bic.w	r2, r2, #1
 8003ed6:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	695a      	ldr	r2, [r3, #20]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ee6:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2220      	movs	r2, #32
 8003eec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8003ef0:	68f8      	ldr	r0, [r7, #12]
 8003ef2:	f7fd f975 	bl	80011e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ef6:	bf00      	nop
 8003ef8:	3710      	adds	r7, #16
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}

08003efe <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003efe:	b580      	push	{r7, lr}
 8003f00:	b084      	sub	sp, #16
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8003f0c:	68f8      	ldr	r0, [r7, #12]
 8003f0e:	f7ff ff79 	bl	8003e04 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f12:	bf00      	nop
 8003f14:	3710      	adds	r7, #16
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}

08003f1a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003f1a:	b580      	push	{r7, lr}
 8003f1c:	b084      	sub	sp, #16
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003f22:	2300      	movs	r3, #0
 8003f24:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	695b      	ldr	r3, [r3, #20]
 8003f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	bf14      	ite	ne
 8003f3a:	2301      	movne	r3, #1
 8003f3c:	2300      	moveq	r3, #0
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	2b21      	cmp	r3, #33	; 0x21
 8003f4c:	d108      	bne.n	8003f60 <UART_DMAError+0x46>
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d005      	beq.n	8003f60 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	2200      	movs	r2, #0
 8003f58:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003f5a:	68b8      	ldr	r0, [r7, #8]
 8003f5c:	f000 f827 	bl	8003fae <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	695b      	ldr	r3, [r3, #20]
 8003f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	bf14      	ite	ne
 8003f6e:	2301      	movne	r3, #1
 8003f70:	2300      	moveq	r3, #0
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	2b22      	cmp	r3, #34	; 0x22
 8003f80:	d108      	bne.n	8003f94 <UART_DMAError+0x7a>
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d005      	beq.n	8003f94 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003f8e:	68b8      	ldr	r0, [r7, #8]
 8003f90:	f000 f822 	bl	8003fd8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f98:	f043 0210 	orr.w	r2, r3, #16
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003fa0:	68b8      	ldr	r0, [r7, #8]
 8003fa2:	f7ff ff38 	bl	8003e16 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003fa6:	bf00      	nop
 8003fa8:	3710      	adds	r7, #16
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}

08003fae <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003fae:	b480      	push	{r7}
 8003fb0:	b083      	sub	sp, #12
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	68da      	ldr	r2, [r3, #12]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003fc4:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2220      	movs	r2, #32
 8003fca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8003fce:	bf00      	nop
 8003fd0:	370c      	adds	r7, #12
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bc80      	pop	{r7}
 8003fd6:	4770      	bx	lr

08003fd8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	68da      	ldr	r2, [r3, #12]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003fee:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	695a      	ldr	r2, [r3, #20]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f022 0201 	bic.w	r2, r2, #1
 8003ffe:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2220      	movs	r2, #32
 8004004:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004008:	bf00      	nop
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	bc80      	pop	{r7}
 8004010:	4770      	bx	lr

08004012 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004012:	b580      	push	{r7, lr}
 8004014:	b084      	sub	sp, #16
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2200      	movs	r2, #0
 8004024:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2200      	movs	r2, #0
 800402a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800402c:	68f8      	ldr	r0, [r7, #12]
 800402e:	f7ff fef2 	bl	8003e16 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004032:	bf00      	nop
 8004034:	3710      	adds	r7, #16
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}

0800403a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800403a:	b480      	push	{r7}
 800403c:	b085      	sub	sp, #20
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004048:	b2db      	uxtb	r3, r3
 800404a:	2b21      	cmp	r3, #33	; 0x21
 800404c:	d144      	bne.n	80040d8 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004056:	d11a      	bne.n	800408e <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a1b      	ldr	r3, [r3, #32]
 800405c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	881b      	ldrh	r3, [r3, #0]
 8004062:	461a      	mov	r2, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800406c:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	691b      	ldr	r3, [r3, #16]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d105      	bne.n	8004082 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a1b      	ldr	r3, [r3, #32]
 800407a:	1c9a      	adds	r2, r3, #2
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	621a      	str	r2, [r3, #32]
 8004080:	e00e      	b.n	80040a0 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a1b      	ldr	r3, [r3, #32]
 8004086:	1c5a      	adds	r2, r3, #1
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	621a      	str	r2, [r3, #32]
 800408c:	e008      	b.n	80040a0 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a1b      	ldr	r3, [r3, #32]
 8004092:	1c59      	adds	r1, r3, #1
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	6211      	str	r1, [r2, #32]
 8004098:	781a      	ldrb	r2, [r3, #0]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	3b01      	subs	r3, #1
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	4619      	mov	r1, r3
 80040ae:	84d1      	strh	r1, [r2, #38]	; 0x26
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d10f      	bne.n	80040d4 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	68da      	ldr	r2, [r3, #12]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040c2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	68da      	ldr	r2, [r3, #12]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040d2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80040d4:	2300      	movs	r3, #0
 80040d6:	e000      	b.n	80040da <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80040d8:	2302      	movs	r3, #2
  }
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3714      	adds	r7, #20
 80040de:	46bd      	mov	sp, r7
 80040e0:	bc80      	pop	{r7}
 80040e2:	4770      	bx	lr

080040e4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b082      	sub	sp, #8
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68da      	ldr	r2, [r3, #12]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040fa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2220      	movs	r2, #32
 8004100:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f7ff fe6b 	bl	8003de0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800410a:	2300      	movs	r3, #0
}
 800410c:	4618      	mov	r0, r3
 800410e:	3708      	adds	r7, #8
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004122:	b2db      	uxtb	r3, r3
 8004124:	2b22      	cmp	r3, #34	; 0x22
 8004126:	d171      	bne.n	800420c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004130:	d123      	bne.n	800417a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004136:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d10e      	bne.n	800415e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	b29b      	uxth	r3, r3
 8004148:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800414c:	b29a      	uxth	r2, r3
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004156:	1c9a      	adds	r2, r3, #2
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	629a      	str	r2, [r3, #40]	; 0x28
 800415c:	e029      	b.n	80041b2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	b29b      	uxth	r3, r3
 8004166:	b2db      	uxtb	r3, r3
 8004168:	b29a      	uxth	r2, r3
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004172:	1c5a      	adds	r2, r3, #1
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	629a      	str	r2, [r3, #40]	; 0x28
 8004178:	e01b      	b.n	80041b2 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d10a      	bne.n	8004198 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	6858      	ldr	r0, [r3, #4]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800418c:	1c59      	adds	r1, r3, #1
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	6291      	str	r1, [r2, #40]	; 0x28
 8004192:	b2c2      	uxtb	r2, r0
 8004194:	701a      	strb	r2, [r3, #0]
 8004196:	e00c      	b.n	80041b2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	b2da      	uxtb	r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a4:	1c58      	adds	r0, r3, #1
 80041a6:	6879      	ldr	r1, [r7, #4]
 80041a8:	6288      	str	r0, [r1, #40]	; 0x28
 80041aa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80041ae:	b2d2      	uxtb	r2, r2
 80041b0:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	3b01      	subs	r3, #1
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	4619      	mov	r1, r3
 80041c0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d120      	bne.n	8004208 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	68da      	ldr	r2, [r3, #12]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f022 0220 	bic.w	r2, r2, #32
 80041d4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	68da      	ldr	r2, [r3, #12]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041e4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	695a      	ldr	r2, [r3, #20]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f022 0201 	bic.w	r2, r2, #1
 80041f4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2220      	movs	r2, #32
 80041fa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f7fc ffee 	bl	80011e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004204:	2300      	movs	r3, #0
 8004206:	e002      	b.n	800420e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004208:	2300      	movs	r3, #0
 800420a:	e000      	b.n	800420e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800420c:	2302      	movs	r3, #2
  }
}
 800420e:	4618      	mov	r0, r3
 8004210:	3710      	adds	r7, #16
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
	...

08004218 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	68da      	ldr	r2, [r3, #12]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	430a      	orrs	r2, r1
 8004234:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	689a      	ldr	r2, [r3, #8]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	691b      	ldr	r3, [r3, #16]
 800423e:	431a      	orrs	r2, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	695b      	ldr	r3, [r3, #20]
 8004244:	4313      	orrs	r3, r2
 8004246:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004252:	f023 030c 	bic.w	r3, r3, #12
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	6812      	ldr	r2, [r2, #0]
 800425a:	68f9      	ldr	r1, [r7, #12]
 800425c:	430b      	orrs	r3, r1
 800425e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	695b      	ldr	r3, [r3, #20]
 8004266:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	699a      	ldr	r2, [r3, #24]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	430a      	orrs	r2, r1
 8004274:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a52      	ldr	r2, [pc, #328]	; (80043c4 <UART_SetConfig+0x1ac>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d14e      	bne.n	800431e <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004280:	f7fe fc28 	bl	8002ad4 <HAL_RCC_GetPCLK2Freq>
 8004284:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004286:	68ba      	ldr	r2, [r7, #8]
 8004288:	4613      	mov	r3, r2
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	4413      	add	r3, r2
 800428e:	009a      	lsls	r2, r3, #2
 8004290:	441a      	add	r2, r3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	fbb2 f3f3 	udiv	r3, r2, r3
 800429c:	4a4a      	ldr	r2, [pc, #296]	; (80043c8 <UART_SetConfig+0x1b0>)
 800429e:	fba2 2303 	umull	r2, r3, r2, r3
 80042a2:	095b      	lsrs	r3, r3, #5
 80042a4:	0119      	lsls	r1, r3, #4
 80042a6:	68ba      	ldr	r2, [r7, #8]
 80042a8:	4613      	mov	r3, r2
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	4413      	add	r3, r2
 80042ae:	009a      	lsls	r2, r3, #2
 80042b0:	441a      	add	r2, r3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80042bc:	4b42      	ldr	r3, [pc, #264]	; (80043c8 <UART_SetConfig+0x1b0>)
 80042be:	fba3 0302 	umull	r0, r3, r3, r2
 80042c2:	095b      	lsrs	r3, r3, #5
 80042c4:	2064      	movs	r0, #100	; 0x64
 80042c6:	fb00 f303 	mul.w	r3, r0, r3
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	011b      	lsls	r3, r3, #4
 80042ce:	3332      	adds	r3, #50	; 0x32
 80042d0:	4a3d      	ldr	r2, [pc, #244]	; (80043c8 <UART_SetConfig+0x1b0>)
 80042d2:	fba2 2303 	umull	r2, r3, r2, r3
 80042d6:	095b      	lsrs	r3, r3, #5
 80042d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042dc:	4419      	add	r1, r3
 80042de:	68ba      	ldr	r2, [r7, #8]
 80042e0:	4613      	mov	r3, r2
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	4413      	add	r3, r2
 80042e6:	009a      	lsls	r2, r3, #2
 80042e8:	441a      	add	r2, r3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80042f4:	4b34      	ldr	r3, [pc, #208]	; (80043c8 <UART_SetConfig+0x1b0>)
 80042f6:	fba3 0302 	umull	r0, r3, r3, r2
 80042fa:	095b      	lsrs	r3, r3, #5
 80042fc:	2064      	movs	r0, #100	; 0x64
 80042fe:	fb00 f303 	mul.w	r3, r0, r3
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	011b      	lsls	r3, r3, #4
 8004306:	3332      	adds	r3, #50	; 0x32
 8004308:	4a2f      	ldr	r2, [pc, #188]	; (80043c8 <UART_SetConfig+0x1b0>)
 800430a:	fba2 2303 	umull	r2, r3, r2, r3
 800430e:	095b      	lsrs	r3, r3, #5
 8004310:	f003 020f 	and.w	r2, r3, #15
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	440a      	add	r2, r1
 800431a:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 800431c:	e04d      	b.n	80043ba <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 800431e:	f7fe fbc5 	bl	8002aac <HAL_RCC_GetPCLK1Freq>
 8004322:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004324:	68ba      	ldr	r2, [r7, #8]
 8004326:	4613      	mov	r3, r2
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	4413      	add	r3, r2
 800432c:	009a      	lsls	r2, r3, #2
 800432e:	441a      	add	r2, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	fbb2 f3f3 	udiv	r3, r2, r3
 800433a:	4a23      	ldr	r2, [pc, #140]	; (80043c8 <UART_SetConfig+0x1b0>)
 800433c:	fba2 2303 	umull	r2, r3, r2, r3
 8004340:	095b      	lsrs	r3, r3, #5
 8004342:	0119      	lsls	r1, r3, #4
 8004344:	68ba      	ldr	r2, [r7, #8]
 8004346:	4613      	mov	r3, r2
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	4413      	add	r3, r2
 800434c:	009a      	lsls	r2, r3, #2
 800434e:	441a      	add	r2, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	fbb2 f2f3 	udiv	r2, r2, r3
 800435a:	4b1b      	ldr	r3, [pc, #108]	; (80043c8 <UART_SetConfig+0x1b0>)
 800435c:	fba3 0302 	umull	r0, r3, r3, r2
 8004360:	095b      	lsrs	r3, r3, #5
 8004362:	2064      	movs	r0, #100	; 0x64
 8004364:	fb00 f303 	mul.w	r3, r0, r3
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	011b      	lsls	r3, r3, #4
 800436c:	3332      	adds	r3, #50	; 0x32
 800436e:	4a16      	ldr	r2, [pc, #88]	; (80043c8 <UART_SetConfig+0x1b0>)
 8004370:	fba2 2303 	umull	r2, r3, r2, r3
 8004374:	095b      	lsrs	r3, r3, #5
 8004376:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800437a:	4419      	add	r1, r3
 800437c:	68ba      	ldr	r2, [r7, #8]
 800437e:	4613      	mov	r3, r2
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	4413      	add	r3, r2
 8004384:	009a      	lsls	r2, r3, #2
 8004386:	441a      	add	r2, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004392:	4b0d      	ldr	r3, [pc, #52]	; (80043c8 <UART_SetConfig+0x1b0>)
 8004394:	fba3 0302 	umull	r0, r3, r3, r2
 8004398:	095b      	lsrs	r3, r3, #5
 800439a:	2064      	movs	r0, #100	; 0x64
 800439c:	fb00 f303 	mul.w	r3, r0, r3
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	011b      	lsls	r3, r3, #4
 80043a4:	3332      	adds	r3, #50	; 0x32
 80043a6:	4a08      	ldr	r2, [pc, #32]	; (80043c8 <UART_SetConfig+0x1b0>)
 80043a8:	fba2 2303 	umull	r2, r3, r2, r3
 80043ac:	095b      	lsrs	r3, r3, #5
 80043ae:	f003 020f 	and.w	r2, r3, #15
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	440a      	add	r2, r1
 80043b8:	609a      	str	r2, [r3, #8]
}
 80043ba:	bf00      	nop
 80043bc:	3710      	adds	r7, #16
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	40013800 	.word	0x40013800
 80043c8:	51eb851f 	.word	0x51eb851f

080043cc <__errno>:
 80043cc:	4b01      	ldr	r3, [pc, #4]	; (80043d4 <__errno+0x8>)
 80043ce:	6818      	ldr	r0, [r3, #0]
 80043d0:	4770      	bx	lr
 80043d2:	bf00      	nop
 80043d4:	20000014 	.word	0x20000014

080043d8 <__libc_init_array>:
 80043d8:	b570      	push	{r4, r5, r6, lr}
 80043da:	2500      	movs	r5, #0
 80043dc:	4e0c      	ldr	r6, [pc, #48]	; (8004410 <__libc_init_array+0x38>)
 80043de:	4c0d      	ldr	r4, [pc, #52]	; (8004414 <__libc_init_array+0x3c>)
 80043e0:	1ba4      	subs	r4, r4, r6
 80043e2:	10a4      	asrs	r4, r4, #2
 80043e4:	42a5      	cmp	r5, r4
 80043e6:	d109      	bne.n	80043fc <__libc_init_array+0x24>
 80043e8:	f000 fc34 	bl	8004c54 <_init>
 80043ec:	2500      	movs	r5, #0
 80043ee:	4e0a      	ldr	r6, [pc, #40]	; (8004418 <__libc_init_array+0x40>)
 80043f0:	4c0a      	ldr	r4, [pc, #40]	; (800441c <__libc_init_array+0x44>)
 80043f2:	1ba4      	subs	r4, r4, r6
 80043f4:	10a4      	asrs	r4, r4, #2
 80043f6:	42a5      	cmp	r5, r4
 80043f8:	d105      	bne.n	8004406 <__libc_init_array+0x2e>
 80043fa:	bd70      	pop	{r4, r5, r6, pc}
 80043fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004400:	4798      	blx	r3
 8004402:	3501      	adds	r5, #1
 8004404:	e7ee      	b.n	80043e4 <__libc_init_array+0xc>
 8004406:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800440a:	4798      	blx	r3
 800440c:	3501      	adds	r5, #1
 800440e:	e7f2      	b.n	80043f6 <__libc_init_array+0x1e>
 8004410:	08004cf0 	.word	0x08004cf0
 8004414:	08004cf0 	.word	0x08004cf0
 8004418:	08004cf0 	.word	0x08004cf0
 800441c:	08004cf4 	.word	0x08004cf4

08004420 <memset>:
 8004420:	4603      	mov	r3, r0
 8004422:	4402      	add	r2, r0
 8004424:	4293      	cmp	r3, r2
 8004426:	d100      	bne.n	800442a <memset+0xa>
 8004428:	4770      	bx	lr
 800442a:	f803 1b01 	strb.w	r1, [r3], #1
 800442e:	e7f9      	b.n	8004424 <memset+0x4>

08004430 <siprintf>:
 8004430:	b40e      	push	{r1, r2, r3}
 8004432:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004436:	b500      	push	{lr}
 8004438:	b09c      	sub	sp, #112	; 0x70
 800443a:	ab1d      	add	r3, sp, #116	; 0x74
 800443c:	9002      	str	r0, [sp, #8]
 800443e:	9006      	str	r0, [sp, #24]
 8004440:	9107      	str	r1, [sp, #28]
 8004442:	9104      	str	r1, [sp, #16]
 8004444:	4808      	ldr	r0, [pc, #32]	; (8004468 <siprintf+0x38>)
 8004446:	4909      	ldr	r1, [pc, #36]	; (800446c <siprintf+0x3c>)
 8004448:	f853 2b04 	ldr.w	r2, [r3], #4
 800444c:	9105      	str	r1, [sp, #20]
 800444e:	6800      	ldr	r0, [r0, #0]
 8004450:	a902      	add	r1, sp, #8
 8004452:	9301      	str	r3, [sp, #4]
 8004454:	f000 f866 	bl	8004524 <_svfiprintf_r>
 8004458:	2200      	movs	r2, #0
 800445a:	9b02      	ldr	r3, [sp, #8]
 800445c:	701a      	strb	r2, [r3, #0]
 800445e:	b01c      	add	sp, #112	; 0x70
 8004460:	f85d eb04 	ldr.w	lr, [sp], #4
 8004464:	b003      	add	sp, #12
 8004466:	4770      	bx	lr
 8004468:	20000014 	.word	0x20000014
 800446c:	ffff0208 	.word	0xffff0208

08004470 <__ssputs_r>:
 8004470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004474:	688e      	ldr	r6, [r1, #8]
 8004476:	4682      	mov	sl, r0
 8004478:	429e      	cmp	r6, r3
 800447a:	460c      	mov	r4, r1
 800447c:	4690      	mov	r8, r2
 800447e:	4699      	mov	r9, r3
 8004480:	d837      	bhi.n	80044f2 <__ssputs_r+0x82>
 8004482:	898a      	ldrh	r2, [r1, #12]
 8004484:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004488:	d031      	beq.n	80044ee <__ssputs_r+0x7e>
 800448a:	2302      	movs	r3, #2
 800448c:	6825      	ldr	r5, [r4, #0]
 800448e:	6909      	ldr	r1, [r1, #16]
 8004490:	1a6f      	subs	r7, r5, r1
 8004492:	6965      	ldr	r5, [r4, #20]
 8004494:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004498:	fb95 f5f3 	sdiv	r5, r5, r3
 800449c:	f109 0301 	add.w	r3, r9, #1
 80044a0:	443b      	add	r3, r7
 80044a2:	429d      	cmp	r5, r3
 80044a4:	bf38      	it	cc
 80044a6:	461d      	movcc	r5, r3
 80044a8:	0553      	lsls	r3, r2, #21
 80044aa:	d530      	bpl.n	800450e <__ssputs_r+0x9e>
 80044ac:	4629      	mov	r1, r5
 80044ae:	f000 fb37 	bl	8004b20 <_malloc_r>
 80044b2:	4606      	mov	r6, r0
 80044b4:	b950      	cbnz	r0, 80044cc <__ssputs_r+0x5c>
 80044b6:	230c      	movs	r3, #12
 80044b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80044bc:	f8ca 3000 	str.w	r3, [sl]
 80044c0:	89a3      	ldrh	r3, [r4, #12]
 80044c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044c6:	81a3      	strh	r3, [r4, #12]
 80044c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044cc:	463a      	mov	r2, r7
 80044ce:	6921      	ldr	r1, [r4, #16]
 80044d0:	f000 fab6 	bl	8004a40 <memcpy>
 80044d4:	89a3      	ldrh	r3, [r4, #12]
 80044d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80044da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044de:	81a3      	strh	r3, [r4, #12]
 80044e0:	6126      	str	r6, [r4, #16]
 80044e2:	443e      	add	r6, r7
 80044e4:	6026      	str	r6, [r4, #0]
 80044e6:	464e      	mov	r6, r9
 80044e8:	6165      	str	r5, [r4, #20]
 80044ea:	1bed      	subs	r5, r5, r7
 80044ec:	60a5      	str	r5, [r4, #8]
 80044ee:	454e      	cmp	r6, r9
 80044f0:	d900      	bls.n	80044f4 <__ssputs_r+0x84>
 80044f2:	464e      	mov	r6, r9
 80044f4:	4632      	mov	r2, r6
 80044f6:	4641      	mov	r1, r8
 80044f8:	6820      	ldr	r0, [r4, #0]
 80044fa:	f000 faac 	bl	8004a56 <memmove>
 80044fe:	68a3      	ldr	r3, [r4, #8]
 8004500:	2000      	movs	r0, #0
 8004502:	1b9b      	subs	r3, r3, r6
 8004504:	60a3      	str	r3, [r4, #8]
 8004506:	6823      	ldr	r3, [r4, #0]
 8004508:	441e      	add	r6, r3
 800450a:	6026      	str	r6, [r4, #0]
 800450c:	e7dc      	b.n	80044c8 <__ssputs_r+0x58>
 800450e:	462a      	mov	r2, r5
 8004510:	f000 fb60 	bl	8004bd4 <_realloc_r>
 8004514:	4606      	mov	r6, r0
 8004516:	2800      	cmp	r0, #0
 8004518:	d1e2      	bne.n	80044e0 <__ssputs_r+0x70>
 800451a:	6921      	ldr	r1, [r4, #16]
 800451c:	4650      	mov	r0, sl
 800451e:	f000 fab3 	bl	8004a88 <_free_r>
 8004522:	e7c8      	b.n	80044b6 <__ssputs_r+0x46>

08004524 <_svfiprintf_r>:
 8004524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004528:	461d      	mov	r5, r3
 800452a:	898b      	ldrh	r3, [r1, #12]
 800452c:	b09d      	sub	sp, #116	; 0x74
 800452e:	061f      	lsls	r7, r3, #24
 8004530:	4680      	mov	r8, r0
 8004532:	460c      	mov	r4, r1
 8004534:	4616      	mov	r6, r2
 8004536:	d50f      	bpl.n	8004558 <_svfiprintf_r+0x34>
 8004538:	690b      	ldr	r3, [r1, #16]
 800453a:	b96b      	cbnz	r3, 8004558 <_svfiprintf_r+0x34>
 800453c:	2140      	movs	r1, #64	; 0x40
 800453e:	f000 faef 	bl	8004b20 <_malloc_r>
 8004542:	6020      	str	r0, [r4, #0]
 8004544:	6120      	str	r0, [r4, #16]
 8004546:	b928      	cbnz	r0, 8004554 <_svfiprintf_r+0x30>
 8004548:	230c      	movs	r3, #12
 800454a:	f8c8 3000 	str.w	r3, [r8]
 800454e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004552:	e0c8      	b.n	80046e6 <_svfiprintf_r+0x1c2>
 8004554:	2340      	movs	r3, #64	; 0x40
 8004556:	6163      	str	r3, [r4, #20]
 8004558:	2300      	movs	r3, #0
 800455a:	9309      	str	r3, [sp, #36]	; 0x24
 800455c:	2320      	movs	r3, #32
 800455e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004562:	2330      	movs	r3, #48	; 0x30
 8004564:	f04f 0b01 	mov.w	fp, #1
 8004568:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800456c:	9503      	str	r5, [sp, #12]
 800456e:	4637      	mov	r7, r6
 8004570:	463d      	mov	r5, r7
 8004572:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004576:	b10b      	cbz	r3, 800457c <_svfiprintf_r+0x58>
 8004578:	2b25      	cmp	r3, #37	; 0x25
 800457a:	d13e      	bne.n	80045fa <_svfiprintf_r+0xd6>
 800457c:	ebb7 0a06 	subs.w	sl, r7, r6
 8004580:	d00b      	beq.n	800459a <_svfiprintf_r+0x76>
 8004582:	4653      	mov	r3, sl
 8004584:	4632      	mov	r2, r6
 8004586:	4621      	mov	r1, r4
 8004588:	4640      	mov	r0, r8
 800458a:	f7ff ff71 	bl	8004470 <__ssputs_r>
 800458e:	3001      	adds	r0, #1
 8004590:	f000 80a4 	beq.w	80046dc <_svfiprintf_r+0x1b8>
 8004594:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004596:	4453      	add	r3, sl
 8004598:	9309      	str	r3, [sp, #36]	; 0x24
 800459a:	783b      	ldrb	r3, [r7, #0]
 800459c:	2b00      	cmp	r3, #0
 800459e:	f000 809d 	beq.w	80046dc <_svfiprintf_r+0x1b8>
 80045a2:	2300      	movs	r3, #0
 80045a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80045a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80045ac:	9304      	str	r3, [sp, #16]
 80045ae:	9307      	str	r3, [sp, #28]
 80045b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80045b4:	931a      	str	r3, [sp, #104]	; 0x68
 80045b6:	462f      	mov	r7, r5
 80045b8:	2205      	movs	r2, #5
 80045ba:	f817 1b01 	ldrb.w	r1, [r7], #1
 80045be:	4850      	ldr	r0, [pc, #320]	; (8004700 <_svfiprintf_r+0x1dc>)
 80045c0:	f000 fa30 	bl	8004a24 <memchr>
 80045c4:	9b04      	ldr	r3, [sp, #16]
 80045c6:	b9d0      	cbnz	r0, 80045fe <_svfiprintf_r+0xda>
 80045c8:	06d9      	lsls	r1, r3, #27
 80045ca:	bf44      	itt	mi
 80045cc:	2220      	movmi	r2, #32
 80045ce:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80045d2:	071a      	lsls	r2, r3, #28
 80045d4:	bf44      	itt	mi
 80045d6:	222b      	movmi	r2, #43	; 0x2b
 80045d8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80045dc:	782a      	ldrb	r2, [r5, #0]
 80045de:	2a2a      	cmp	r2, #42	; 0x2a
 80045e0:	d015      	beq.n	800460e <_svfiprintf_r+0xea>
 80045e2:	462f      	mov	r7, r5
 80045e4:	2000      	movs	r0, #0
 80045e6:	250a      	movs	r5, #10
 80045e8:	9a07      	ldr	r2, [sp, #28]
 80045ea:	4639      	mov	r1, r7
 80045ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80045f0:	3b30      	subs	r3, #48	; 0x30
 80045f2:	2b09      	cmp	r3, #9
 80045f4:	d94d      	bls.n	8004692 <_svfiprintf_r+0x16e>
 80045f6:	b1b8      	cbz	r0, 8004628 <_svfiprintf_r+0x104>
 80045f8:	e00f      	b.n	800461a <_svfiprintf_r+0xf6>
 80045fa:	462f      	mov	r7, r5
 80045fc:	e7b8      	b.n	8004570 <_svfiprintf_r+0x4c>
 80045fe:	4a40      	ldr	r2, [pc, #256]	; (8004700 <_svfiprintf_r+0x1dc>)
 8004600:	463d      	mov	r5, r7
 8004602:	1a80      	subs	r0, r0, r2
 8004604:	fa0b f000 	lsl.w	r0, fp, r0
 8004608:	4318      	orrs	r0, r3
 800460a:	9004      	str	r0, [sp, #16]
 800460c:	e7d3      	b.n	80045b6 <_svfiprintf_r+0x92>
 800460e:	9a03      	ldr	r2, [sp, #12]
 8004610:	1d11      	adds	r1, r2, #4
 8004612:	6812      	ldr	r2, [r2, #0]
 8004614:	9103      	str	r1, [sp, #12]
 8004616:	2a00      	cmp	r2, #0
 8004618:	db01      	blt.n	800461e <_svfiprintf_r+0xfa>
 800461a:	9207      	str	r2, [sp, #28]
 800461c:	e004      	b.n	8004628 <_svfiprintf_r+0x104>
 800461e:	4252      	negs	r2, r2
 8004620:	f043 0302 	orr.w	r3, r3, #2
 8004624:	9207      	str	r2, [sp, #28]
 8004626:	9304      	str	r3, [sp, #16]
 8004628:	783b      	ldrb	r3, [r7, #0]
 800462a:	2b2e      	cmp	r3, #46	; 0x2e
 800462c:	d10c      	bne.n	8004648 <_svfiprintf_r+0x124>
 800462e:	787b      	ldrb	r3, [r7, #1]
 8004630:	2b2a      	cmp	r3, #42	; 0x2a
 8004632:	d133      	bne.n	800469c <_svfiprintf_r+0x178>
 8004634:	9b03      	ldr	r3, [sp, #12]
 8004636:	3702      	adds	r7, #2
 8004638:	1d1a      	adds	r2, r3, #4
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	9203      	str	r2, [sp, #12]
 800463e:	2b00      	cmp	r3, #0
 8004640:	bfb8      	it	lt
 8004642:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004646:	9305      	str	r3, [sp, #20]
 8004648:	4d2e      	ldr	r5, [pc, #184]	; (8004704 <_svfiprintf_r+0x1e0>)
 800464a:	2203      	movs	r2, #3
 800464c:	7839      	ldrb	r1, [r7, #0]
 800464e:	4628      	mov	r0, r5
 8004650:	f000 f9e8 	bl	8004a24 <memchr>
 8004654:	b138      	cbz	r0, 8004666 <_svfiprintf_r+0x142>
 8004656:	2340      	movs	r3, #64	; 0x40
 8004658:	1b40      	subs	r0, r0, r5
 800465a:	fa03 f000 	lsl.w	r0, r3, r0
 800465e:	9b04      	ldr	r3, [sp, #16]
 8004660:	3701      	adds	r7, #1
 8004662:	4303      	orrs	r3, r0
 8004664:	9304      	str	r3, [sp, #16]
 8004666:	7839      	ldrb	r1, [r7, #0]
 8004668:	2206      	movs	r2, #6
 800466a:	4827      	ldr	r0, [pc, #156]	; (8004708 <_svfiprintf_r+0x1e4>)
 800466c:	1c7e      	adds	r6, r7, #1
 800466e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004672:	f000 f9d7 	bl	8004a24 <memchr>
 8004676:	2800      	cmp	r0, #0
 8004678:	d038      	beq.n	80046ec <_svfiprintf_r+0x1c8>
 800467a:	4b24      	ldr	r3, [pc, #144]	; (800470c <_svfiprintf_r+0x1e8>)
 800467c:	bb13      	cbnz	r3, 80046c4 <_svfiprintf_r+0x1a0>
 800467e:	9b03      	ldr	r3, [sp, #12]
 8004680:	3307      	adds	r3, #7
 8004682:	f023 0307 	bic.w	r3, r3, #7
 8004686:	3308      	adds	r3, #8
 8004688:	9303      	str	r3, [sp, #12]
 800468a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800468c:	444b      	add	r3, r9
 800468e:	9309      	str	r3, [sp, #36]	; 0x24
 8004690:	e76d      	b.n	800456e <_svfiprintf_r+0x4a>
 8004692:	fb05 3202 	mla	r2, r5, r2, r3
 8004696:	2001      	movs	r0, #1
 8004698:	460f      	mov	r7, r1
 800469a:	e7a6      	b.n	80045ea <_svfiprintf_r+0xc6>
 800469c:	2300      	movs	r3, #0
 800469e:	250a      	movs	r5, #10
 80046a0:	4619      	mov	r1, r3
 80046a2:	3701      	adds	r7, #1
 80046a4:	9305      	str	r3, [sp, #20]
 80046a6:	4638      	mov	r0, r7
 80046a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80046ac:	3a30      	subs	r2, #48	; 0x30
 80046ae:	2a09      	cmp	r2, #9
 80046b0:	d903      	bls.n	80046ba <_svfiprintf_r+0x196>
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d0c8      	beq.n	8004648 <_svfiprintf_r+0x124>
 80046b6:	9105      	str	r1, [sp, #20]
 80046b8:	e7c6      	b.n	8004648 <_svfiprintf_r+0x124>
 80046ba:	fb05 2101 	mla	r1, r5, r1, r2
 80046be:	2301      	movs	r3, #1
 80046c0:	4607      	mov	r7, r0
 80046c2:	e7f0      	b.n	80046a6 <_svfiprintf_r+0x182>
 80046c4:	ab03      	add	r3, sp, #12
 80046c6:	9300      	str	r3, [sp, #0]
 80046c8:	4622      	mov	r2, r4
 80046ca:	4b11      	ldr	r3, [pc, #68]	; (8004710 <_svfiprintf_r+0x1ec>)
 80046cc:	a904      	add	r1, sp, #16
 80046ce:	4640      	mov	r0, r8
 80046d0:	f3af 8000 	nop.w
 80046d4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80046d8:	4681      	mov	r9, r0
 80046da:	d1d6      	bne.n	800468a <_svfiprintf_r+0x166>
 80046dc:	89a3      	ldrh	r3, [r4, #12]
 80046de:	065b      	lsls	r3, r3, #25
 80046e0:	f53f af35 	bmi.w	800454e <_svfiprintf_r+0x2a>
 80046e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80046e6:	b01d      	add	sp, #116	; 0x74
 80046e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046ec:	ab03      	add	r3, sp, #12
 80046ee:	9300      	str	r3, [sp, #0]
 80046f0:	4622      	mov	r2, r4
 80046f2:	4b07      	ldr	r3, [pc, #28]	; (8004710 <_svfiprintf_r+0x1ec>)
 80046f4:	a904      	add	r1, sp, #16
 80046f6:	4640      	mov	r0, r8
 80046f8:	f000 f882 	bl	8004800 <_printf_i>
 80046fc:	e7ea      	b.n	80046d4 <_svfiprintf_r+0x1b0>
 80046fe:	bf00      	nop
 8004700:	08004cbc 	.word	0x08004cbc
 8004704:	08004cc2 	.word	0x08004cc2
 8004708:	08004cc6 	.word	0x08004cc6
 800470c:	00000000 	.word	0x00000000
 8004710:	08004471 	.word	0x08004471

08004714 <_printf_common>:
 8004714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004718:	4691      	mov	r9, r2
 800471a:	461f      	mov	r7, r3
 800471c:	688a      	ldr	r2, [r1, #8]
 800471e:	690b      	ldr	r3, [r1, #16]
 8004720:	4606      	mov	r6, r0
 8004722:	4293      	cmp	r3, r2
 8004724:	bfb8      	it	lt
 8004726:	4613      	movlt	r3, r2
 8004728:	f8c9 3000 	str.w	r3, [r9]
 800472c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004730:	460c      	mov	r4, r1
 8004732:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004736:	b112      	cbz	r2, 800473e <_printf_common+0x2a>
 8004738:	3301      	adds	r3, #1
 800473a:	f8c9 3000 	str.w	r3, [r9]
 800473e:	6823      	ldr	r3, [r4, #0]
 8004740:	0699      	lsls	r1, r3, #26
 8004742:	bf42      	ittt	mi
 8004744:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004748:	3302      	addmi	r3, #2
 800474a:	f8c9 3000 	strmi.w	r3, [r9]
 800474e:	6825      	ldr	r5, [r4, #0]
 8004750:	f015 0506 	ands.w	r5, r5, #6
 8004754:	d107      	bne.n	8004766 <_printf_common+0x52>
 8004756:	f104 0a19 	add.w	sl, r4, #25
 800475a:	68e3      	ldr	r3, [r4, #12]
 800475c:	f8d9 2000 	ldr.w	r2, [r9]
 8004760:	1a9b      	subs	r3, r3, r2
 8004762:	42ab      	cmp	r3, r5
 8004764:	dc29      	bgt.n	80047ba <_printf_common+0xa6>
 8004766:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800476a:	6822      	ldr	r2, [r4, #0]
 800476c:	3300      	adds	r3, #0
 800476e:	bf18      	it	ne
 8004770:	2301      	movne	r3, #1
 8004772:	0692      	lsls	r2, r2, #26
 8004774:	d42e      	bmi.n	80047d4 <_printf_common+0xc0>
 8004776:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800477a:	4639      	mov	r1, r7
 800477c:	4630      	mov	r0, r6
 800477e:	47c0      	blx	r8
 8004780:	3001      	adds	r0, #1
 8004782:	d021      	beq.n	80047c8 <_printf_common+0xb4>
 8004784:	6823      	ldr	r3, [r4, #0]
 8004786:	68e5      	ldr	r5, [r4, #12]
 8004788:	f003 0306 	and.w	r3, r3, #6
 800478c:	2b04      	cmp	r3, #4
 800478e:	bf18      	it	ne
 8004790:	2500      	movne	r5, #0
 8004792:	f8d9 2000 	ldr.w	r2, [r9]
 8004796:	f04f 0900 	mov.w	r9, #0
 800479a:	bf08      	it	eq
 800479c:	1aad      	subeq	r5, r5, r2
 800479e:	68a3      	ldr	r3, [r4, #8]
 80047a0:	6922      	ldr	r2, [r4, #16]
 80047a2:	bf08      	it	eq
 80047a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80047a8:	4293      	cmp	r3, r2
 80047aa:	bfc4      	itt	gt
 80047ac:	1a9b      	subgt	r3, r3, r2
 80047ae:	18ed      	addgt	r5, r5, r3
 80047b0:	341a      	adds	r4, #26
 80047b2:	454d      	cmp	r5, r9
 80047b4:	d11a      	bne.n	80047ec <_printf_common+0xd8>
 80047b6:	2000      	movs	r0, #0
 80047b8:	e008      	b.n	80047cc <_printf_common+0xb8>
 80047ba:	2301      	movs	r3, #1
 80047bc:	4652      	mov	r2, sl
 80047be:	4639      	mov	r1, r7
 80047c0:	4630      	mov	r0, r6
 80047c2:	47c0      	blx	r8
 80047c4:	3001      	adds	r0, #1
 80047c6:	d103      	bne.n	80047d0 <_printf_common+0xbc>
 80047c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80047cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047d0:	3501      	adds	r5, #1
 80047d2:	e7c2      	b.n	800475a <_printf_common+0x46>
 80047d4:	2030      	movs	r0, #48	; 0x30
 80047d6:	18e1      	adds	r1, r4, r3
 80047d8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80047dc:	1c5a      	adds	r2, r3, #1
 80047de:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80047e2:	4422      	add	r2, r4
 80047e4:	3302      	adds	r3, #2
 80047e6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80047ea:	e7c4      	b.n	8004776 <_printf_common+0x62>
 80047ec:	2301      	movs	r3, #1
 80047ee:	4622      	mov	r2, r4
 80047f0:	4639      	mov	r1, r7
 80047f2:	4630      	mov	r0, r6
 80047f4:	47c0      	blx	r8
 80047f6:	3001      	adds	r0, #1
 80047f8:	d0e6      	beq.n	80047c8 <_printf_common+0xb4>
 80047fa:	f109 0901 	add.w	r9, r9, #1
 80047fe:	e7d8      	b.n	80047b2 <_printf_common+0x9e>

08004800 <_printf_i>:
 8004800:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004804:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004808:	460c      	mov	r4, r1
 800480a:	7e09      	ldrb	r1, [r1, #24]
 800480c:	b085      	sub	sp, #20
 800480e:	296e      	cmp	r1, #110	; 0x6e
 8004810:	4617      	mov	r7, r2
 8004812:	4606      	mov	r6, r0
 8004814:	4698      	mov	r8, r3
 8004816:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004818:	f000 80b3 	beq.w	8004982 <_printf_i+0x182>
 800481c:	d822      	bhi.n	8004864 <_printf_i+0x64>
 800481e:	2963      	cmp	r1, #99	; 0x63
 8004820:	d036      	beq.n	8004890 <_printf_i+0x90>
 8004822:	d80a      	bhi.n	800483a <_printf_i+0x3a>
 8004824:	2900      	cmp	r1, #0
 8004826:	f000 80b9 	beq.w	800499c <_printf_i+0x19c>
 800482a:	2958      	cmp	r1, #88	; 0x58
 800482c:	f000 8083 	beq.w	8004936 <_printf_i+0x136>
 8004830:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004834:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004838:	e032      	b.n	80048a0 <_printf_i+0xa0>
 800483a:	2964      	cmp	r1, #100	; 0x64
 800483c:	d001      	beq.n	8004842 <_printf_i+0x42>
 800483e:	2969      	cmp	r1, #105	; 0x69
 8004840:	d1f6      	bne.n	8004830 <_printf_i+0x30>
 8004842:	6820      	ldr	r0, [r4, #0]
 8004844:	6813      	ldr	r3, [r2, #0]
 8004846:	0605      	lsls	r5, r0, #24
 8004848:	f103 0104 	add.w	r1, r3, #4
 800484c:	d52a      	bpl.n	80048a4 <_printf_i+0xa4>
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	6011      	str	r1, [r2, #0]
 8004852:	2b00      	cmp	r3, #0
 8004854:	da03      	bge.n	800485e <_printf_i+0x5e>
 8004856:	222d      	movs	r2, #45	; 0x2d
 8004858:	425b      	negs	r3, r3
 800485a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800485e:	486f      	ldr	r0, [pc, #444]	; (8004a1c <_printf_i+0x21c>)
 8004860:	220a      	movs	r2, #10
 8004862:	e039      	b.n	80048d8 <_printf_i+0xd8>
 8004864:	2973      	cmp	r1, #115	; 0x73
 8004866:	f000 809d 	beq.w	80049a4 <_printf_i+0x1a4>
 800486a:	d808      	bhi.n	800487e <_printf_i+0x7e>
 800486c:	296f      	cmp	r1, #111	; 0x6f
 800486e:	d020      	beq.n	80048b2 <_printf_i+0xb2>
 8004870:	2970      	cmp	r1, #112	; 0x70
 8004872:	d1dd      	bne.n	8004830 <_printf_i+0x30>
 8004874:	6823      	ldr	r3, [r4, #0]
 8004876:	f043 0320 	orr.w	r3, r3, #32
 800487a:	6023      	str	r3, [r4, #0]
 800487c:	e003      	b.n	8004886 <_printf_i+0x86>
 800487e:	2975      	cmp	r1, #117	; 0x75
 8004880:	d017      	beq.n	80048b2 <_printf_i+0xb2>
 8004882:	2978      	cmp	r1, #120	; 0x78
 8004884:	d1d4      	bne.n	8004830 <_printf_i+0x30>
 8004886:	2378      	movs	r3, #120	; 0x78
 8004888:	4865      	ldr	r0, [pc, #404]	; (8004a20 <_printf_i+0x220>)
 800488a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800488e:	e055      	b.n	800493c <_printf_i+0x13c>
 8004890:	6813      	ldr	r3, [r2, #0]
 8004892:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004896:	1d19      	adds	r1, r3, #4
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	6011      	str	r1, [r2, #0]
 800489c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80048a0:	2301      	movs	r3, #1
 80048a2:	e08c      	b.n	80049be <_printf_i+0x1be>
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80048aa:	6011      	str	r1, [r2, #0]
 80048ac:	bf18      	it	ne
 80048ae:	b21b      	sxthne	r3, r3
 80048b0:	e7cf      	b.n	8004852 <_printf_i+0x52>
 80048b2:	6813      	ldr	r3, [r2, #0]
 80048b4:	6825      	ldr	r5, [r4, #0]
 80048b6:	1d18      	adds	r0, r3, #4
 80048b8:	6010      	str	r0, [r2, #0]
 80048ba:	0628      	lsls	r0, r5, #24
 80048bc:	d501      	bpl.n	80048c2 <_printf_i+0xc2>
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	e002      	b.n	80048c8 <_printf_i+0xc8>
 80048c2:	0668      	lsls	r0, r5, #25
 80048c4:	d5fb      	bpl.n	80048be <_printf_i+0xbe>
 80048c6:	881b      	ldrh	r3, [r3, #0]
 80048c8:	296f      	cmp	r1, #111	; 0x6f
 80048ca:	bf14      	ite	ne
 80048cc:	220a      	movne	r2, #10
 80048ce:	2208      	moveq	r2, #8
 80048d0:	4852      	ldr	r0, [pc, #328]	; (8004a1c <_printf_i+0x21c>)
 80048d2:	2100      	movs	r1, #0
 80048d4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80048d8:	6865      	ldr	r5, [r4, #4]
 80048da:	2d00      	cmp	r5, #0
 80048dc:	60a5      	str	r5, [r4, #8]
 80048de:	f2c0 8095 	blt.w	8004a0c <_printf_i+0x20c>
 80048e2:	6821      	ldr	r1, [r4, #0]
 80048e4:	f021 0104 	bic.w	r1, r1, #4
 80048e8:	6021      	str	r1, [r4, #0]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d13d      	bne.n	800496a <_printf_i+0x16a>
 80048ee:	2d00      	cmp	r5, #0
 80048f0:	f040 808e 	bne.w	8004a10 <_printf_i+0x210>
 80048f4:	4665      	mov	r5, ip
 80048f6:	2a08      	cmp	r2, #8
 80048f8:	d10b      	bne.n	8004912 <_printf_i+0x112>
 80048fa:	6823      	ldr	r3, [r4, #0]
 80048fc:	07db      	lsls	r3, r3, #31
 80048fe:	d508      	bpl.n	8004912 <_printf_i+0x112>
 8004900:	6923      	ldr	r3, [r4, #16]
 8004902:	6862      	ldr	r2, [r4, #4]
 8004904:	429a      	cmp	r2, r3
 8004906:	bfde      	ittt	le
 8004908:	2330      	movle	r3, #48	; 0x30
 800490a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800490e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004912:	ebac 0305 	sub.w	r3, ip, r5
 8004916:	6123      	str	r3, [r4, #16]
 8004918:	f8cd 8000 	str.w	r8, [sp]
 800491c:	463b      	mov	r3, r7
 800491e:	aa03      	add	r2, sp, #12
 8004920:	4621      	mov	r1, r4
 8004922:	4630      	mov	r0, r6
 8004924:	f7ff fef6 	bl	8004714 <_printf_common>
 8004928:	3001      	adds	r0, #1
 800492a:	d14d      	bne.n	80049c8 <_printf_i+0x1c8>
 800492c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004930:	b005      	add	sp, #20
 8004932:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004936:	4839      	ldr	r0, [pc, #228]	; (8004a1c <_printf_i+0x21c>)
 8004938:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800493c:	6813      	ldr	r3, [r2, #0]
 800493e:	6821      	ldr	r1, [r4, #0]
 8004940:	1d1d      	adds	r5, r3, #4
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	6015      	str	r5, [r2, #0]
 8004946:	060a      	lsls	r2, r1, #24
 8004948:	d50b      	bpl.n	8004962 <_printf_i+0x162>
 800494a:	07ca      	lsls	r2, r1, #31
 800494c:	bf44      	itt	mi
 800494e:	f041 0120 	orrmi.w	r1, r1, #32
 8004952:	6021      	strmi	r1, [r4, #0]
 8004954:	b91b      	cbnz	r3, 800495e <_printf_i+0x15e>
 8004956:	6822      	ldr	r2, [r4, #0]
 8004958:	f022 0220 	bic.w	r2, r2, #32
 800495c:	6022      	str	r2, [r4, #0]
 800495e:	2210      	movs	r2, #16
 8004960:	e7b7      	b.n	80048d2 <_printf_i+0xd2>
 8004962:	064d      	lsls	r5, r1, #25
 8004964:	bf48      	it	mi
 8004966:	b29b      	uxthmi	r3, r3
 8004968:	e7ef      	b.n	800494a <_printf_i+0x14a>
 800496a:	4665      	mov	r5, ip
 800496c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004970:	fb02 3311 	mls	r3, r2, r1, r3
 8004974:	5cc3      	ldrb	r3, [r0, r3]
 8004976:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800497a:	460b      	mov	r3, r1
 800497c:	2900      	cmp	r1, #0
 800497e:	d1f5      	bne.n	800496c <_printf_i+0x16c>
 8004980:	e7b9      	b.n	80048f6 <_printf_i+0xf6>
 8004982:	6813      	ldr	r3, [r2, #0]
 8004984:	6825      	ldr	r5, [r4, #0]
 8004986:	1d18      	adds	r0, r3, #4
 8004988:	6961      	ldr	r1, [r4, #20]
 800498a:	6010      	str	r0, [r2, #0]
 800498c:	0628      	lsls	r0, r5, #24
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	d501      	bpl.n	8004996 <_printf_i+0x196>
 8004992:	6019      	str	r1, [r3, #0]
 8004994:	e002      	b.n	800499c <_printf_i+0x19c>
 8004996:	066a      	lsls	r2, r5, #25
 8004998:	d5fb      	bpl.n	8004992 <_printf_i+0x192>
 800499a:	8019      	strh	r1, [r3, #0]
 800499c:	2300      	movs	r3, #0
 800499e:	4665      	mov	r5, ip
 80049a0:	6123      	str	r3, [r4, #16]
 80049a2:	e7b9      	b.n	8004918 <_printf_i+0x118>
 80049a4:	6813      	ldr	r3, [r2, #0]
 80049a6:	1d19      	adds	r1, r3, #4
 80049a8:	6011      	str	r1, [r2, #0]
 80049aa:	681d      	ldr	r5, [r3, #0]
 80049ac:	6862      	ldr	r2, [r4, #4]
 80049ae:	2100      	movs	r1, #0
 80049b0:	4628      	mov	r0, r5
 80049b2:	f000 f837 	bl	8004a24 <memchr>
 80049b6:	b108      	cbz	r0, 80049bc <_printf_i+0x1bc>
 80049b8:	1b40      	subs	r0, r0, r5
 80049ba:	6060      	str	r0, [r4, #4]
 80049bc:	6863      	ldr	r3, [r4, #4]
 80049be:	6123      	str	r3, [r4, #16]
 80049c0:	2300      	movs	r3, #0
 80049c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049c6:	e7a7      	b.n	8004918 <_printf_i+0x118>
 80049c8:	6923      	ldr	r3, [r4, #16]
 80049ca:	462a      	mov	r2, r5
 80049cc:	4639      	mov	r1, r7
 80049ce:	4630      	mov	r0, r6
 80049d0:	47c0      	blx	r8
 80049d2:	3001      	adds	r0, #1
 80049d4:	d0aa      	beq.n	800492c <_printf_i+0x12c>
 80049d6:	6823      	ldr	r3, [r4, #0]
 80049d8:	079b      	lsls	r3, r3, #30
 80049da:	d413      	bmi.n	8004a04 <_printf_i+0x204>
 80049dc:	68e0      	ldr	r0, [r4, #12]
 80049de:	9b03      	ldr	r3, [sp, #12]
 80049e0:	4298      	cmp	r0, r3
 80049e2:	bfb8      	it	lt
 80049e4:	4618      	movlt	r0, r3
 80049e6:	e7a3      	b.n	8004930 <_printf_i+0x130>
 80049e8:	2301      	movs	r3, #1
 80049ea:	464a      	mov	r2, r9
 80049ec:	4639      	mov	r1, r7
 80049ee:	4630      	mov	r0, r6
 80049f0:	47c0      	blx	r8
 80049f2:	3001      	adds	r0, #1
 80049f4:	d09a      	beq.n	800492c <_printf_i+0x12c>
 80049f6:	3501      	adds	r5, #1
 80049f8:	68e3      	ldr	r3, [r4, #12]
 80049fa:	9a03      	ldr	r2, [sp, #12]
 80049fc:	1a9b      	subs	r3, r3, r2
 80049fe:	42ab      	cmp	r3, r5
 8004a00:	dcf2      	bgt.n	80049e8 <_printf_i+0x1e8>
 8004a02:	e7eb      	b.n	80049dc <_printf_i+0x1dc>
 8004a04:	2500      	movs	r5, #0
 8004a06:	f104 0919 	add.w	r9, r4, #25
 8004a0a:	e7f5      	b.n	80049f8 <_printf_i+0x1f8>
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d1ac      	bne.n	800496a <_printf_i+0x16a>
 8004a10:	7803      	ldrb	r3, [r0, #0]
 8004a12:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a16:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a1a:	e76c      	b.n	80048f6 <_printf_i+0xf6>
 8004a1c:	08004ccd 	.word	0x08004ccd
 8004a20:	08004cde 	.word	0x08004cde

08004a24 <memchr>:
 8004a24:	b510      	push	{r4, lr}
 8004a26:	b2c9      	uxtb	r1, r1
 8004a28:	4402      	add	r2, r0
 8004a2a:	4290      	cmp	r0, r2
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	d101      	bne.n	8004a34 <memchr+0x10>
 8004a30:	2300      	movs	r3, #0
 8004a32:	e003      	b.n	8004a3c <memchr+0x18>
 8004a34:	781c      	ldrb	r4, [r3, #0]
 8004a36:	3001      	adds	r0, #1
 8004a38:	428c      	cmp	r4, r1
 8004a3a:	d1f6      	bne.n	8004a2a <memchr+0x6>
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	bd10      	pop	{r4, pc}

08004a40 <memcpy>:
 8004a40:	b510      	push	{r4, lr}
 8004a42:	1e43      	subs	r3, r0, #1
 8004a44:	440a      	add	r2, r1
 8004a46:	4291      	cmp	r1, r2
 8004a48:	d100      	bne.n	8004a4c <memcpy+0xc>
 8004a4a:	bd10      	pop	{r4, pc}
 8004a4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a50:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a54:	e7f7      	b.n	8004a46 <memcpy+0x6>

08004a56 <memmove>:
 8004a56:	4288      	cmp	r0, r1
 8004a58:	b510      	push	{r4, lr}
 8004a5a:	eb01 0302 	add.w	r3, r1, r2
 8004a5e:	d807      	bhi.n	8004a70 <memmove+0x1a>
 8004a60:	1e42      	subs	r2, r0, #1
 8004a62:	4299      	cmp	r1, r3
 8004a64:	d00a      	beq.n	8004a7c <memmove+0x26>
 8004a66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a6a:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004a6e:	e7f8      	b.n	8004a62 <memmove+0xc>
 8004a70:	4283      	cmp	r3, r0
 8004a72:	d9f5      	bls.n	8004a60 <memmove+0xa>
 8004a74:	1881      	adds	r1, r0, r2
 8004a76:	1ad2      	subs	r2, r2, r3
 8004a78:	42d3      	cmn	r3, r2
 8004a7a:	d100      	bne.n	8004a7e <memmove+0x28>
 8004a7c:	bd10      	pop	{r4, pc}
 8004a7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004a82:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004a86:	e7f7      	b.n	8004a78 <memmove+0x22>

08004a88 <_free_r>:
 8004a88:	b538      	push	{r3, r4, r5, lr}
 8004a8a:	4605      	mov	r5, r0
 8004a8c:	2900      	cmp	r1, #0
 8004a8e:	d043      	beq.n	8004b18 <_free_r+0x90>
 8004a90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a94:	1f0c      	subs	r4, r1, #4
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	bfb8      	it	lt
 8004a9a:	18e4      	addlt	r4, r4, r3
 8004a9c:	f000 f8d0 	bl	8004c40 <__malloc_lock>
 8004aa0:	4a1e      	ldr	r2, [pc, #120]	; (8004b1c <_free_r+0x94>)
 8004aa2:	6813      	ldr	r3, [r2, #0]
 8004aa4:	4610      	mov	r0, r2
 8004aa6:	b933      	cbnz	r3, 8004ab6 <_free_r+0x2e>
 8004aa8:	6063      	str	r3, [r4, #4]
 8004aaa:	6014      	str	r4, [r2, #0]
 8004aac:	4628      	mov	r0, r5
 8004aae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ab2:	f000 b8c6 	b.w	8004c42 <__malloc_unlock>
 8004ab6:	42a3      	cmp	r3, r4
 8004ab8:	d90b      	bls.n	8004ad2 <_free_r+0x4a>
 8004aba:	6821      	ldr	r1, [r4, #0]
 8004abc:	1862      	adds	r2, r4, r1
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	bf01      	itttt	eq
 8004ac2:	681a      	ldreq	r2, [r3, #0]
 8004ac4:	685b      	ldreq	r3, [r3, #4]
 8004ac6:	1852      	addeq	r2, r2, r1
 8004ac8:	6022      	streq	r2, [r4, #0]
 8004aca:	6063      	str	r3, [r4, #4]
 8004acc:	6004      	str	r4, [r0, #0]
 8004ace:	e7ed      	b.n	8004aac <_free_r+0x24>
 8004ad0:	4613      	mov	r3, r2
 8004ad2:	685a      	ldr	r2, [r3, #4]
 8004ad4:	b10a      	cbz	r2, 8004ada <_free_r+0x52>
 8004ad6:	42a2      	cmp	r2, r4
 8004ad8:	d9fa      	bls.n	8004ad0 <_free_r+0x48>
 8004ada:	6819      	ldr	r1, [r3, #0]
 8004adc:	1858      	adds	r0, r3, r1
 8004ade:	42a0      	cmp	r0, r4
 8004ae0:	d10b      	bne.n	8004afa <_free_r+0x72>
 8004ae2:	6820      	ldr	r0, [r4, #0]
 8004ae4:	4401      	add	r1, r0
 8004ae6:	1858      	adds	r0, r3, r1
 8004ae8:	4282      	cmp	r2, r0
 8004aea:	6019      	str	r1, [r3, #0]
 8004aec:	d1de      	bne.n	8004aac <_free_r+0x24>
 8004aee:	6810      	ldr	r0, [r2, #0]
 8004af0:	6852      	ldr	r2, [r2, #4]
 8004af2:	4401      	add	r1, r0
 8004af4:	6019      	str	r1, [r3, #0]
 8004af6:	605a      	str	r2, [r3, #4]
 8004af8:	e7d8      	b.n	8004aac <_free_r+0x24>
 8004afa:	d902      	bls.n	8004b02 <_free_r+0x7a>
 8004afc:	230c      	movs	r3, #12
 8004afe:	602b      	str	r3, [r5, #0]
 8004b00:	e7d4      	b.n	8004aac <_free_r+0x24>
 8004b02:	6820      	ldr	r0, [r4, #0]
 8004b04:	1821      	adds	r1, r4, r0
 8004b06:	428a      	cmp	r2, r1
 8004b08:	bf01      	itttt	eq
 8004b0a:	6811      	ldreq	r1, [r2, #0]
 8004b0c:	6852      	ldreq	r2, [r2, #4]
 8004b0e:	1809      	addeq	r1, r1, r0
 8004b10:	6021      	streq	r1, [r4, #0]
 8004b12:	6062      	str	r2, [r4, #4]
 8004b14:	605c      	str	r4, [r3, #4]
 8004b16:	e7c9      	b.n	8004aac <_free_r+0x24>
 8004b18:	bd38      	pop	{r3, r4, r5, pc}
 8004b1a:	bf00      	nop
 8004b1c:	200000a8 	.word	0x200000a8

08004b20 <_malloc_r>:
 8004b20:	b570      	push	{r4, r5, r6, lr}
 8004b22:	1ccd      	adds	r5, r1, #3
 8004b24:	f025 0503 	bic.w	r5, r5, #3
 8004b28:	3508      	adds	r5, #8
 8004b2a:	2d0c      	cmp	r5, #12
 8004b2c:	bf38      	it	cc
 8004b2e:	250c      	movcc	r5, #12
 8004b30:	2d00      	cmp	r5, #0
 8004b32:	4606      	mov	r6, r0
 8004b34:	db01      	blt.n	8004b3a <_malloc_r+0x1a>
 8004b36:	42a9      	cmp	r1, r5
 8004b38:	d903      	bls.n	8004b42 <_malloc_r+0x22>
 8004b3a:	230c      	movs	r3, #12
 8004b3c:	6033      	str	r3, [r6, #0]
 8004b3e:	2000      	movs	r0, #0
 8004b40:	bd70      	pop	{r4, r5, r6, pc}
 8004b42:	f000 f87d 	bl	8004c40 <__malloc_lock>
 8004b46:	4a21      	ldr	r2, [pc, #132]	; (8004bcc <_malloc_r+0xac>)
 8004b48:	6814      	ldr	r4, [r2, #0]
 8004b4a:	4621      	mov	r1, r4
 8004b4c:	b991      	cbnz	r1, 8004b74 <_malloc_r+0x54>
 8004b4e:	4c20      	ldr	r4, [pc, #128]	; (8004bd0 <_malloc_r+0xb0>)
 8004b50:	6823      	ldr	r3, [r4, #0]
 8004b52:	b91b      	cbnz	r3, 8004b5c <_malloc_r+0x3c>
 8004b54:	4630      	mov	r0, r6
 8004b56:	f000 f863 	bl	8004c20 <_sbrk_r>
 8004b5a:	6020      	str	r0, [r4, #0]
 8004b5c:	4629      	mov	r1, r5
 8004b5e:	4630      	mov	r0, r6
 8004b60:	f000 f85e 	bl	8004c20 <_sbrk_r>
 8004b64:	1c43      	adds	r3, r0, #1
 8004b66:	d124      	bne.n	8004bb2 <_malloc_r+0x92>
 8004b68:	230c      	movs	r3, #12
 8004b6a:	4630      	mov	r0, r6
 8004b6c:	6033      	str	r3, [r6, #0]
 8004b6e:	f000 f868 	bl	8004c42 <__malloc_unlock>
 8004b72:	e7e4      	b.n	8004b3e <_malloc_r+0x1e>
 8004b74:	680b      	ldr	r3, [r1, #0]
 8004b76:	1b5b      	subs	r3, r3, r5
 8004b78:	d418      	bmi.n	8004bac <_malloc_r+0x8c>
 8004b7a:	2b0b      	cmp	r3, #11
 8004b7c:	d90f      	bls.n	8004b9e <_malloc_r+0x7e>
 8004b7e:	600b      	str	r3, [r1, #0]
 8004b80:	18cc      	adds	r4, r1, r3
 8004b82:	50cd      	str	r5, [r1, r3]
 8004b84:	4630      	mov	r0, r6
 8004b86:	f000 f85c 	bl	8004c42 <__malloc_unlock>
 8004b8a:	f104 000b 	add.w	r0, r4, #11
 8004b8e:	1d23      	adds	r3, r4, #4
 8004b90:	f020 0007 	bic.w	r0, r0, #7
 8004b94:	1ac3      	subs	r3, r0, r3
 8004b96:	d0d3      	beq.n	8004b40 <_malloc_r+0x20>
 8004b98:	425a      	negs	r2, r3
 8004b9a:	50e2      	str	r2, [r4, r3]
 8004b9c:	e7d0      	b.n	8004b40 <_malloc_r+0x20>
 8004b9e:	684b      	ldr	r3, [r1, #4]
 8004ba0:	428c      	cmp	r4, r1
 8004ba2:	bf16      	itet	ne
 8004ba4:	6063      	strne	r3, [r4, #4]
 8004ba6:	6013      	streq	r3, [r2, #0]
 8004ba8:	460c      	movne	r4, r1
 8004baa:	e7eb      	b.n	8004b84 <_malloc_r+0x64>
 8004bac:	460c      	mov	r4, r1
 8004bae:	6849      	ldr	r1, [r1, #4]
 8004bb0:	e7cc      	b.n	8004b4c <_malloc_r+0x2c>
 8004bb2:	1cc4      	adds	r4, r0, #3
 8004bb4:	f024 0403 	bic.w	r4, r4, #3
 8004bb8:	42a0      	cmp	r0, r4
 8004bba:	d005      	beq.n	8004bc8 <_malloc_r+0xa8>
 8004bbc:	1a21      	subs	r1, r4, r0
 8004bbe:	4630      	mov	r0, r6
 8004bc0:	f000 f82e 	bl	8004c20 <_sbrk_r>
 8004bc4:	3001      	adds	r0, #1
 8004bc6:	d0cf      	beq.n	8004b68 <_malloc_r+0x48>
 8004bc8:	6025      	str	r5, [r4, #0]
 8004bca:	e7db      	b.n	8004b84 <_malloc_r+0x64>
 8004bcc:	200000a8 	.word	0x200000a8
 8004bd0:	200000ac 	.word	0x200000ac

08004bd4 <_realloc_r>:
 8004bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bd6:	4607      	mov	r7, r0
 8004bd8:	4614      	mov	r4, r2
 8004bda:	460e      	mov	r6, r1
 8004bdc:	b921      	cbnz	r1, 8004be8 <_realloc_r+0x14>
 8004bde:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004be2:	4611      	mov	r1, r2
 8004be4:	f7ff bf9c 	b.w	8004b20 <_malloc_r>
 8004be8:	b922      	cbnz	r2, 8004bf4 <_realloc_r+0x20>
 8004bea:	f7ff ff4d 	bl	8004a88 <_free_r>
 8004bee:	4625      	mov	r5, r4
 8004bf0:	4628      	mov	r0, r5
 8004bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bf4:	f000 f826 	bl	8004c44 <_malloc_usable_size_r>
 8004bf8:	42a0      	cmp	r0, r4
 8004bfa:	d20f      	bcs.n	8004c1c <_realloc_r+0x48>
 8004bfc:	4621      	mov	r1, r4
 8004bfe:	4638      	mov	r0, r7
 8004c00:	f7ff ff8e 	bl	8004b20 <_malloc_r>
 8004c04:	4605      	mov	r5, r0
 8004c06:	2800      	cmp	r0, #0
 8004c08:	d0f2      	beq.n	8004bf0 <_realloc_r+0x1c>
 8004c0a:	4631      	mov	r1, r6
 8004c0c:	4622      	mov	r2, r4
 8004c0e:	f7ff ff17 	bl	8004a40 <memcpy>
 8004c12:	4631      	mov	r1, r6
 8004c14:	4638      	mov	r0, r7
 8004c16:	f7ff ff37 	bl	8004a88 <_free_r>
 8004c1a:	e7e9      	b.n	8004bf0 <_realloc_r+0x1c>
 8004c1c:	4635      	mov	r5, r6
 8004c1e:	e7e7      	b.n	8004bf0 <_realloc_r+0x1c>

08004c20 <_sbrk_r>:
 8004c20:	b538      	push	{r3, r4, r5, lr}
 8004c22:	2300      	movs	r3, #0
 8004c24:	4c05      	ldr	r4, [pc, #20]	; (8004c3c <_sbrk_r+0x1c>)
 8004c26:	4605      	mov	r5, r0
 8004c28:	4608      	mov	r0, r1
 8004c2a:	6023      	str	r3, [r4, #0]
 8004c2c:	f7fc fd7a 	bl	8001724 <_sbrk>
 8004c30:	1c43      	adds	r3, r0, #1
 8004c32:	d102      	bne.n	8004c3a <_sbrk_r+0x1a>
 8004c34:	6823      	ldr	r3, [r4, #0]
 8004c36:	b103      	cbz	r3, 8004c3a <_sbrk_r+0x1a>
 8004c38:	602b      	str	r3, [r5, #0]
 8004c3a:	bd38      	pop	{r3, r4, r5, pc}
 8004c3c:	20000324 	.word	0x20000324

08004c40 <__malloc_lock>:
 8004c40:	4770      	bx	lr

08004c42 <__malloc_unlock>:
 8004c42:	4770      	bx	lr

08004c44 <_malloc_usable_size_r>:
 8004c44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c48:	1f18      	subs	r0, r3, #4
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	bfbc      	itt	lt
 8004c4e:	580b      	ldrlt	r3, [r1, r0]
 8004c50:	18c0      	addlt	r0, r0, r3
 8004c52:	4770      	bx	lr

08004c54 <_init>:
 8004c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c56:	bf00      	nop
 8004c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c5a:	bc08      	pop	{r3}
 8004c5c:	469e      	mov	lr, r3
 8004c5e:	4770      	bx	lr

08004c60 <_fini>:
 8004c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c62:	bf00      	nop
 8004c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c66:	bc08      	pop	{r3}
 8004c68:	469e      	mov	lr, r3
 8004c6a:	4770      	bx	lr
